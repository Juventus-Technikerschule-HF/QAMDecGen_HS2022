
QAMDecGen.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003c38  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000154  00802000  00003c38  00003ccc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000015b5  00802154  00802154  00003e20  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003e20  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003e50  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000880  00000000  00000000  00003e90  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00010605  00000000  00000000  00004710  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000050bd  00000000  00000000  00014d15  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000563c  00000000  00000000  00019dd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001d64  00000000  00000000  0001f410  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000703d  00000000  00000000  00021174  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00009014  00000000  00000000  000281b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000830  00000000  00000000  000311c5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__ctors_end>
       4:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
       8:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
       c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      10:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      14:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      18:	0c 94 22 1a 	jmp	0x3444	; 0x3444 <__vector_6>
      1c:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <__vector_7>
      20:	0c 94 38 19 	jmp	0x3270	; 0x3270 <__vector_8>
      24:	0c 94 67 19 	jmp	0x32ce	; 0x32ce <__vector_9>
      28:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      2c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      30:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      34:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      38:	0c 94 6a 05 	jmp	0xad4	; 0xad4 <__vector_14>
      3c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      40:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      44:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      48:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      4c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      50:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      54:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      58:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      5c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      60:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      64:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      68:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      6c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      70:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      74:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      78:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      7c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      80:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      84:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      88:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      8c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      90:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      94:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      98:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      9c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      a0:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      a4:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      a8:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      ac:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      b0:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      b4:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      b8:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      bc:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      c0:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      c4:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      c8:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      cc:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      d0:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      d4:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      d8:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      dc:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      e0:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      e4:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      e8:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      ec:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      f0:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      f4:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      f8:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
      fc:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     100:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     104:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     108:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     10c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     110:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     114:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     118:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     11c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     120:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     124:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     128:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     12c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     130:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     134:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     138:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     13c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     140:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     144:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     148:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     14c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     150:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     154:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     158:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     15c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     160:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     164:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     168:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     16c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     170:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     174:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     178:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     17c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     180:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     184:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     188:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     18c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     190:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     194:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     198:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     19c:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     1a0:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     1a4:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     1a8:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     1ac:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     1b0:	0c 94 28 16 	jmp	0x2c50	; 0x2c50 <__vector_108>
     1b4:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     1b8:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     1bc:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     1c0:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     1c4:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     1c8:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     1cc:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     1d0:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     1d4:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     1d8:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     1dc:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     1e0:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     1e4:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     1e8:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     1ec:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     1f0:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     1f4:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     1f8:	0c 94 45 01 	jmp	0x28a	; 0x28a <__bad_interrupt>
     1fc:	23 11       	cpse	r18, r3
     1fe:	23 11       	cpse	r18, r3
     200:	23 11       	cpse	r18, r3
     202:	70 11       	cpse	r23, r0
     204:	58 11       	cpse	r21, r8
     206:	6d 11       	cpse	r22, r13
     208:	23 11       	cpse	r18, r3
     20a:	23 11       	cpse	r18, r3
     20c:	70 11       	cpse	r23, r0
     20e:	58 11       	cpse	r21, r8

00000210 <__trampolines_start>:
     210:	0c 94 7a 0a 	jmp	0x14f4	; 0x14f4 <prvIdleTask>
     214:	0c 94 58 11 	jmp	0x22b0	; 0x22b0 <prvProcessReceivedCommands+0xf2>
     218:	0c 94 70 11 	jmp	0x22e0	; 0x22e0 <prvProcessReceivedCommands+0x122>
     21c:	0c 94 48 03 	jmp	0x690	; 0x690 <vEventGroupSetBitsCallback>
     220:	0c 94 dd 18 	jmp	0x31ba	; 0x31ba <vQuamDec>
     224:	0c 94 23 11 	jmp	0x2246	; 0x2246 <prvProcessReceivedCommands+0x88>
     228:	0c 94 8c 11 	jmp	0x2318	; 0x2318 <prvTimerTask>
     22c:	0c 94 6d 11 	jmp	0x22da	; 0x22da <prvProcessReceivedCommands+0x11c>
     230:	0c 94 cc 17 	jmp	0x2f98	; 0x2f98 <vDisplayUpdateTask>
     234:	0c 94 96 19 	jmp	0x332c	; 0x332c <vQuamGen>

00000238 <__ctors_end>:
     238:	11 24       	eor	r1, r1
     23a:	1f be       	out	0x3f, r1	; 63
     23c:	cf ef       	ldi	r28, 0xFF	; 255
     23e:	cd bf       	out	0x3d, r28	; 61
     240:	df e3       	ldi	r29, 0x3F	; 63
     242:	de bf       	out	0x3e, r29	; 62
     244:	00 e0       	ldi	r16, 0x00	; 0
     246:	0c bf       	out	0x3c, r16	; 60

00000248 <init_mem>:
// !!! Never call this function, it is part of .init-Code
void __attribute__ ((naked, section(".init3"))) init_mem (void);
void init_mem (void)
{
   //  Use inline assembler so it works even with optimization turned off
   __asm volatile (
     248:	e9 e0       	ldi	r30, 0x09	; 9
     24a:	f7 e3       	ldi	r31, 0x37	; 55
     24c:	8a ea       	ldi	r24, 0xAA	; 170
     24e:	90 e4       	ldi	r25, 0x40	; 64
     250:	81 93       	st	Z+, r24
     252:	e0 30       	cpi	r30, 0x00	; 0
     254:	f9 07       	cpc	r31, r25
     256:	e0 f3       	brcs	.-8      	; 0x250 <init_mem+0x8>

00000258 <__do_copy_data>:
     258:	11 e2       	ldi	r17, 0x21	; 33
     25a:	a0 e0       	ldi	r26, 0x00	; 0
     25c:	b0 e2       	ldi	r27, 0x20	; 32
     25e:	e8 e3       	ldi	r30, 0x38	; 56
     260:	fc e3       	ldi	r31, 0x3C	; 60
     262:	00 e0       	ldi	r16, 0x00	; 0
     264:	0b bf       	out	0x3b, r16	; 59
     266:	02 c0       	rjmp	.+4      	; 0x26c <__do_copy_data+0x14>
     268:	07 90       	elpm	r0, Z+
     26a:	0d 92       	st	X+, r0
     26c:	a4 35       	cpi	r26, 0x54	; 84
     26e:	b1 07       	cpc	r27, r17
     270:	d9 f7       	brne	.-10     	; 0x268 <__do_copy_data+0x10>

00000272 <__do_clear_bss>:
     272:	27 e3       	ldi	r18, 0x37	; 55
     274:	a4 e5       	ldi	r26, 0x54	; 84
     276:	b1 e2       	ldi	r27, 0x21	; 33
     278:	01 c0       	rjmp	.+2      	; 0x27c <.do_clear_bss_start>

0000027a <.do_clear_bss_loop>:
     27a:	1d 92       	st	X+, r1

0000027c <.do_clear_bss_start>:
     27c:	a9 30       	cpi	r26, 0x09	; 9
     27e:	b2 07       	cpc	r27, r18
     280:	e1 f7       	brne	.-8      	; 0x27a <.do_clear_bss_loop>
     282:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <main>
     286:	0c 94 1a 1e 	jmp	0x3c34	; 0x3c34 <_exit>

0000028a <__bad_interrupt>:
     28a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000028e <CCPWrite>:
 *
 *  \param address A pointer to the address to write to.
 *  \param value   The value to put in to the register.
 */
void CCPWrite( volatile uint8_t * address, uint8_t value )
{
     28e:	0f 93       	push	r16
     290:	cf 93       	push	r28
     292:	df 93       	push	r29
     294:	1f 92       	push	r1
     296:	cd b7       	in	r28, 0x3d	; 61
     298:	de b7       	in	r29, 0x3e	; 62

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
     29a:	2f b7       	in	r18, 0x3f	; 63
     29c:	29 83       	std	Y+1, r18	; 0x01
     29e:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
     2a0:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
     2a2:	fc 01       	movw	r30, r24
     2a4:	08 ed       	ldi	r16, 0xD8	; 216
     2a6:	04 bf       	out	0x34, r16	; 52
     2a8:	60 83       	st	Z, r22
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
     2aa:	89 81       	ldd	r24, Y+1	; 0x01
     2ac:	8f bf       	out	0x3f, r24	; 63
#endif
}
     2ae:	0f 90       	pop	r0
     2b0:	df 91       	pop	r29
     2b2:	cf 91       	pop	r28
     2b4:	0f 91       	pop	r16
     2b6:	08 95       	ret

000002b8 <CLKSYS_XOSC_Config>:
 */
void CLKSYS_XOSC_Config( OSC_FRQRANGE_t freqRange,
                         bool lowPower32kHz,
                         OSC_XOSCSEL_t xoscModeSelection )
{
	OSC.XOSCCTRL = (uint8_t) freqRange |
     2b8:	66 23       	and	r22, r22
     2ba:	11 f0       	breq	.+4      	; 0x2c0 <CLKSYS_XOSC_Config+0x8>
     2bc:	90 e2       	ldi	r25, 0x20	; 32
     2be:	01 c0       	rjmp	.+2      	; 0x2c2 <CLKSYS_XOSC_Config+0xa>
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	89 2b       	or	r24, r25
     2c4:	48 2b       	or	r20, r24
     2c6:	40 93 52 00 	sts	0x0052, r20	; 0x800052 <__TEXT_REGION_LENGTH__+0x7de052>
     2ca:	08 95       	ret

000002cc <CLKSYS_PLL_Config>:
 *  \param  factor      PLL multiplication factor, must be
 *                      from 1 to 31, inclusive.
 */
void CLKSYS_PLL_Config( OSC_PLLSRC_t clockSource, uint8_t factor )
{
	factor &= OSC_PLLFAC_gm;
     2cc:	6f 71       	andi	r22, 0x1F	; 31
	OSC.PLLCTRL = (uint8_t) clockSource | ( factor << OSC_PLLFAC_gp );
     2ce:	86 2b       	or	r24, r22
     2d0:	80 93 55 00 	sts	0x0055, r24	; 0x800055 <__TEXT_REGION_LENGTH__+0x7de055>
     2d4:	08 95       	ret

000002d6 <CLKSYS_Disable>:
 *
 *  \return  Non-zero if oscillator was disabled successfully.
 */
uint8_t CLKSYS_Disable( uint8_t oscSel )
{
	OSC.CTRL &= ~oscSel;
     2d6:	e0 e5       	ldi	r30, 0x50	; 80
     2d8:	f0 e0       	ldi	r31, 0x00	; 0
     2da:	90 81       	ld	r25, Z
     2dc:	28 2f       	mov	r18, r24
     2de:	20 95       	com	r18
     2e0:	92 23       	and	r25, r18
     2e2:	90 83       	st	Z, r25
	uint8_t clkEnabled = OSC.CTRL & oscSel;
     2e4:	90 81       	ld	r25, Z
	return clkEnabled;
}
     2e6:	89 23       	and	r24, r25
     2e8:	08 95       	ret

000002ea <CLKSYS_Prescalers_Config>:
 *                      of (1,1), (1,2), (4,1) or (2,2).
 */
void CLKSYS_Prescalers_Config( CLK_PSADIV_t PSAfactor,
                               CLK_PSBCDIV_t PSBCfactor )
{
	uint8_t PSconfig = (uint8_t) PSAfactor | PSBCfactor;
     2ea:	68 2b       	or	r22, r24
	CCPWrite( &CLK.PSCTRL, PSconfig );
     2ec:	81 e4       	ldi	r24, 0x41	; 65
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	0e 94 47 01 	call	0x28e	; 0x28e <CCPWrite>
     2f4:	08 95       	ret

000002f6 <CLKSYS_Main_ClockSource_Select>:
 *                       prescaler block.
 *
 *  \return  Non-zero if change was successful.
 */
uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
{
     2f6:	0f 93       	push	r16
     2f8:	1f 93       	push	r17
     2fa:	cf 93       	push	r28
     2fc:	c8 2f       	mov	r28, r24
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
     2fe:	00 e4       	ldi	r16, 0x40	; 64
     300:	10 e0       	ldi	r17, 0x00	; 0
     302:	f8 01       	movw	r30, r16
     304:	60 81       	ld	r22, Z
     306:	68 7f       	andi	r22, 0xF8	; 248
     308:	68 2b       	or	r22, r24
	CCPWrite( &CLK.CTRL, clkCtrl );
     30a:	80 e4       	ldi	r24, 0x40	; 64
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	0e 94 47 01 	call	0x28e	; 0x28e <CCPWrite>
	clkCtrl = ( CLK.CTRL & clockSource );
     312:	f8 01       	movw	r30, r16
     314:	80 81       	ld	r24, Z
	return clkCtrl;
}
     316:	8c 23       	and	r24, r28
     318:	cf 91       	pop	r28
     31a:	1f 91       	pop	r17
     31c:	0f 91       	pop	r16
     31e:	08 95       	ret

00000320 <TC0_ConfigClockSource>:
{
	/* Make sure only CCxEN bits are set in disableMask. */
	disableMask &= ( TC1_CCAEN_bm | TC1_CCBEN_bm );

	/* Disable channels. */
	tc->CTRLB &= ~disableMask;
     320:	fc 01       	movw	r30, r24
     322:	90 81       	ld	r25, Z
     324:	90 7f       	andi	r25, 0xF0	; 240
     326:	69 2b       	or	r22, r25
     328:	60 83       	st	Z, r22
     32a:	08 95       	ret

0000032c <TC1_ConfigClockSource>:
     32c:	fc 01       	movw	r30, r24
     32e:	90 81       	ld	r25, Z
     330:	90 7f       	andi	r25, 0xF0	; 240
     332:	69 2b       	or	r22, r25
     334:	60 83       	st	Z, r22
     336:	08 95       	ret

00000338 <TC0_ConfigWGM>:
     338:	fc 01       	movw	r30, r24
     33a:	91 81       	ldd	r25, Z+1	; 0x01
     33c:	98 7f       	andi	r25, 0xF8	; 248
     33e:	69 2b       	or	r22, r25
     340:	61 83       	std	Z+1, r22	; 0x01
     342:	08 95       	ret

00000344 <TC1_ConfigWGM>:
     344:	fc 01       	movw	r30, r24
     346:	91 81       	ldd	r25, Z+1	; 0x01
     348:	98 7f       	andi	r25, 0xF8	; 248
     34a:	69 2b       	or	r22, r25
     34c:	61 83       	std	Z+1, r22	; 0x01
     34e:	08 95       	ret

00000350 <TC0_SetOverflowIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New overflow interrupt level.
 */
void TC0_SetOverflowIntLevel( volatile TC0_t * tc, TC_OVFINTLVL_t intLevel )
{
     350:	fc 01       	movw	r30, r24
	tc->INTCTRLA = ( tc->INTCTRLA & ~TC0_OVFINTLVL_gm ) | intLevel;
     352:	96 81       	ldd	r25, Z+6	; 0x06
     354:	9c 7f       	andi	r25, 0xFC	; 252
     356:	69 2b       	or	r22, r25
     358:	66 83       	std	Z+6, r22	; 0x06
     35a:	08 95       	ret

0000035c <software_reset>:
 //----------------------------------------------
 // catch heap overflow
 //
 void vApplicationMallocFailedHook( void )
 {
	 error(ERR_LOW_HEAP_SPACE);
     35c:	00 00       	nop
     35e:	88 ed       	ldi	r24, 0xD8	; 216
     360:	84 bf       	out	0x34, r24	; 52
     362:	81 e0       	ldi	r24, 0x01	; 1
     364:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <__TEXT_REGION_LENGTH__+0x7de079>
     368:	08 95       	ret

0000036a <error>:
     36a:	0e 94 ae 01 	call	0x35c	; 0x35c <software_reset>
     36e:	08 95       	ret

00000370 <vApplicationStackOverflowHook>:
 {
	 /* Just to stop compiler warnings. */
	 (void) pxTask;
	 (void) pcTaskName;

	 error(ERR_STACK_OVERFLOW);
     370:	8b e2       	ldi	r24, 0x2B	; 43
     372:	0e 94 b5 01 	call	0x36a	; 0x36a <error>
     376:	08 95       	ret

00000378 <prvTestWaitCondition>:
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
	( void ) xTaskResumeAll();
}
     378:	0f 93       	push	r16
     37a:	01 11       	cpse	r16, r1
     37c:	0c c0       	rjmp	.+24     	; 0x396 <prvTestWaitCondition+0x1e>
     37e:	dc 01       	movw	r26, r24
     380:	cb 01       	movw	r24, r22
     382:	82 23       	and	r24, r18
     384:	93 23       	and	r25, r19
     386:	a4 23       	and	r26, r20
     388:	b5 23       	and	r27, r21
     38a:	89 2b       	or	r24, r25
     38c:	8a 2b       	or	r24, r26
     38e:	8b 2b       	or	r24, r27
     390:	79 f4       	brne	.+30     	; 0x3b0 <prvTestWaitCondition+0x38>
     392:	80 e0       	ldi	r24, 0x00	; 0
     394:	10 c0       	rjmp	.+32     	; 0x3b6 <prvTestWaitCondition+0x3e>
     396:	dc 01       	movw	r26, r24
     398:	cb 01       	movw	r24, r22
     39a:	82 23       	and	r24, r18
     39c:	93 23       	and	r25, r19
     39e:	a4 23       	and	r26, r20
     3a0:	b5 23       	and	r27, r21
     3a2:	28 17       	cp	r18, r24
     3a4:	39 07       	cpc	r19, r25
     3a6:	4a 07       	cpc	r20, r26
     3a8:	5b 07       	cpc	r21, r27
     3aa:	21 f0       	breq	.+8      	; 0x3b4 <prvTestWaitCondition+0x3c>
     3ac:	80 e0       	ldi	r24, 0x00	; 0
     3ae:	03 c0       	rjmp	.+6      	; 0x3b6 <prvTestWaitCondition+0x3e>
     3b0:	81 e0       	ldi	r24, 0x01	; 1
     3b2:	01 c0       	rjmp	.+2      	; 0x3b6 <prvTestWaitCondition+0x3e>
     3b4:	81 e0       	ldi	r24, 0x01	; 1
     3b6:	0f 91       	pop	r16
     3b8:	08 95       	ret

000003ba <xEventGroupCreate>:
     3ba:	cf 93       	push	r28
     3bc:	df 93       	push	r29
     3be:	80 e1       	ldi	r24, 0x10	; 16
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	0e 94 58 03 	call	0x6b0	; 0x6b0 <pvPortMalloc>
     3c6:	ec 01       	movw	r28, r24
     3c8:	00 97       	sbiw	r24, 0x00	; 0
     3ca:	41 f0       	breq	.+16     	; 0x3dc <xEventGroupCreate+0x22>
     3cc:	fc 01       	movw	r30, r24
     3ce:	11 92       	st	Z+, r1
     3d0:	11 92       	st	Z+, r1
     3d2:	11 92       	st	Z+, r1
     3d4:	11 92       	st	Z+, r1
     3d6:	cf 01       	movw	r24, r30
     3d8:	0e 94 7f 03 	call	0x6fe	; 0x6fe <vListInitialise>
     3dc:	ce 01       	movw	r24, r28
     3de:	df 91       	pop	r29
     3e0:	cf 91       	pop	r28
     3e2:	08 95       	ret

000003e4 <xEventGroupWaitBits>:
     3e4:	2f 92       	push	r2
     3e6:	3f 92       	push	r3
     3e8:	4f 92       	push	r4
     3ea:	5f 92       	push	r5
     3ec:	6f 92       	push	r6
     3ee:	7f 92       	push	r7
     3f0:	8f 92       	push	r8
     3f2:	9f 92       	push	r9
     3f4:	af 92       	push	r10
     3f6:	bf 92       	push	r11
     3f8:	cf 92       	push	r12
     3fa:	df 92       	push	r13
     3fc:	ef 92       	push	r14
     3fe:	ff 92       	push	r15
     400:	0f 93       	push	r16
     402:	1f 93       	push	r17
     404:	cf 93       	push	r28
     406:	df 93       	push	r29
     408:	ec 01       	movw	r28, r24
     40a:	4a 01       	movw	r8, r20
     40c:	5b 01       	movw	r10, r22
     40e:	62 2e       	mov	r6, r18
     410:	70 2e       	mov	r7, r16
     412:	0e 94 12 0b 	call	0x1624	; 0x1624 <vTaskSuspendAll>
     416:	28 80       	ld	r2, Y
     418:	39 80       	ldd	r3, Y+1	; 0x01
     41a:	4a 80       	ldd	r4, Y+2	; 0x02
     41c:	5b 80       	ldd	r5, Y+3	; 0x03
     41e:	a5 01       	movw	r20, r10
     420:	94 01       	movw	r18, r8
     422:	c2 01       	movw	r24, r4
     424:	b1 01       	movw	r22, r2
     426:	0e 94 bc 01 	call	0x378	; 0x378 <prvTestWaitCondition>
     42a:	88 23       	and	r24, r24
     42c:	a1 f0       	breq	.+40     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
     42e:	66 20       	and	r6, r6
     430:	89 f1       	breq	.+98     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
     432:	d5 01       	movw	r26, r10
     434:	c4 01       	movw	r24, r8
     436:	80 95       	com	r24
     438:	90 95       	com	r25
     43a:	a0 95       	com	r26
     43c:	b0 95       	com	r27
     43e:	82 21       	and	r24, r2
     440:	93 21       	and	r25, r3
     442:	a4 21       	and	r26, r4
     444:	b5 21       	and	r27, r5
     446:	88 83       	st	Y, r24
     448:	99 83       	std	Y+1, r25	; 0x01
     44a:	aa 83       	std	Y+2, r26	; 0x02
     44c:	bb 83       	std	Y+3, r27	; 0x03
     44e:	c1 2c       	mov	r12, r1
     450:	d1 2c       	mov	r13, r1
     452:	76 01       	movw	r14, r12
     454:	22 c0       	rjmp	.+68     	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
     456:	c1 14       	cp	r12, r1
     458:	d1 04       	cpc	r13, r1
     45a:	e1 04       	cpc	r14, r1
     45c:	f1 04       	cpc	r15, r1
     45e:	e9 f0       	breq	.+58     	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
     460:	61 10       	cpse	r6, r1
     462:	04 c0       	rjmp	.+8      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
     464:	40 e0       	ldi	r20, 0x00	; 0
     466:	50 e0       	ldi	r21, 0x00	; 0
     468:	ba 01       	movw	r22, r20
     46a:	04 c0       	rjmp	.+8      	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
     46c:	40 e0       	ldi	r20, 0x00	; 0
     46e:	50 e0       	ldi	r21, 0x00	; 0
     470:	60 e0       	ldi	r22, 0x00	; 0
     472:	71 e0       	ldi	r23, 0x01	; 1
     474:	71 10       	cpse	r7, r1
     476:	74 60       	ori	r23, 0x04	; 4
     478:	48 29       	or	r20, r8
     47a:	59 29       	or	r21, r9
     47c:	6a 29       	or	r22, r10
     47e:	7b 29       	or	r23, r11
     480:	97 01       	movw	r18, r14
     482:	86 01       	movw	r16, r12
     484:	ce 01       	movw	r24, r28
     486:	04 96       	adiw	r24, 0x04	; 4
     488:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <vTaskPlaceOnUnorderedEventList>
     48c:	21 2c       	mov	r2, r1
     48e:	31 2c       	mov	r3, r1
     490:	21 01       	movw	r4, r2
     492:	03 c0       	rjmp	.+6      	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
     494:	c1 2c       	mov	r12, r1
     496:	d1 2c       	mov	r13, r1
     498:	76 01       	movw	r14, r12
     49a:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <xTaskResumeAll>
     49e:	cd 28       	or	r12, r13
     4a0:	ce 28       	or	r12, r14
     4a2:	cf 28       	or	r12, r15
     4a4:	89 f1       	breq	.+98     	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
     4a6:	81 11       	cpse	r24, r1
     4a8:	02 c0       	rjmp	.+4      	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
     4aa:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <vPortYield>
     4ae:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <uxTaskResetEventItemValue>
     4b2:	6b 01       	movw	r12, r22
     4b4:	7c 01       	movw	r14, r24
     4b6:	91 fd       	sbrc	r25, 1
     4b8:	24 c0       	rjmp	.+72     	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
     4ba:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     4be:	ff 93       	push	r31
     4c0:	f8 7f       	andi	r31, 0xF8	; 248
     4c2:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     4c6:	c8 80       	ld	r12, Y
     4c8:	d9 80       	ldd	r13, Y+1	; 0x01
     4ca:	ea 80       	ldd	r14, Y+2	; 0x02
     4cc:	fb 80       	ldd	r15, Y+3	; 0x03
     4ce:	07 2d       	mov	r16, r7
     4d0:	a5 01       	movw	r20, r10
     4d2:	94 01       	movw	r18, r8
     4d4:	c7 01       	movw	r24, r14
     4d6:	b6 01       	movw	r22, r12
     4d8:	0e 94 bc 01 	call	0x378	; 0x378 <prvTestWaitCondition>
     4dc:	88 23       	and	r24, r24
     4de:	71 f0       	breq	.+28     	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
     4e0:	66 20       	and	r6, r6
     4e2:	61 f0       	breq	.+24     	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
     4e4:	80 94       	com	r8
     4e6:	90 94       	com	r9
     4e8:	a0 94       	com	r10
     4ea:	b0 94       	com	r11
     4ec:	8c 20       	and	r8, r12
     4ee:	9d 20       	and	r9, r13
     4f0:	ae 20       	and	r10, r14
     4f2:	bf 20       	and	r11, r15
     4f4:	88 82       	st	Y, r8
     4f6:	99 82       	std	Y+1, r9	; 0x01
     4f8:	aa 82       	std	Y+2, r10	; 0x02
     4fa:	bb 82       	std	Y+3, r11	; 0x03
     4fc:	ff 91       	pop	r31
     4fe:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     502:	16 01       	movw	r2, r12
     504:	27 01       	movw	r4, r14
     506:	55 24       	eor	r5, r5
     508:	c2 01       	movw	r24, r4
     50a:	b1 01       	movw	r22, r2
     50c:	df 91       	pop	r29
     50e:	cf 91       	pop	r28
     510:	1f 91       	pop	r17
     512:	0f 91       	pop	r16
     514:	ff 90       	pop	r15
     516:	ef 90       	pop	r14
     518:	df 90       	pop	r13
     51a:	cf 90       	pop	r12
     51c:	bf 90       	pop	r11
     51e:	af 90       	pop	r10
     520:	9f 90       	pop	r9
     522:	8f 90       	pop	r8
     524:	7f 90       	pop	r7
     526:	6f 90       	pop	r6
     528:	5f 90       	pop	r5
     52a:	4f 90       	pop	r4
     52c:	3f 90       	pop	r3
     52e:	2f 90       	pop	r2
     530:	08 95       	ret

00000532 <xEventGroupClearBits>:
     532:	0f 93       	push	r16
     534:	1f 93       	push	r17
     536:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     53a:	ff 93       	push	r31
     53c:	f8 7f       	andi	r31, 0xF8	; 248
     53e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     542:	fc 01       	movw	r30, r24
     544:	00 81       	ld	r16, Z
     546:	11 81       	ldd	r17, Z+1	; 0x01
     548:	22 81       	ldd	r18, Z+2	; 0x02
     54a:	33 81       	ldd	r19, Z+3	; 0x03
     54c:	40 95       	com	r20
     54e:	50 95       	com	r21
     550:	60 95       	com	r22
     552:	70 95       	com	r23
     554:	40 23       	and	r20, r16
     556:	51 23       	and	r21, r17
     558:	62 23       	and	r22, r18
     55a:	73 23       	and	r23, r19
     55c:	40 83       	st	Z, r20
     55e:	51 83       	std	Z+1, r21	; 0x01
     560:	62 83       	std	Z+2, r22	; 0x02
     562:	73 83       	std	Z+3, r23	; 0x03
     564:	ff 91       	pop	r31
     566:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     56a:	c9 01       	movw	r24, r18
     56c:	b8 01       	movw	r22, r16
     56e:	1f 91       	pop	r17
     570:	0f 91       	pop	r16
     572:	08 95       	ret

00000574 <xEventGroupSetBits>:
     574:	4f 92       	push	r4
     576:	5f 92       	push	r5
     578:	6f 92       	push	r6
     57a:	7f 92       	push	r7
     57c:	af 92       	push	r10
     57e:	bf 92       	push	r11
     580:	cf 92       	push	r12
     582:	df 92       	push	r13
     584:	ef 92       	push	r14
     586:	ff 92       	push	r15
     588:	0f 93       	push	r16
     58a:	1f 93       	push	r17
     58c:	cf 93       	push	r28
     58e:	df 93       	push	r29
     590:	ec 01       	movw	r28, r24
     592:	6a 01       	movw	r12, r20
     594:	7b 01       	movw	r14, r22
     596:	8c 01       	movw	r16, r24
     598:	09 5f       	subi	r16, 0xF9	; 249
     59a:	1f 4f       	sbci	r17, 0xFF	; 255
     59c:	0e 94 12 0b 	call	0x1624	; 0x1624 <vTaskSuspendAll>
     5a0:	eb 85       	ldd	r30, Y+11	; 0x0b
     5a2:	fc 85       	ldd	r31, Y+12	; 0x0c
     5a4:	88 81       	ld	r24, Y
     5a6:	99 81       	ldd	r25, Y+1	; 0x01
     5a8:	aa 81       	ldd	r26, Y+2	; 0x02
     5aa:	bb 81       	ldd	r27, Y+3	; 0x03
     5ac:	c8 2a       	or	r12, r24
     5ae:	d9 2a       	or	r13, r25
     5b0:	ea 2a       	or	r14, r26
     5b2:	fb 2a       	or	r15, r27
     5b4:	c8 82       	st	Y, r12
     5b6:	d9 82       	std	Y+1, r13	; 0x01
     5b8:	ea 82       	std	Y+2, r14	; 0x02
     5ba:	fb 82       	std	Y+3, r15	; 0x03
     5bc:	c1 2c       	mov	r12, r1
     5be:	d1 2c       	mov	r13, r1
     5c0:	76 01       	movw	r14, r12
     5c2:	3d c0       	rjmp	.+122    	; 0x63e <xEventGroupSetBits+0xca>
     5c4:	a4 80       	ldd	r10, Z+4	; 0x04
     5c6:	b5 80       	ldd	r11, Z+5	; 0x05
     5c8:	80 81       	ld	r24, Z
     5ca:	91 81       	ldd	r25, Z+1	; 0x01
     5cc:	a2 81       	ldd	r26, Z+2	; 0x02
     5ce:	b3 81       	ldd	r27, Z+3	; 0x03
     5d0:	ac 01       	movw	r20, r24
     5d2:	bd 01       	movw	r22, r26
     5d4:	77 27       	eor	r23, r23
     5d6:	b2 fd       	sbrc	r27, 2
     5d8:	0e c0       	rjmp	.+28     	; 0x5f6 <xEventGroupSetBits+0x82>
     5da:	48 80       	ld	r4, Y
     5dc:	59 80       	ldd	r5, Y+1	; 0x01
     5de:	6a 80       	ldd	r6, Y+2	; 0x02
     5e0:	7b 80       	ldd	r7, Y+3	; 0x03
     5e2:	44 22       	and	r4, r20
     5e4:	55 22       	and	r5, r21
     5e6:	66 22       	and	r6, r22
     5e8:	77 22       	and	r7, r23
     5ea:	45 28       	or	r4, r5
     5ec:	46 28       	or	r4, r6
     5ee:	47 28       	or	r4, r7
     5f0:	89 f4       	brne	.+34     	; 0x614 <xEventGroupSetBits+0xa0>
     5f2:	20 e0       	ldi	r18, 0x00	; 0
     5f4:	12 c0       	rjmp	.+36     	; 0x61a <xEventGroupSetBits+0xa6>
     5f6:	48 80       	ld	r4, Y
     5f8:	59 80       	ldd	r5, Y+1	; 0x01
     5fa:	6a 80       	ldd	r6, Y+2	; 0x02
     5fc:	7b 80       	ldd	r7, Y+3	; 0x03
     5fe:	44 22       	and	r4, r20
     600:	55 22       	and	r5, r21
     602:	66 22       	and	r6, r22
     604:	77 22       	and	r7, r23
     606:	44 15       	cp	r20, r4
     608:	55 05       	cpc	r21, r5
     60a:	66 05       	cpc	r22, r6
     60c:	77 05       	cpc	r23, r7
     60e:	21 f0       	breq	.+8      	; 0x618 <xEventGroupSetBits+0xa4>
     610:	20 e0       	ldi	r18, 0x00	; 0
     612:	03 c0       	rjmp	.+6      	; 0x61a <xEventGroupSetBits+0xa6>
     614:	21 e0       	ldi	r18, 0x01	; 1
     616:	01 c0       	rjmp	.+2      	; 0x61a <xEventGroupSetBits+0xa6>
     618:	21 e0       	ldi	r18, 0x01	; 1
     61a:	22 23       	and	r18, r18
     61c:	71 f0       	breq	.+28     	; 0x63a <xEventGroupSetBits+0xc6>
     61e:	b0 ff       	sbrs	r27, 0
     620:	04 c0       	rjmp	.+8      	; 0x62a <xEventGroupSetBits+0xb6>
     622:	c4 2a       	or	r12, r20
     624:	d5 2a       	or	r13, r21
     626:	e6 2a       	or	r14, r22
     628:	f7 2a       	or	r15, r23
     62a:	48 81       	ld	r20, Y
     62c:	59 81       	ldd	r21, Y+1	; 0x01
     62e:	6a 81       	ldd	r22, Y+2	; 0x02
     630:	7b 81       	ldd	r23, Y+3	; 0x03
     632:	72 60       	ori	r23, 0x02	; 2
     634:	cf 01       	movw	r24, r30
     636:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <vTaskRemoveFromUnorderedEventList>
     63a:	ea 2d       	mov	r30, r10
     63c:	fb 2d       	mov	r31, r11
     63e:	e0 17       	cp	r30, r16
     640:	f1 07       	cpc	r31, r17
     642:	09 f0       	breq	.+2      	; 0x646 <xEventGroupSetBits+0xd2>
     644:	bf cf       	rjmp	.-130    	; 0x5c4 <xEventGroupSetBits+0x50>
     646:	c0 94       	com	r12
     648:	d0 94       	com	r13
     64a:	e0 94       	com	r14
     64c:	f0 94       	com	r15
     64e:	88 81       	ld	r24, Y
     650:	99 81       	ldd	r25, Y+1	; 0x01
     652:	aa 81       	ldd	r26, Y+2	; 0x02
     654:	bb 81       	ldd	r27, Y+3	; 0x03
     656:	c8 22       	and	r12, r24
     658:	d9 22       	and	r13, r25
     65a:	ea 22       	and	r14, r26
     65c:	fb 22       	and	r15, r27
     65e:	c8 82       	st	Y, r12
     660:	d9 82       	std	Y+1, r13	; 0x01
     662:	ea 82       	std	Y+2, r14	; 0x02
     664:	fb 82       	std	Y+3, r15	; 0x03
     666:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <xTaskResumeAll>
     66a:	68 81       	ld	r22, Y
     66c:	79 81       	ldd	r23, Y+1	; 0x01
     66e:	8a 81       	ldd	r24, Y+2	; 0x02
     670:	9b 81       	ldd	r25, Y+3	; 0x03
     672:	df 91       	pop	r29
     674:	cf 91       	pop	r28
     676:	1f 91       	pop	r17
     678:	0f 91       	pop	r16
     67a:	ff 90       	pop	r15
     67c:	ef 90       	pop	r14
     67e:	df 90       	pop	r13
     680:	cf 90       	pop	r12
     682:	bf 90       	pop	r11
     684:	af 90       	pop	r10
     686:	7f 90       	pop	r7
     688:	6f 90       	pop	r6
     68a:	5f 90       	pop	r5
     68c:	4f 90       	pop	r4
     68e:	08 95       	ret

00000690 <vEventGroupSetBitsCallback>:
     690:	0e 94 ba 02 	call	0x574	; 0x574 <xEventGroupSetBits>
     694:	08 95       	ret

00000696 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
     696:	0f 93       	push	r16
     698:	1f 93       	push	r17
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
     69a:	89 01       	movw	r16, r18
     69c:	9a 01       	movw	r18, r20
     69e:	ab 01       	movw	r20, r22
     6a0:	bc 01       	movw	r22, r24
     6a2:	88 e4       	ldi	r24, 0x48	; 72
     6a4:	93 e0       	ldi	r25, 0x03	; 3
     6a6:	0e 94 9b 11 	call	0x2336	; 0x2336 <xTimerPendFunctionCallFromISR>

		return xReturn;
	}
     6aa:	1f 91       	pop	r17
     6ac:	0f 91       	pop	r16
     6ae:	08 95       	ret

000006b0 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     6b0:	cf 93       	push	r28
     6b2:	df 93       	push	r29
     6b4:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
     6b6:	0e 94 12 0b 	call	0x1624	; 0x1624 <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
     6ba:	20 91 54 21 	lds	r18, 0x2154	; 0x802154 <__data_end>
     6be:	30 91 55 21 	lds	r19, 0x2155	; 0x802155 <__data_end+0x1>
     6c2:	c9 01       	movw	r24, r18
     6c4:	8c 0f       	add	r24, r28
     6c6:	9d 1f       	adc	r25, r29
     6c8:	88 38       	cpi	r24, 0x88	; 136
     6ca:	43 e1       	ldi	r20, 0x13	; 19
     6cc:	94 07       	cpc	r25, r20
     6ce:	58 f4       	brcc	.+22     	; 0x6e6 <pvPortMalloc+0x36>
     6d0:	28 17       	cp	r18, r24
     6d2:	39 07       	cpc	r19, r25
     6d4:	58 f4       	brcc	.+22     	; 0x6ec <pvPortMalloc+0x3c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
     6d6:	e9 01       	movw	r28, r18
     6d8:	ca 5a       	subi	r28, 0xAA	; 170
     6da:	de 4d       	sbci	r29, 0xDE	; 222
			xNextFreeByte += xWantedSize;			
     6dc:	80 93 54 21 	sts	0x2154, r24	; 0x802154 <__data_end>
     6e0:	90 93 55 21 	sts	0x2155, r25	; 0x802155 <__data_end+0x1>
     6e4:	05 c0       	rjmp	.+10     	; 0x6f0 <pvPortMalloc+0x40>
static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL; 
     6e6:	c0 e0       	ldi	r28, 0x00	; 0
     6e8:	d0 e0       	ldi	r29, 0x00	; 0
     6ea:	02 c0       	rjmp	.+4      	; 0x6f0 <pvPortMalloc+0x40>
     6ec:	c0 e0       	ldi	r28, 0x00	; 0
     6ee:	d0 e0       	ldi	r29, 0x00	; 0
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
			xNextFreeByte += xWantedSize;			
		}	
	}
	xTaskResumeAll();
     6f0:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <xTaskResumeAll>
		}
	}
	#endif	

	return pvReturn;
}
     6f4:	ce 01       	movw	r24, r28
     6f6:	df 91       	pop	r29
     6f8:	cf 91       	pop	r28
     6fa:	08 95       	ret

000006fc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     6fc:	08 95       	ret

000006fe <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     6fe:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     700:	03 96       	adiw	r24, 0x03	; 3
     702:	81 83       	std	Z+1, r24	; 0x01
     704:	92 83       	std	Z+2, r25	; 0x02

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     706:	4f ef       	ldi	r20, 0xFF	; 255
     708:	5f ef       	ldi	r21, 0xFF	; 255
     70a:	ba 01       	movw	r22, r20
     70c:	43 83       	std	Z+3, r20	; 0x03
     70e:	54 83       	std	Z+4, r21	; 0x04
     710:	65 83       	std	Z+5, r22	; 0x05
     712:	76 83       	std	Z+6, r23	; 0x06

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     714:	87 83       	std	Z+7, r24	; 0x07
     716:	90 87       	std	Z+8, r25	; 0x08
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     718:	81 87       	std	Z+9, r24	; 0x09
     71a:	92 87       	std	Z+10, r25	; 0x0a

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     71c:	10 82       	st	Z, r1
     71e:	08 95       	ret

00000720 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     720:	fc 01       	movw	r30, r24
     722:	12 86       	std	Z+10, r1	; 0x0a
     724:	13 86       	std	Z+11, r1	; 0x0b
     726:	08 95       	ret

00000728 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     728:	cf 93       	push	r28
     72a:	df 93       	push	r29
     72c:	9c 01       	movw	r18, r24
     72e:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     730:	dc 01       	movw	r26, r24
     732:	11 96       	adiw	r26, 0x01	; 1
     734:	cd 91       	ld	r28, X+
     736:	dc 91       	ld	r29, X
     738:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     73a:	c4 83       	std	Z+4, r28	; 0x04
     73c:	d5 83       	std	Z+5, r29	; 0x05
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     73e:	8e 81       	ldd	r24, Y+6	; 0x06
     740:	9f 81       	ldd	r25, Y+7	; 0x07
     742:	86 83       	std	Z+6, r24	; 0x06
     744:	97 83       	std	Z+7, r25	; 0x07

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     746:	8e 81       	ldd	r24, Y+6	; 0x06
     748:	9f 81       	ldd	r25, Y+7	; 0x07
     74a:	dc 01       	movw	r26, r24
     74c:	14 96       	adiw	r26, 0x04	; 4
     74e:	6d 93       	st	X+, r22
     750:	7c 93       	st	X, r23
     752:	15 97       	sbiw	r26, 0x05	; 5
	pxIndex->pxPrevious = pxNewListItem;
     754:	6e 83       	std	Y+6, r22	; 0x06
     756:	7f 83       	std	Y+7, r23	; 0x07

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     758:	22 87       	std	Z+10, r18	; 0x0a
     75a:	33 87       	std	Z+11, r19	; 0x0b

	( pxList->uxNumberOfItems )++;
     75c:	f9 01       	movw	r30, r18
     75e:	80 81       	ld	r24, Z
     760:	8f 5f       	subi	r24, 0xFF	; 255
     762:	80 83       	st	Z, r24
}
     764:	df 91       	pop	r29
     766:	cf 91       	pop	r28
     768:	08 95       	ret

0000076a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     76a:	0f 93       	push	r16
     76c:	1f 93       	push	r17
     76e:	cf 93       	push	r28
     770:	df 93       	push	r29
     772:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     774:	08 81       	ld	r16, Y
     776:	19 81       	ldd	r17, Y+1	; 0x01
     778:	2a 81       	ldd	r18, Y+2	; 0x02
     77a:	3b 81       	ldd	r19, Y+3	; 0x03
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     77c:	0f 3f       	cpi	r16, 0xFF	; 255
     77e:	4f ef       	ldi	r20, 0xFF	; 255
     780:	14 07       	cpc	r17, r20
     782:	24 07       	cpc	r18, r20
     784:	34 07       	cpc	r19, r20
     786:	21 f4       	brne	.+8      	; 0x790 <vListInsert+0x26>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     788:	fc 01       	movw	r30, r24
     78a:	a1 85       	ldd	r26, Z+9	; 0x09
     78c:	b2 85       	ldd	r27, Z+10	; 0x0a
     78e:	11 c0       	rjmp	.+34     	; 0x7b2 <vListInsert+0x48>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     790:	dc 01       	movw	r26, r24
     792:	13 96       	adiw	r26, 0x03	; 3
     794:	01 c0       	rjmp	.+2      	; 0x798 <vListInsert+0x2e>
     796:	df 01       	movw	r26, r30
     798:	14 96       	adiw	r26, 0x04	; 4
     79a:	ed 91       	ld	r30, X+
     79c:	fc 91       	ld	r31, X
     79e:	15 97       	sbiw	r26, 0x05	; 5
     7a0:	40 81       	ld	r20, Z
     7a2:	51 81       	ldd	r21, Z+1	; 0x01
     7a4:	62 81       	ldd	r22, Z+2	; 0x02
     7a6:	73 81       	ldd	r23, Z+3	; 0x03
     7a8:	04 17       	cp	r16, r20
     7aa:	15 07       	cpc	r17, r21
     7ac:	26 07       	cpc	r18, r22
     7ae:	37 07       	cpc	r19, r23
     7b0:	90 f7       	brcc	.-28     	; 0x796 <vListInsert+0x2c>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     7b2:	14 96       	adiw	r26, 0x04	; 4
     7b4:	ed 91       	ld	r30, X+
     7b6:	fc 91       	ld	r31, X
     7b8:	15 97       	sbiw	r26, 0x05	; 5
     7ba:	ec 83       	std	Y+4, r30	; 0x04
     7bc:	fd 83       	std	Y+5, r31	; 0x05
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     7be:	c6 83       	std	Z+6, r28	; 0x06
     7c0:	d7 83       	std	Z+7, r29	; 0x07
	pxNewListItem->pxPrevious = pxIterator;
     7c2:	ae 83       	std	Y+6, r26	; 0x06
     7c4:	bf 83       	std	Y+7, r27	; 0x07
	pxIterator->pxNext = pxNewListItem;
     7c6:	14 96       	adiw	r26, 0x04	; 4
     7c8:	cd 93       	st	X+, r28
     7ca:	dc 93       	st	X, r29
     7cc:	15 97       	sbiw	r26, 0x05	; 5

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     7ce:	8a 87       	std	Y+10, r24	; 0x0a
     7d0:	9b 87       	std	Y+11, r25	; 0x0b

	( pxList->uxNumberOfItems )++;
     7d2:	fc 01       	movw	r30, r24
     7d4:	20 81       	ld	r18, Z
     7d6:	2f 5f       	subi	r18, 0xFF	; 255
     7d8:	20 83       	st	Z, r18
}
     7da:	df 91       	pop	r29
     7dc:	cf 91       	pop	r28
     7de:	1f 91       	pop	r17
     7e0:	0f 91       	pop	r16
     7e2:	08 95       	ret

000007e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     7e4:	cf 93       	push	r28
     7e6:	df 93       	push	r29
     7e8:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     7ea:	a2 85       	ldd	r26, Z+10	; 0x0a
     7ec:	b3 85       	ldd	r27, Z+11	; 0x0b

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     7ee:	c4 81       	ldd	r28, Z+4	; 0x04
     7f0:	d5 81       	ldd	r29, Z+5	; 0x05
     7f2:	86 81       	ldd	r24, Z+6	; 0x06
     7f4:	97 81       	ldd	r25, Z+7	; 0x07
     7f6:	8e 83       	std	Y+6, r24	; 0x06
     7f8:	9f 83       	std	Y+7, r25	; 0x07
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     7fa:	c6 81       	ldd	r28, Z+6	; 0x06
     7fc:	d7 81       	ldd	r29, Z+7	; 0x07
     7fe:	84 81       	ldd	r24, Z+4	; 0x04
     800:	95 81       	ldd	r25, Z+5	; 0x05
     802:	8c 83       	std	Y+4, r24	; 0x04
     804:	9d 83       	std	Y+5, r25	; 0x05

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     806:	11 96       	adiw	r26, 0x01	; 1
     808:	8d 91       	ld	r24, X+
     80a:	9c 91       	ld	r25, X
     80c:	12 97       	sbiw	r26, 0x02	; 2
     80e:	e8 17       	cp	r30, r24
     810:	f9 07       	cpc	r31, r25
     812:	31 f4       	brne	.+12     	; 0x820 <__EEPROM_REGION_LENGTH__+0x20>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     814:	86 81       	ldd	r24, Z+6	; 0x06
     816:	97 81       	ldd	r25, Z+7	; 0x07
     818:	11 96       	adiw	r26, 0x01	; 1
     81a:	8d 93       	st	X+, r24
     81c:	9c 93       	st	X, r25
     81e:	12 97       	sbiw	r26, 0x02	; 2
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     820:	12 86       	std	Z+10, r1	; 0x0a
     822:	13 86       	std	Z+11, r1	; 0x0b
	( pxList->uxNumberOfItems )--;
     824:	8c 91       	ld	r24, X
     826:	81 50       	subi	r24, 0x01	; 1
     828:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
     82a:	8c 91       	ld	r24, X
}
     82c:	df 91       	pop	r29
     82e:	cf 91       	pop	r28
     830:	08 95       	ret

00000832 <prvSetupTimerInterrupt>:
}

/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     832:	83 ef       	ldi	r24, 0xF3	; 243
     834:	91 e0       	ldi	r25, 0x01	; 1
     836:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__TEXT_REGION_LENGTH__+0x7de826>
     83a:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <__TEXT_REGION_LENGTH__+0x7de827>
     83e:	65 e0       	ldi	r22, 0x05	; 5
     840:	80 e0       	ldi	r24, 0x00	; 0
     842:	98 e0       	ldi	r25, 0x08	; 8
     844:	0e 94 90 01 	call	0x320	; 0x320 <TC0_ConfigClockSource>
     848:	61 e0       	ldi	r22, 0x01	; 1
     84a:	80 e0       	ldi	r24, 0x00	; 0
     84c:	98 e0       	ldi	r25, 0x08	; 8
     84e:	0e 94 a8 01 	call	0x350	; 0x350 <TC0_SetOverflowIntLevel>
     852:	08 95       	ret

00000854 <_portSetInterruptMaskFromIsr>:
     854:	e0 ea       	ldi	r30, 0xA0	; 160
     856:	f0 e0       	ldi	r31, 0x00	; 0
     858:	82 81       	ldd	r24, Z+2	; 0x02
     85a:	92 81       	ldd	r25, Z+2	; 0x02
     85c:	98 7f       	andi	r25, 0xF8	; 248
     85e:	92 83       	std	Z+2, r25	; 0x02
     860:	08 95       	ret

00000862 <portTaskIncrementTick>:
     862:	cf 93       	push	r28
     864:	0e 94 2a 04 	call	0x854	; 0x854 <_portSetInterruptMaskFromIsr>
     868:	c8 2f       	mov	r28, r24
     86a:	0e 94 2a 0b 	call	0x1654	; 0x1654 <xTaskIncrementTick>
     86e:	c0 93 a2 00 	sts	0x00A2, r28	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     872:	cf 91       	pop	r28
     874:	08 95       	ret

00000876 <pxPortInitialiseStack>:
     876:	cf 92       	push	r12
     878:	df 92       	push	r13
     87a:	ef 92       	push	r14
     87c:	ff 92       	push	r15
     87e:	31 e1       	ldi	r19, 0x11	; 17
     880:	fc 01       	movw	r30, r24
     882:	30 83       	st	Z, r19
     884:	31 97       	sbiw	r30, 0x01	; 1
     886:	22 e2       	ldi	r18, 0x22	; 34
     888:	20 83       	st	Z, r18
     88a:	31 97       	sbiw	r30, 0x01	; 1
     88c:	a3 e3       	ldi	r26, 0x33	; 51
     88e:	a0 83       	st	Z, r26
     890:	6b 01       	movw	r12, r22
     892:	e1 2c       	mov	r14, r1
     894:	f1 2c       	mov	r15, r1
     896:	31 97       	sbiw	r30, 0x01	; 1
     898:	60 83       	st	Z, r22
     89a:	31 97       	sbiw	r30, 0x01	; 1
     89c:	d0 82       	st	Z, r13
     89e:	31 97       	sbiw	r30, 0x01	; 1
     8a0:	e0 82       	st	Z, r14
     8a2:	31 97       	sbiw	r30, 0x01	; 1
     8a4:	61 e3       	ldi	r22, 0x31	; 49
     8a6:	60 83       	st	Z, r22
     8a8:	31 97       	sbiw	r30, 0x01	; 1
     8aa:	60 e8       	ldi	r22, 0x80	; 128
     8ac:	60 83       	st	Z, r22
     8ae:	31 97       	sbiw	r30, 0x01	; 1
     8b0:	67 e8       	ldi	r22, 0x87	; 135
     8b2:	60 83       	st	Z, r22
     8b4:	31 97       	sbiw	r30, 0x01	; 1
     8b6:	10 82       	st	Z, r1
     8b8:	31 97       	sbiw	r30, 0x01	; 1
     8ba:	10 82       	st	Z, r1
     8bc:	31 97       	sbiw	r30, 0x01	; 1
     8be:	62 e0       	ldi	r22, 0x02	; 2
     8c0:	60 83       	st	Z, r22
     8c2:	31 97       	sbiw	r30, 0x01	; 1
     8c4:	63 e0       	ldi	r22, 0x03	; 3
     8c6:	60 83       	st	Z, r22
     8c8:	31 97       	sbiw	r30, 0x01	; 1
     8ca:	64 e0       	ldi	r22, 0x04	; 4
     8cc:	60 83       	st	Z, r22
     8ce:	31 97       	sbiw	r30, 0x01	; 1
     8d0:	65 e0       	ldi	r22, 0x05	; 5
     8d2:	60 83       	st	Z, r22
     8d4:	31 97       	sbiw	r30, 0x01	; 1
     8d6:	66 e0       	ldi	r22, 0x06	; 6
     8d8:	60 83       	st	Z, r22
     8da:	31 97       	sbiw	r30, 0x01	; 1
     8dc:	67 e0       	ldi	r22, 0x07	; 7
     8de:	60 83       	st	Z, r22
     8e0:	31 97       	sbiw	r30, 0x01	; 1
     8e2:	68 e0       	ldi	r22, 0x08	; 8
     8e4:	60 83       	st	Z, r22
     8e6:	31 97       	sbiw	r30, 0x01	; 1
     8e8:	69 e0       	ldi	r22, 0x09	; 9
     8ea:	60 83       	st	Z, r22
     8ec:	31 97       	sbiw	r30, 0x01	; 1
     8ee:	60 e1       	ldi	r22, 0x10	; 16
     8f0:	60 83       	st	Z, r22
     8f2:	31 97       	sbiw	r30, 0x01	; 1
     8f4:	30 83       	st	Z, r19
     8f6:	31 97       	sbiw	r30, 0x01	; 1
     8f8:	32 e1       	ldi	r19, 0x12	; 18
     8fa:	30 83       	st	Z, r19
     8fc:	31 97       	sbiw	r30, 0x01	; 1
     8fe:	33 e1       	ldi	r19, 0x13	; 19
     900:	30 83       	st	Z, r19
     902:	31 97       	sbiw	r30, 0x01	; 1
     904:	34 e1       	ldi	r19, 0x14	; 20
     906:	30 83       	st	Z, r19
     908:	31 97       	sbiw	r30, 0x01	; 1
     90a:	35 e1       	ldi	r19, 0x15	; 21
     90c:	30 83       	st	Z, r19
     90e:	31 97       	sbiw	r30, 0x01	; 1
     910:	36 e1       	ldi	r19, 0x16	; 22
     912:	30 83       	st	Z, r19
     914:	31 97       	sbiw	r30, 0x01	; 1
     916:	37 e1       	ldi	r19, 0x17	; 23
     918:	30 83       	st	Z, r19
     91a:	31 97       	sbiw	r30, 0x01	; 1
     91c:	38 e1       	ldi	r19, 0x18	; 24
     91e:	30 83       	st	Z, r19
     920:	31 97       	sbiw	r30, 0x01	; 1
     922:	39 e1       	ldi	r19, 0x19	; 25
     924:	30 83       	st	Z, r19
     926:	31 97       	sbiw	r30, 0x01	; 1
     928:	30 e2       	ldi	r19, 0x20	; 32
     92a:	30 83       	st	Z, r19
     92c:	31 97       	sbiw	r30, 0x01	; 1
     92e:	31 e2       	ldi	r19, 0x21	; 33
     930:	30 83       	st	Z, r19
     932:	31 97       	sbiw	r30, 0x01	; 1
     934:	20 83       	st	Z, r18
     936:	31 97       	sbiw	r30, 0x01	; 1
     938:	23 e2       	ldi	r18, 0x23	; 35
     93a:	20 83       	st	Z, r18
     93c:	6a 01       	movw	r12, r20
     93e:	31 97       	sbiw	r30, 0x01	; 1
     940:	40 83       	st	Z, r20
     942:	31 97       	sbiw	r30, 0x01	; 1
     944:	d0 82       	st	Z, r13
     946:	31 97       	sbiw	r30, 0x01	; 1
     948:	26 e2       	ldi	r18, 0x26	; 38
     94a:	20 83       	st	Z, r18
     94c:	31 97       	sbiw	r30, 0x01	; 1
     94e:	27 e2       	ldi	r18, 0x27	; 39
     950:	20 83       	st	Z, r18
     952:	31 97       	sbiw	r30, 0x01	; 1
     954:	28 e2       	ldi	r18, 0x28	; 40
     956:	20 83       	st	Z, r18
     958:	31 97       	sbiw	r30, 0x01	; 1
     95a:	29 e2       	ldi	r18, 0x29	; 41
     95c:	20 83       	st	Z, r18
     95e:	31 97       	sbiw	r30, 0x01	; 1
     960:	20 e3       	ldi	r18, 0x30	; 48
     962:	20 83       	st	Z, r18
     964:	88 97       	sbiw	r24, 0x28	; 40
     966:	ff 90       	pop	r15
     968:	ef 90       	pop	r14
     96a:	df 90       	pop	r13
     96c:	cf 90       	pop	r12
     96e:	08 95       	ret

00000970 <xPortStartScheduler>:
     970:	0e 94 19 04 	call	0x832	; 0x832 <prvSetupTimerInterrupt>
     974:	a0 91 4c 35 	lds	r26, 0x354C	; 0x80354c <pxCurrentTCB>
     978:	b0 91 4d 35 	lds	r27, 0x354D	; 0x80354d <pxCurrentTCB+0x1>
     97c:	0d 90       	ld	r0, X+
     97e:	0d be       	out	0x3d, r0	; 61
     980:	0d 90       	ld	r0, X+
     982:	0e be       	out	0x3e, r0	; 62
     984:	ef 91       	pop	r30
     986:	df 91       	pop	r29
     988:	cf 91       	pop	r28
     98a:	bf 91       	pop	r27
     98c:	af 91       	pop	r26
     98e:	9f 91       	pop	r25
     990:	8f 91       	pop	r24
     992:	7f 91       	pop	r23
     994:	6f 91       	pop	r22
     996:	5f 91       	pop	r21
     998:	4f 91       	pop	r20
     99a:	3f 91       	pop	r19
     99c:	2f 91       	pop	r18
     99e:	1f 91       	pop	r17
     9a0:	0f 91       	pop	r16
     9a2:	ff 90       	pop	r15
     9a4:	ef 90       	pop	r14
     9a6:	df 90       	pop	r13
     9a8:	cf 90       	pop	r12
     9aa:	bf 90       	pop	r11
     9ac:	af 90       	pop	r10
     9ae:	9f 90       	pop	r9
     9b0:	8f 90       	pop	r8
     9b2:	7f 90       	pop	r7
     9b4:	6f 90       	pop	r6
     9b6:	5f 90       	pop	r5
     9b8:	4f 90       	pop	r4
     9ba:	3f 90       	pop	r3
     9bc:	2f 90       	pop	r2
     9be:	1f 90       	pop	r1
     9c0:	0f 90       	pop	r0
     9c2:	ff 91       	pop	r31
     9c4:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     9c8:	ff 91       	pop	r31
     9ca:	ff bf       	out	0x3f, r31	; 63
     9cc:	ff 91       	pop	r31
     9ce:	08 95       	ret
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	08 95       	ret

000009d4 <vPortYield>:
// 
//
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     9d4:	ff 93       	push	r31
     9d6:	ff b7       	in	r31, 0x3f	; 63
     9d8:	ff 93       	push	r31
     9da:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     9de:	ff 93       	push	r31
     9e0:	f8 7f       	andi	r31, 0xF8	; 248
     9e2:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     9e6:	0f 92       	push	r0
     9e8:	1f 92       	push	r1
     9ea:	11 24       	eor	r1, r1
     9ec:	2f 92       	push	r2
     9ee:	3f 92       	push	r3
     9f0:	4f 92       	push	r4
     9f2:	5f 92       	push	r5
     9f4:	6f 92       	push	r6
     9f6:	7f 92       	push	r7
     9f8:	8f 92       	push	r8
     9fa:	9f 92       	push	r9
     9fc:	af 92       	push	r10
     9fe:	bf 92       	push	r11
     a00:	cf 92       	push	r12
     a02:	df 92       	push	r13
     a04:	ef 92       	push	r14
     a06:	ff 92       	push	r15
     a08:	0f 93       	push	r16
     a0a:	1f 93       	push	r17
     a0c:	2f 93       	push	r18
     a0e:	3f 93       	push	r19
     a10:	4f 93       	push	r20
     a12:	5f 93       	push	r21
     a14:	6f 93       	push	r22
     a16:	7f 93       	push	r23
     a18:	8f 93       	push	r24
     a1a:	9f 93       	push	r25
     a1c:	af 93       	push	r26
     a1e:	bf 93       	push	r27
     a20:	cf 93       	push	r28
     a22:	df 93       	push	r29
     a24:	ef 93       	push	r30
     a26:	a0 91 4c 35 	lds	r26, 0x354C	; 0x80354c <pxCurrentTCB>
     a2a:	b0 91 4d 35 	lds	r27, 0x354D	; 0x80354d <pxCurrentTCB+0x1>
     a2e:	0d b6       	in	r0, 0x3d	; 61
     a30:	0d 92       	st	X+, r0
     a32:	0e b6       	in	r0, 0x3e	; 62
     a34:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     a36:	0e 94 88 0c 	call	0x1910	; 0x1910 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     a3a:	a0 91 4c 35 	lds	r26, 0x354C	; 0x80354c <pxCurrentTCB>
     a3e:	b0 91 4d 35 	lds	r27, 0x354D	; 0x80354d <pxCurrentTCB+0x1>
     a42:	0d 90       	ld	r0, X+
     a44:	0d be       	out	0x3d, r0	; 61
     a46:	0d 90       	ld	r0, X+
     a48:	0e be       	out	0x3e, r0	; 62
     a4a:	ef 91       	pop	r30
     a4c:	df 91       	pop	r29
     a4e:	cf 91       	pop	r28
     a50:	bf 91       	pop	r27
     a52:	af 91       	pop	r26
     a54:	9f 91       	pop	r25
     a56:	8f 91       	pop	r24
     a58:	7f 91       	pop	r23
     a5a:	6f 91       	pop	r22
     a5c:	5f 91       	pop	r21
     a5e:	4f 91       	pop	r20
     a60:	3f 91       	pop	r19
     a62:	2f 91       	pop	r18
     a64:	1f 91       	pop	r17
     a66:	0f 91       	pop	r16
     a68:	ff 90       	pop	r15
     a6a:	ef 90       	pop	r14
     a6c:	df 90       	pop	r13
     a6e:	cf 90       	pop	r12
     a70:	bf 90       	pop	r11
     a72:	af 90       	pop	r10
     a74:	9f 90       	pop	r9
     a76:	8f 90       	pop	r8
     a78:	7f 90       	pop	r7
     a7a:	6f 90       	pop	r6
     a7c:	5f 90       	pop	r5
     a7e:	4f 90       	pop	r4
     a80:	3f 90       	pop	r3
     a82:	2f 90       	pop	r2
     a84:	1f 90       	pop	r1
     a86:	0f 90       	pop	r0
     a88:	ff 91       	pop	r31
     a8a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     a8e:	ff 91       	pop	r31
     a90:	ff bf       	out	0x3f, r31	; 63
     a92:	ff 91       	pop	r31
	asm volatile ( "ret" );
     a94:	08 95       	ret

00000a96 <portTaskSwitchContext>:
	//-----------------------------------------------------------
	//
	// The task switch is deferred until there is no more nesting.
	//
	void portTaskSwitchContext(signed portBASE_TYPE xSwitchRequired)
	{
     a96:	cf 93       	push	r28
		intTaskSwitchPending |= xSwitchRequired;					
     a98:	90 91 1a 36 	lds	r25, 0x361A	; 0x80361a <intTaskSwitchPending>
     a9c:	89 2b       	or	r24, r25
     a9e:	80 93 1a 36 	sts	0x361A, r24	; 0x80361a <intTaskSwitchPending>
																
		if(NOT_NESTING() && intTaskSwitchPending)					
     aa2:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7de0a0>
     aa6:	91 30       	cpi	r25, 0x01	; 1
     aa8:	41 f0       	breq	.+16     	; 0xaba <portTaskSwitchContext+0x24>
     aaa:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7de0a0>
     aae:	92 30       	cpi	r25, 0x02	; 2
     ab0:	21 f0       	breq	.+8      	; 0xaba <portTaskSwitchContext+0x24>
     ab2:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7de0a0>
     ab6:	94 30       	cpi	r25, 0x04	; 4
     ab8:	59 f4       	brne	.+22     	; 0xad0 <portTaskSwitchContext+0x3a>
     aba:	88 23       	and	r24, r24
     abc:	49 f0       	breq	.+18     	; 0xad0 <portTaskSwitchContext+0x3a>
		{															
			register unsigned portBASE_TYPE uxSavedPmicCtrlReg; 				
			extern void vTaskSwitchContext(void);   				
																
			// Critical section used, because vTaskSwitchContext handles FreeRTOS internal data structures.
 			uxSavedPmicCtrlReg = portSET_INTERRUPT_MASK_FROM_ISR(); 
     abe:	0e 94 2a 04 	call	0x854	; 0x854 <_portSetInterruptMaskFromIsr>
     ac2:	c8 2f       	mov	r28, r24
			intTaskSwitchPending = 0;								
     ac4:	10 92 1a 36 	sts	0x361A, r1	; 0x80361a <intTaskSwitchPending>
			vTaskSwitchContext();                   				
     ac8:	0e 94 88 0c 	call	0x1910	; 0x1910 <vTaskSwitchContext>
			portCLEAR_INTERRUPT_MASK_FROM_ISR(uxSavedPmicCtrlReg);
     acc:	c0 93 a2 00 	sts	0x00A2, r28	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
		}                                          					
	}
     ad0:	cf 91       	pop	r28
     ad2:	08 95       	ret

00000ad4 <__vector_14>:
	// the context is saved at the start of vPortYieldFromTick().  The tick
	// count is incremented after the context is saved.
	//
	ISR(TCC0_OVF_vect, ISR_NAKED)
	{
		portSTART_ISR();
     ad4:	ff 93       	push	r31
     ad6:	ff b7       	in	r31, 0x3f	; 63
     ad8:	ff 93       	push	r31
     ada:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     ade:	ff 93       	push	r31
     ae0:	f8 7f       	andi	r31, 0xF8	; 248
     ae2:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     ae6:	0f 92       	push	r0
     ae8:	1f 92       	push	r1
     aea:	11 24       	eor	r1, r1
     aec:	2f 92       	push	r2
     aee:	3f 92       	push	r3
     af0:	4f 92       	push	r4
     af2:	5f 92       	push	r5
     af4:	6f 92       	push	r6
     af6:	7f 92       	push	r7
     af8:	8f 92       	push	r8
     afa:	9f 92       	push	r9
     afc:	af 92       	push	r10
     afe:	bf 92       	push	r11
     b00:	cf 92       	push	r12
     b02:	df 92       	push	r13
     b04:	ef 92       	push	r14
     b06:	ff 92       	push	r15
     b08:	0f 93       	push	r16
     b0a:	1f 93       	push	r17
     b0c:	2f 93       	push	r18
     b0e:	3f 93       	push	r19
     b10:	4f 93       	push	r20
     b12:	5f 93       	push	r21
     b14:	6f 93       	push	r22
     b16:	7f 93       	push	r23
     b18:	8f 93       	push	r24
     b1a:	9f 93       	push	r25
     b1c:	af 93       	push	r26
     b1e:	bf 93       	push	r27
     b20:	cf 93       	push	r28
     b22:	df 93       	push	r29
     b24:	ef 93       	push	r30
     b26:	a0 91 4c 35 	lds	r26, 0x354C	; 0x80354c <pxCurrentTCB>
     b2a:	b0 91 4d 35 	lds	r27, 0x354D	; 0x80354d <pxCurrentTCB+0x1>
     b2e:	0d b6       	in	r0, 0x3d	; 61
     b30:	0d 92       	st	X+, r0
     b32:	0e b6       	in	r0, 0x3e	; 62
     b34:	0d 92       	st	X+, r0
		portTaskIncrementTick();
     b36:	0e 94 31 04 	call	0x862	; 0x862 <portTaskIncrementTick>
		//always try a task switch, but only if on kernel interrupt level
		portEND_SWITCHING_ISR(pdTRUE); 
     b3a:	81 e0       	ldi	r24, 0x01	; 1
     b3c:	0e 94 4b 05 	call	0xa96	; 0xa96 <portTaskSwitchContext>
     b40:	a0 91 4c 35 	lds	r26, 0x354C	; 0x80354c <pxCurrentTCB>
     b44:	b0 91 4d 35 	lds	r27, 0x354D	; 0x80354d <pxCurrentTCB+0x1>
     b48:	0d 90       	ld	r0, X+
     b4a:	0d be       	out	0x3d, r0	; 61
     b4c:	0d 90       	ld	r0, X+
     b4e:	0e be       	out	0x3e, r0	; 62
     b50:	ef 91       	pop	r30
     b52:	df 91       	pop	r29
     b54:	cf 91       	pop	r28
     b56:	bf 91       	pop	r27
     b58:	af 91       	pop	r26
     b5a:	9f 91       	pop	r25
     b5c:	8f 91       	pop	r24
     b5e:	7f 91       	pop	r23
     b60:	6f 91       	pop	r22
     b62:	5f 91       	pop	r21
     b64:	4f 91       	pop	r20
     b66:	3f 91       	pop	r19
     b68:	2f 91       	pop	r18
     b6a:	1f 91       	pop	r17
     b6c:	0f 91       	pop	r16
     b6e:	ff 90       	pop	r15
     b70:	ef 90       	pop	r14
     b72:	df 90       	pop	r13
     b74:	cf 90       	pop	r12
     b76:	bf 90       	pop	r11
     b78:	af 90       	pop	r10
     b7a:	9f 90       	pop	r9
     b7c:	8f 90       	pop	r8
     b7e:	7f 90       	pop	r7
     b80:	6f 90       	pop	r6
     b82:	5f 90       	pop	r5
     b84:	4f 90       	pop	r4
     b86:	3f 90       	pop	r3
     b88:	2f 90       	pop	r2
     b8a:	1f 90       	pop	r1
     b8c:	0f 90       	pop	r0
     b8e:	ff 91       	pop	r31
     b90:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     b94:	ff 91       	pop	r31
     b96:	ff bf       	out	0x3f, r31	; 63
     b98:	ff 91       	pop	r31
     b9a:	18 95       	reti

00000b9c <prvIsQueueEmpty>:
		{
			xReturn = pdFAIL;
		}

		return xReturn;
	}
     b9c:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     ba0:	ff 93       	push	r31
     ba2:	f8 7f       	andi	r31, 0xF8	; 248
     ba4:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     ba8:	fc 01       	movw	r30, r24
     baa:	86 8d       	ldd	r24, Z+30	; 0x1e
     bac:	81 11       	cpse	r24, r1
     bae:	02 c0       	rjmp	.+4      	; 0xbb4 <prvIsQueueEmpty+0x18>
     bb0:	81 e0       	ldi	r24, 0x01	; 1
     bb2:	01 c0       	rjmp	.+2      	; 0xbb6 <prvIsQueueEmpty+0x1a>
     bb4:	80 e0       	ldi	r24, 0x00	; 0
     bb6:	ff 91       	pop	r31
     bb8:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     bbc:	08 95       	ret

00000bbe <prvIsQueueFull>:
     bbe:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     bc2:	ff 93       	push	r31
     bc4:	f8 7f       	andi	r31, 0xF8	; 248
     bc6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     bca:	fc 01       	movw	r30, r24
     bcc:	26 8d       	ldd	r18, Z+30	; 0x1e
     bce:	87 8d       	ldd	r24, Z+31	; 0x1f
     bd0:	28 13       	cpse	r18, r24
     bd2:	02 c0       	rjmp	.+4      	; 0xbd8 <prvIsQueueFull+0x1a>
     bd4:	81 e0       	ldi	r24, 0x01	; 1
     bd6:	01 c0       	rjmp	.+2      	; 0xbda <prvIsQueueFull+0x1c>
     bd8:	80 e0       	ldi	r24, 0x00	; 0
     bda:	ff 91       	pop	r31
     bdc:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     be0:	08 95       	ret

00000be2 <prvCopyDataToQueue>:
     be2:	0f 93       	push	r16
     be4:	1f 93       	push	r17
     be6:	cf 93       	push	r28
     be8:	df 93       	push	r29
     bea:	ec 01       	movw	r28, r24
     bec:	04 2f       	mov	r16, r20
     bee:	1e 8d       	ldd	r17, Y+30	; 0x1e
     bf0:	48 a1       	ldd	r20, Y+32	; 0x20
     bf2:	44 23       	and	r20, r20
     bf4:	b9 f1       	breq	.+110    	; 0xc64 <prvCopyDataToQueue+0x82>
     bf6:	01 11       	cpse	r16, r1
     bf8:	16 c0       	rjmp	.+44     	; 0xc26 <prvCopyDataToQueue+0x44>
     bfa:	50 e0       	ldi	r21, 0x00	; 0
     bfc:	8c 81       	ldd	r24, Y+4	; 0x04
     bfe:	9d 81       	ldd	r25, Y+5	; 0x05
     c00:	0e 94 d5 1d 	call	0x3baa	; 0x3baa <memcpy>
     c04:	28 a1       	ldd	r18, Y+32	; 0x20
     c06:	8c 81       	ldd	r24, Y+4	; 0x04
     c08:	9d 81       	ldd	r25, Y+5	; 0x05
     c0a:	82 0f       	add	r24, r18
     c0c:	91 1d       	adc	r25, r1
     c0e:	8c 83       	std	Y+4, r24	; 0x04
     c10:	9d 83       	std	Y+5, r25	; 0x05
     c12:	2a 81       	ldd	r18, Y+2	; 0x02
     c14:	3b 81       	ldd	r19, Y+3	; 0x03
     c16:	82 17       	cp	r24, r18
     c18:	93 07       	cpc	r25, r19
     c1a:	20 f1       	brcs	.+72     	; 0xc64 <prvCopyDataToQueue+0x82>
     c1c:	88 81       	ld	r24, Y
     c1e:	99 81       	ldd	r25, Y+1	; 0x01
     c20:	8c 83       	std	Y+4, r24	; 0x04
     c22:	9d 83       	std	Y+5, r25	; 0x05
     c24:	1f c0       	rjmp	.+62     	; 0xc64 <prvCopyDataToQueue+0x82>
     c26:	50 e0       	ldi	r21, 0x00	; 0
     c28:	8e 81       	ldd	r24, Y+6	; 0x06
     c2a:	9f 81       	ldd	r25, Y+7	; 0x07
     c2c:	0e 94 d5 1d 	call	0x3baa	; 0x3baa <memcpy>
     c30:	88 a1       	ldd	r24, Y+32	; 0x20
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	91 95       	neg	r25
     c36:	81 95       	neg	r24
     c38:	91 09       	sbc	r25, r1
     c3a:	2e 81       	ldd	r18, Y+6	; 0x06
     c3c:	3f 81       	ldd	r19, Y+7	; 0x07
     c3e:	28 0f       	add	r18, r24
     c40:	39 1f       	adc	r19, r25
     c42:	2e 83       	std	Y+6, r18	; 0x06
     c44:	3f 83       	std	Y+7, r19	; 0x07
     c46:	48 81       	ld	r20, Y
     c48:	59 81       	ldd	r21, Y+1	; 0x01
     c4a:	24 17       	cp	r18, r20
     c4c:	35 07       	cpc	r19, r21
     c4e:	30 f4       	brcc	.+12     	; 0xc5c <prvCopyDataToQueue+0x7a>
     c50:	2a 81       	ldd	r18, Y+2	; 0x02
     c52:	3b 81       	ldd	r19, Y+3	; 0x03
     c54:	82 0f       	add	r24, r18
     c56:	93 1f       	adc	r25, r19
     c58:	8e 83       	std	Y+6, r24	; 0x06
     c5a:	9f 83       	std	Y+7, r25	; 0x07
     c5c:	02 30       	cpi	r16, 0x02	; 2
     c5e:	11 f4       	brne	.+4      	; 0xc64 <prvCopyDataToQueue+0x82>
     c60:	11 11       	cpse	r17, r1
     c62:	11 50       	subi	r17, 0x01	; 1
     c64:	1f 5f       	subi	r17, 0xFF	; 255
     c66:	1e 8f       	std	Y+30, r17	; 0x1e
     c68:	80 e0       	ldi	r24, 0x00	; 0
     c6a:	df 91       	pop	r29
     c6c:	cf 91       	pop	r28
     c6e:	1f 91       	pop	r17
     c70:	0f 91       	pop	r16
     c72:	08 95       	ret

00000c74 <prvCopyDataFromQueue>:
     c74:	fc 01       	movw	r30, r24
     c76:	40 a1       	ldd	r20, Z+32	; 0x20
     c78:	44 23       	and	r20, r20
     c7a:	a9 f0       	breq	.+42     	; 0xca6 <prvCopyDataFromQueue+0x32>
     c7c:	50 e0       	ldi	r21, 0x00	; 0
     c7e:	26 81       	ldd	r18, Z+6	; 0x06
     c80:	37 81       	ldd	r19, Z+7	; 0x07
     c82:	24 0f       	add	r18, r20
     c84:	35 1f       	adc	r19, r21
     c86:	26 83       	std	Z+6, r18	; 0x06
     c88:	37 83       	std	Z+7, r19	; 0x07
     c8a:	82 81       	ldd	r24, Z+2	; 0x02
     c8c:	93 81       	ldd	r25, Z+3	; 0x03
     c8e:	28 17       	cp	r18, r24
     c90:	39 07       	cpc	r19, r25
     c92:	20 f0       	brcs	.+8      	; 0xc9c <prvCopyDataFromQueue+0x28>
     c94:	80 81       	ld	r24, Z
     c96:	91 81       	ldd	r25, Z+1	; 0x01
     c98:	86 83       	std	Z+6, r24	; 0x06
     c9a:	97 83       	std	Z+7, r25	; 0x07
     c9c:	cb 01       	movw	r24, r22
     c9e:	66 81       	ldd	r22, Z+6	; 0x06
     ca0:	77 81       	ldd	r23, Z+7	; 0x07
     ca2:	0e 94 d5 1d 	call	0x3baa	; 0x3baa <memcpy>
     ca6:	08 95       	ret

00000ca8 <prvUnlockQueue>:
     ca8:	1f 93       	push	r17
     caa:	cf 93       	push	r28
     cac:	df 93       	push	r29
     cae:	ec 01       	movw	r28, r24
     cb0:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     cb4:	ff 93       	push	r31
     cb6:	f8 7f       	andi	r31, 0xF8	; 248
     cb8:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     cbc:	1a a1       	ldd	r17, Y+34	; 0x22
     cbe:	0b c0       	rjmp	.+22     	; 0xcd6 <prvUnlockQueue+0x2e>
     cc0:	8b 89       	ldd	r24, Y+19	; 0x13
     cc2:	88 23       	and	r24, r24
     cc4:	51 f0       	breq	.+20     	; 0xcda <prvUnlockQueue+0x32>
     cc6:	ce 01       	movw	r24, r28
     cc8:	43 96       	adiw	r24, 0x13	; 19
     cca:	0e 94 67 0d 	call	0x1ace	; 0x1ace <xTaskRemoveFromEventList>
     cce:	81 11       	cpse	r24, r1
     cd0:	0e 94 56 0e 	call	0x1cac	; 0x1cac <vTaskMissedYield>
     cd4:	11 50       	subi	r17, 0x01	; 1
     cd6:	11 16       	cp	r1, r17
     cd8:	9c f3       	brlt	.-26     	; 0xcc0 <prvUnlockQueue+0x18>
     cda:	8f ef       	ldi	r24, 0xFF	; 255
     cdc:	8a a3       	std	Y+34, r24	; 0x22
     cde:	ff 91       	pop	r31
     ce0:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     ce4:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     ce8:	ff 93       	push	r31
     cea:	f8 7f       	andi	r31, 0xF8	; 248
     cec:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     cf0:	19 a1       	ldd	r17, Y+33	; 0x21
     cf2:	0b c0       	rjmp	.+22     	; 0xd0a <prvUnlockQueue+0x62>
     cf4:	88 85       	ldd	r24, Y+8	; 0x08
     cf6:	88 23       	and	r24, r24
     cf8:	51 f0       	breq	.+20     	; 0xd0e <prvUnlockQueue+0x66>
     cfa:	ce 01       	movw	r24, r28
     cfc:	08 96       	adiw	r24, 0x08	; 8
     cfe:	0e 94 67 0d 	call	0x1ace	; 0x1ace <xTaskRemoveFromEventList>
     d02:	81 11       	cpse	r24, r1
     d04:	0e 94 56 0e 	call	0x1cac	; 0x1cac <vTaskMissedYield>
     d08:	11 50       	subi	r17, 0x01	; 1
     d0a:	11 16       	cp	r1, r17
     d0c:	9c f3       	brlt	.-26     	; 0xcf4 <prvUnlockQueue+0x4c>
     d0e:	8f ef       	ldi	r24, 0xFF	; 255
     d10:	89 a3       	std	Y+33, r24	; 0x21
     d12:	ff 91       	pop	r31
     d14:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     d18:	df 91       	pop	r29
     d1a:	cf 91       	pop	r28
     d1c:	1f 91       	pop	r17
     d1e:	08 95       	ret

00000d20 <xQueueGenericReset>:
     d20:	cf 93       	push	r28
     d22:	df 93       	push	r29
     d24:	ec 01       	movw	r28, r24
     d26:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     d2a:	ff 93       	push	r31
     d2c:	f8 7f       	andi	r31, 0xF8	; 248
     d2e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     d32:	e8 81       	ld	r30, Y
     d34:	f9 81       	ldd	r31, Y+1	; 0x01
     d36:	8f 8d       	ldd	r24, Y+31	; 0x1f
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	28 a1       	ldd	r18, Y+32	; 0x20
     d3c:	30 e0       	ldi	r19, 0x00	; 0
     d3e:	82 9f       	mul	r24, r18
     d40:	a0 01       	movw	r20, r0
     d42:	83 9f       	mul	r24, r19
     d44:	50 0d       	add	r21, r0
     d46:	92 9f       	mul	r25, r18
     d48:	50 0d       	add	r21, r0
     d4a:	11 24       	eor	r1, r1
     d4c:	4e 0f       	add	r20, r30
     d4e:	5f 1f       	adc	r21, r31
     d50:	4a 83       	std	Y+2, r20	; 0x02
     d52:	5b 83       	std	Y+3, r21	; 0x03
     d54:	1e 8e       	std	Y+30, r1	; 0x1e
     d56:	ec 83       	std	Y+4, r30	; 0x04
     d58:	fd 83       	std	Y+5, r31	; 0x05
     d5a:	01 97       	sbiw	r24, 0x01	; 1
     d5c:	28 9f       	mul	r18, r24
     d5e:	a0 01       	movw	r20, r0
     d60:	29 9f       	mul	r18, r25
     d62:	50 0d       	add	r21, r0
     d64:	38 9f       	mul	r19, r24
     d66:	50 0d       	add	r21, r0
     d68:	11 24       	eor	r1, r1
     d6a:	cf 01       	movw	r24, r30
     d6c:	84 0f       	add	r24, r20
     d6e:	95 1f       	adc	r25, r21
     d70:	8e 83       	std	Y+6, r24	; 0x06
     d72:	9f 83       	std	Y+7, r25	; 0x07
     d74:	8f ef       	ldi	r24, 0xFF	; 255
     d76:	89 a3       	std	Y+33, r24	; 0x21
     d78:	8a a3       	std	Y+34, r24	; 0x22
     d7a:	61 11       	cpse	r22, r1
     d7c:	0c c0       	rjmp	.+24     	; 0xd96 <xQueueGenericReset+0x76>
     d7e:	88 85       	ldd	r24, Y+8	; 0x08
     d80:	88 23       	and	r24, r24
     d82:	89 f0       	breq	.+34     	; 0xda6 <xQueueGenericReset+0x86>
     d84:	ce 01       	movw	r24, r28
     d86:	08 96       	adiw	r24, 0x08	; 8
     d88:	0e 94 67 0d 	call	0x1ace	; 0x1ace <xTaskRemoveFromEventList>
     d8c:	88 23       	and	r24, r24
     d8e:	59 f0       	breq	.+22     	; 0xda6 <xQueueGenericReset+0x86>
     d90:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <vPortYield>
     d94:	08 c0       	rjmp	.+16     	; 0xda6 <xQueueGenericReset+0x86>
     d96:	ce 01       	movw	r24, r28
     d98:	08 96       	adiw	r24, 0x08	; 8
     d9a:	0e 94 7f 03 	call	0x6fe	; 0x6fe <vListInitialise>
     d9e:	ce 01       	movw	r24, r28
     da0:	43 96       	adiw	r24, 0x13	; 19
     da2:	0e 94 7f 03 	call	0x6fe	; 0x6fe <vListInitialise>
     da6:	ff 91       	pop	r31
     da8:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     dac:	81 e0       	ldi	r24, 0x01	; 1
     dae:	df 91       	pop	r29
     db0:	cf 91       	pop	r28
     db2:	08 95       	ret

00000db4 <prvInitialiseNewQueue>:
     db4:	ff 92       	push	r15
     db6:	0f 93       	push	r16
     db8:	1f 93       	push	r17
     dba:	cf 93       	push	r28
     dbc:	df 93       	push	r29
     dbe:	f2 2e       	mov	r15, r18
     dc0:	e8 01       	movw	r28, r16
     dc2:	61 11       	cpse	r22, r1
     dc4:	03 c0       	rjmp	.+6      	; 0xdcc <prvInitialiseNewQueue+0x18>
     dc6:	08 83       	st	Y, r16
     dc8:	19 83       	std	Y+1, r17	; 0x01
     dca:	02 c0       	rjmp	.+4      	; 0xdd0 <prvInitialiseNewQueue+0x1c>
     dcc:	48 83       	st	Y, r20
     dce:	59 83       	std	Y+1, r21	; 0x01
     dd0:	8f 8f       	std	Y+31, r24	; 0x1f
     dd2:	68 a3       	std	Y+32, r22	; 0x20
     dd4:	61 e0       	ldi	r22, 0x01	; 1
     dd6:	ce 01       	movw	r24, r28
     dd8:	0e 94 90 06 	call	0xd20	; 0xd20 <xQueueGenericReset>
     ddc:	fc a2       	std	Y+36, r15	; 0x24
     dde:	df 91       	pop	r29
     de0:	cf 91       	pop	r28
     de2:	1f 91       	pop	r17
     de4:	0f 91       	pop	r16
     de6:	ff 90       	pop	r15
     de8:	08 95       	ret

00000dea <xQueueGenericCreate>:
     dea:	df 92       	push	r13
     dec:	ef 92       	push	r14
     dee:	ff 92       	push	r15
     df0:	0f 93       	push	r16
     df2:	1f 93       	push	r17
     df4:	cf 93       	push	r28
     df6:	df 93       	push	r29
     df8:	e8 2e       	mov	r14, r24
     dfa:	f6 2e       	mov	r15, r22
     dfc:	d4 2e       	mov	r13, r20
     dfe:	66 23       	and	r22, r22
     e00:	21 f0       	breq	.+8      	; 0xe0a <xQueueGenericCreate+0x20>
     e02:	86 9f       	mul	r24, r22
     e04:	c0 01       	movw	r24, r0
     e06:	11 24       	eor	r1, r1
     e08:	02 c0       	rjmp	.+4      	; 0xe0e <xQueueGenericCreate+0x24>
     e0a:	80 e0       	ldi	r24, 0x00	; 0
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	85 96       	adiw	r24, 0x25	; 37
     e10:	0e 94 58 03 	call	0x6b0	; 0x6b0 <pvPortMalloc>
     e14:	ec 01       	movw	r28, r24
     e16:	00 97       	sbiw	r24, 0x00	; 0
     e18:	49 f0       	breq	.+18     	; 0xe2c <xQueueGenericCreate+0x42>
     e1a:	8c 01       	movw	r16, r24
     e1c:	2d 2d       	mov	r18, r13
     e1e:	ac 01       	movw	r20, r24
     e20:	4b 5d       	subi	r20, 0xDB	; 219
     e22:	5f 4f       	sbci	r21, 0xFF	; 255
     e24:	6f 2d       	mov	r22, r15
     e26:	8e 2d       	mov	r24, r14
     e28:	0e 94 da 06 	call	0xdb4	; 0xdb4 <prvInitialiseNewQueue>
     e2c:	ce 01       	movw	r24, r28
     e2e:	df 91       	pop	r29
     e30:	cf 91       	pop	r28
     e32:	1f 91       	pop	r17
     e34:	0f 91       	pop	r16
     e36:	ff 90       	pop	r15
     e38:	ef 90       	pop	r14
     e3a:	df 90       	pop	r13
     e3c:	08 95       	ret

00000e3e <xQueueGenericSend>:
     e3e:	cf 92       	push	r12
     e40:	df 92       	push	r13
     e42:	ef 92       	push	r14
     e44:	ff 92       	push	r15
     e46:	0f 93       	push	r16
     e48:	1f 93       	push	r17
     e4a:	cf 93       	push	r28
     e4c:	df 93       	push	r29
     e4e:	cd b7       	in	r28, 0x3d	; 61
     e50:	de b7       	in	r29, 0x3e	; 62
     e52:	29 97       	sbiw	r28, 0x09	; 9
     e54:	cd bf       	out	0x3d, r28	; 61
     e56:	de bf       	out	0x3e, r29	; 62
     e58:	7c 01       	movw	r14, r24
     e5a:	6b 01       	movw	r12, r22
     e5c:	2e 83       	std	Y+6, r18	; 0x06
     e5e:	3f 83       	std	Y+7, r19	; 0x07
     e60:	48 87       	std	Y+8, r20	; 0x08
     e62:	59 87       	std	Y+9, r21	; 0x09
     e64:	10 e0       	ldi	r17, 0x00	; 0
     e66:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     e6a:	ff 93       	push	r31
     e6c:	f8 7f       	andi	r31, 0xF8	; 248
     e6e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     e72:	f7 01       	movw	r30, r14
     e74:	96 8d       	ldd	r25, Z+30	; 0x1e
     e76:	87 8d       	ldd	r24, Z+31	; 0x1f
     e78:	98 17       	cp	r25, r24
     e7a:	10 f0       	brcs	.+4      	; 0xe80 <xQueueGenericSend+0x42>
     e7c:	02 30       	cpi	r16, 0x02	; 2
     e7e:	d1 f4       	brne	.+52     	; 0xeb4 <xQueueGenericSend+0x76>
     e80:	40 2f       	mov	r20, r16
     e82:	b6 01       	movw	r22, r12
     e84:	c7 01       	movw	r24, r14
     e86:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <prvCopyDataToQueue>
     e8a:	f7 01       	movw	r30, r14
     e8c:	93 89       	ldd	r25, Z+19	; 0x13
     e8e:	99 23       	and	r25, r25
     e90:	49 f0       	breq	.+18     	; 0xea4 <xQueueGenericSend+0x66>
     e92:	c7 01       	movw	r24, r14
     e94:	43 96       	adiw	r24, 0x13	; 19
     e96:	0e 94 67 0d 	call	0x1ace	; 0x1ace <xTaskRemoveFromEventList>
     e9a:	88 23       	and	r24, r24
     e9c:	31 f0       	breq	.+12     	; 0xeaa <xQueueGenericSend+0x6c>
     e9e:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <vPortYield>
     ea2:	03 c0       	rjmp	.+6      	; 0xeaa <xQueueGenericSend+0x6c>
     ea4:	81 11       	cpse	r24, r1
     ea6:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <vPortYield>
     eaa:	ff 91       	pop	r31
     eac:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	58 c0       	rjmp	.+176    	; 0xf64 <xQueueGenericSend+0x126>
     eb4:	8e 81       	ldd	r24, Y+6	; 0x06
     eb6:	9f 81       	ldd	r25, Y+7	; 0x07
     eb8:	a8 85       	ldd	r26, Y+8	; 0x08
     eba:	b9 85       	ldd	r27, Y+9	; 0x09
     ebc:	89 2b       	or	r24, r25
     ebe:	8a 2b       	or	r24, r26
     ec0:	8b 2b       	or	r24, r27
     ec2:	29 f4       	brne	.+10     	; 0xece <xQueueGenericSend+0x90>
     ec4:	ff 91       	pop	r31
     ec6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     eca:	80 e0       	ldi	r24, 0x00	; 0
     ecc:	4b c0       	rjmp	.+150    	; 0xf64 <xQueueGenericSend+0x126>
     ece:	11 11       	cpse	r17, r1
     ed0:	05 c0       	rjmp	.+10     	; 0xedc <xQueueGenericSend+0x9e>
     ed2:	ce 01       	movw	r24, r28
     ed4:	01 96       	adiw	r24, 0x01	; 1
     ed6:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <vTaskInternalSetTimeOutState>
     eda:	11 e0       	ldi	r17, 0x01	; 1
     edc:	ff 91       	pop	r31
     ede:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     ee2:	0e 94 12 0b 	call	0x1624	; 0x1624 <vTaskSuspendAll>
     ee6:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     eea:	ff 93       	push	r31
     eec:	f8 7f       	andi	r31, 0xF8	; 248
     eee:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     ef2:	f7 01       	movw	r30, r14
     ef4:	81 a1       	ldd	r24, Z+33	; 0x21
     ef6:	8f 3f       	cpi	r24, 0xFF	; 255
     ef8:	09 f4       	brne	.+2      	; 0xefc <xQueueGenericSend+0xbe>
     efa:	11 a2       	std	Z+33, r1	; 0x21
     efc:	f7 01       	movw	r30, r14
     efe:	82 a1       	ldd	r24, Z+34	; 0x22
     f00:	8f 3f       	cpi	r24, 0xFF	; 255
     f02:	09 f4       	brne	.+2      	; 0xf06 <xQueueGenericSend+0xc8>
     f04:	12 a2       	std	Z+34, r1	; 0x22
     f06:	ff 91       	pop	r31
     f08:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     f0c:	be 01       	movw	r22, r28
     f0e:	6a 5f       	subi	r22, 0xFA	; 250
     f10:	7f 4f       	sbci	r23, 0xFF	; 255
     f12:	ce 01       	movw	r24, r28
     f14:	01 96       	adiw	r24, 0x01	; 1
     f16:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <xTaskCheckForTimeOut>
     f1a:	81 11       	cpse	r24, r1
     f1c:	1d c0       	rjmp	.+58     	; 0xf58 <xQueueGenericSend+0x11a>
     f1e:	c7 01       	movw	r24, r14
     f20:	0e 94 df 05 	call	0xbbe	; 0xbbe <prvIsQueueFull>
     f24:	88 23       	and	r24, r24
     f26:	91 f0       	breq	.+36     	; 0xf4c <xQueueGenericSend+0x10e>
     f28:	4e 81       	ldd	r20, Y+6	; 0x06
     f2a:	5f 81       	ldd	r21, Y+7	; 0x07
     f2c:	68 85       	ldd	r22, Y+8	; 0x08
     f2e:	79 85       	ldd	r23, Y+9	; 0x09
     f30:	c7 01       	movw	r24, r14
     f32:	08 96       	adiw	r24, 0x08	; 8
     f34:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <vTaskPlaceOnEventList>
     f38:	c7 01       	movw	r24, r14
     f3a:	0e 94 54 06 	call	0xca8	; 0xca8 <prvUnlockQueue>
     f3e:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <xTaskResumeAll>
     f42:	81 11       	cpse	r24, r1
     f44:	90 cf       	rjmp	.-224    	; 0xe66 <xQueueGenericSend+0x28>
     f46:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <vPortYield>
     f4a:	8d cf       	rjmp	.-230    	; 0xe66 <xQueueGenericSend+0x28>
     f4c:	c7 01       	movw	r24, r14
     f4e:	0e 94 54 06 	call	0xca8	; 0xca8 <prvUnlockQueue>
     f52:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <xTaskResumeAll>
     f56:	87 cf       	rjmp	.-242    	; 0xe66 <xQueueGenericSend+0x28>
     f58:	c7 01       	movw	r24, r14
     f5a:	0e 94 54 06 	call	0xca8	; 0xca8 <prvUnlockQueue>
     f5e:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <xTaskResumeAll>
     f62:	80 e0       	ldi	r24, 0x00	; 0
     f64:	29 96       	adiw	r28, 0x09	; 9
     f66:	cd bf       	out	0x3d, r28	; 61
     f68:	de bf       	out	0x3e, r29	; 62
     f6a:	df 91       	pop	r29
     f6c:	cf 91       	pop	r28
     f6e:	1f 91       	pop	r17
     f70:	0f 91       	pop	r16
     f72:	ff 90       	pop	r15
     f74:	ef 90       	pop	r14
     f76:	df 90       	pop	r13
     f78:	cf 90       	pop	r12
     f7a:	08 95       	ret

00000f7c <xQueueGenericSendFromISR>:
     f7c:	af 92       	push	r10
     f7e:	bf 92       	push	r11
     f80:	cf 92       	push	r12
     f82:	df 92       	push	r13
     f84:	ff 92       	push	r15
     f86:	0f 93       	push	r16
     f88:	1f 93       	push	r17
     f8a:	cf 93       	push	r28
     f8c:	df 93       	push	r29
     f8e:	ec 01       	movw	r28, r24
     f90:	6b 01       	movw	r12, r22
     f92:	5a 01       	movw	r10, r20
     f94:	02 2f       	mov	r16, r18
     f96:	0e 94 2a 04 	call	0x854	; 0x854 <_portSetInterruptMaskFromIsr>
     f9a:	f8 2e       	mov	r15, r24
     f9c:	9e 8d       	ldd	r25, Y+30	; 0x1e
     f9e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     fa0:	98 17       	cp	r25, r24
     fa2:	10 f0       	brcs	.+4      	; 0xfa8 <xQueueGenericSendFromISR+0x2c>
     fa4:	02 30       	cpi	r16, 0x02	; 2
     fa6:	e1 f4       	brne	.+56     	; 0xfe0 <xQueueGenericSendFromISR+0x64>
     fa8:	1a a1       	ldd	r17, Y+34	; 0x22
     faa:	40 2f       	mov	r20, r16
     fac:	b6 01       	movw	r22, r12
     fae:	ce 01       	movw	r24, r28
     fb0:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <prvCopyDataToQueue>
     fb4:	1f 3f       	cpi	r17, 0xFF	; 255
     fb6:	81 f4       	brne	.+32     	; 0xfd8 <xQueueGenericSendFromISR+0x5c>
     fb8:	8b 89       	ldd	r24, Y+19	; 0x13
     fba:	88 23       	and	r24, r24
     fbc:	99 f0       	breq	.+38     	; 0xfe4 <xQueueGenericSendFromISR+0x68>
     fbe:	ce 01       	movw	r24, r28
     fc0:	43 96       	adiw	r24, 0x13	; 19
     fc2:	0e 94 67 0d 	call	0x1ace	; 0x1ace <xTaskRemoveFromEventList>
     fc6:	88 23       	and	r24, r24
     fc8:	79 f0       	breq	.+30     	; 0xfe8 <xQueueGenericSendFromISR+0x6c>
     fca:	a1 14       	cp	r10, r1
     fcc:	b1 04       	cpc	r11, r1
     fce:	71 f0       	breq	.+28     	; 0xfec <xQueueGenericSendFromISR+0x70>
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	f5 01       	movw	r30, r10
     fd4:	80 83       	st	Z, r24
     fd6:	0b c0       	rjmp	.+22     	; 0xfee <xQueueGenericSendFromISR+0x72>
     fd8:	1f 5f       	subi	r17, 0xFF	; 255
     fda:	1a a3       	std	Y+34, r17	; 0x22
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	07 c0       	rjmp	.+14     	; 0xfee <xQueueGenericSendFromISR+0x72>
     fe0:	80 e0       	ldi	r24, 0x00	; 0
     fe2:	05 c0       	rjmp	.+10     	; 0xfee <xQueueGenericSendFromISR+0x72>
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	03 c0       	rjmp	.+6      	; 0xfee <xQueueGenericSendFromISR+0x72>
     fe8:	81 e0       	ldi	r24, 0x01	; 1
     fea:	01 c0       	rjmp	.+2      	; 0xfee <xQueueGenericSendFromISR+0x72>
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	f0 92 a2 00 	sts	0x00A2, r15	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
     ff2:	df 91       	pop	r29
     ff4:	cf 91       	pop	r28
     ff6:	1f 91       	pop	r17
     ff8:	0f 91       	pop	r16
     ffa:	ff 90       	pop	r15
     ffc:	df 90       	pop	r13
     ffe:	cf 90       	pop	r12
    1000:	bf 90       	pop	r11
    1002:	af 90       	pop	r10
    1004:	08 95       	ret

00001006 <xQueueReceive>:
    1006:	cf 92       	push	r12
    1008:	df 92       	push	r13
    100a:	ef 92       	push	r14
    100c:	ff 92       	push	r15
    100e:	0f 93       	push	r16
    1010:	1f 93       	push	r17
    1012:	cf 93       	push	r28
    1014:	df 93       	push	r29
    1016:	cd b7       	in	r28, 0x3d	; 61
    1018:	de b7       	in	r29, 0x3e	; 62
    101a:	29 97       	sbiw	r28, 0x09	; 9
    101c:	cd bf       	out	0x3d, r28	; 61
    101e:	de bf       	out	0x3e, r29	; 62
    1020:	8c 01       	movw	r16, r24
    1022:	6b 01       	movw	r12, r22
    1024:	2e 83       	std	Y+6, r18	; 0x06
    1026:	3f 83       	std	Y+7, r19	; 0x07
    1028:	48 87       	std	Y+8, r20	; 0x08
    102a:	59 87       	std	Y+9, r21	; 0x09
    102c:	e1 2c       	mov	r14, r1
    102e:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1032:	ff 93       	push	r31
    1034:	f8 7f       	andi	r31, 0xF8	; 248
    1036:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    103a:	f8 01       	movw	r30, r16
    103c:	f6 8c       	ldd	r15, Z+30	; 0x1e
    103e:	ff 20       	and	r15, r15
    1040:	b1 f0       	breq	.+44     	; 0x106e <xQueueReceive+0x68>
    1042:	b6 01       	movw	r22, r12
    1044:	c8 01       	movw	r24, r16
    1046:	0e 94 3a 06 	call	0xc74	; 0xc74 <prvCopyDataFromQueue>
    104a:	fa 94       	dec	r15
    104c:	f8 01       	movw	r30, r16
    104e:	f6 8e       	std	Z+30, r15	; 0x1e
    1050:	80 85       	ldd	r24, Z+8	; 0x08
    1052:	88 23       	and	r24, r24
    1054:	39 f0       	breq	.+14     	; 0x1064 <xQueueReceive+0x5e>
    1056:	c8 01       	movw	r24, r16
    1058:	08 96       	adiw	r24, 0x08	; 8
    105a:	0e 94 67 0d 	call	0x1ace	; 0x1ace <xTaskRemoveFromEventList>
    105e:	81 11       	cpse	r24, r1
    1060:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <vPortYield>
    1064:	ff 91       	pop	r31
    1066:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    106a:	81 e0       	ldi	r24, 0x01	; 1
    106c:	5f c0       	rjmp	.+190    	; 0x112c <xQueueReceive+0x126>
    106e:	8e 81       	ldd	r24, Y+6	; 0x06
    1070:	9f 81       	ldd	r25, Y+7	; 0x07
    1072:	a8 85       	ldd	r26, Y+8	; 0x08
    1074:	b9 85       	ldd	r27, Y+9	; 0x09
    1076:	89 2b       	or	r24, r25
    1078:	8a 2b       	or	r24, r26
    107a:	8b 2b       	or	r24, r27
    107c:	29 f4       	brne	.+10     	; 0x1088 <xQueueReceive+0x82>
    107e:	ff 91       	pop	r31
    1080:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1084:	80 e0       	ldi	r24, 0x00	; 0
    1086:	52 c0       	rjmp	.+164    	; 0x112c <xQueueReceive+0x126>
    1088:	e1 10       	cpse	r14, r1
    108a:	06 c0       	rjmp	.+12     	; 0x1098 <xQueueReceive+0x92>
    108c:	ce 01       	movw	r24, r28
    108e:	01 96       	adiw	r24, 0x01	; 1
    1090:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <vTaskInternalSetTimeOutState>
    1094:	ee 24       	eor	r14, r14
    1096:	e3 94       	inc	r14
    1098:	ff 91       	pop	r31
    109a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    109e:	0e 94 12 0b 	call	0x1624	; 0x1624 <vTaskSuspendAll>
    10a2:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    10a6:	ff 93       	push	r31
    10a8:	f8 7f       	andi	r31, 0xF8	; 248
    10aa:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    10ae:	f8 01       	movw	r30, r16
    10b0:	81 a1       	ldd	r24, Z+33	; 0x21
    10b2:	8f 3f       	cpi	r24, 0xFF	; 255
    10b4:	09 f4       	brne	.+2      	; 0x10b8 <xQueueReceive+0xb2>
    10b6:	11 a2       	std	Z+33, r1	; 0x21
    10b8:	f8 01       	movw	r30, r16
    10ba:	82 a1       	ldd	r24, Z+34	; 0x22
    10bc:	8f 3f       	cpi	r24, 0xFF	; 255
    10be:	09 f4       	brne	.+2      	; 0x10c2 <xQueueReceive+0xbc>
    10c0:	12 a2       	std	Z+34, r1	; 0x22
    10c2:	ff 91       	pop	r31
    10c4:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    10c8:	be 01       	movw	r22, r28
    10ca:	6a 5f       	subi	r22, 0xFA	; 250
    10cc:	7f 4f       	sbci	r23, 0xFF	; 255
    10ce:	ce 01       	movw	r24, r28
    10d0:	01 96       	adiw	r24, 0x01	; 1
    10d2:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <xTaskCheckForTimeOut>
    10d6:	81 11       	cpse	r24, r1
    10d8:	1d c0       	rjmp	.+58     	; 0x1114 <xQueueReceive+0x10e>
    10da:	c8 01       	movw	r24, r16
    10dc:	0e 94 ce 05 	call	0xb9c	; 0xb9c <prvIsQueueEmpty>
    10e0:	88 23       	and	r24, r24
    10e2:	91 f0       	breq	.+36     	; 0x1108 <xQueueReceive+0x102>
    10e4:	4e 81       	ldd	r20, Y+6	; 0x06
    10e6:	5f 81       	ldd	r21, Y+7	; 0x07
    10e8:	68 85       	ldd	r22, Y+8	; 0x08
    10ea:	79 85       	ldd	r23, Y+9	; 0x09
    10ec:	c8 01       	movw	r24, r16
    10ee:	43 96       	adiw	r24, 0x13	; 19
    10f0:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <vTaskPlaceOnEventList>
    10f4:	c8 01       	movw	r24, r16
    10f6:	0e 94 54 06 	call	0xca8	; 0xca8 <prvUnlockQueue>
    10fa:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <xTaskResumeAll>
    10fe:	81 11       	cpse	r24, r1
    1100:	96 cf       	rjmp	.-212    	; 0x102e <xQueueReceive+0x28>
    1102:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <vPortYield>
    1106:	93 cf       	rjmp	.-218    	; 0x102e <xQueueReceive+0x28>
    1108:	c8 01       	movw	r24, r16
    110a:	0e 94 54 06 	call	0xca8	; 0xca8 <prvUnlockQueue>
    110e:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <xTaskResumeAll>
    1112:	8d cf       	rjmp	.-230    	; 0x102e <xQueueReceive+0x28>
    1114:	c8 01       	movw	r24, r16
    1116:	0e 94 54 06 	call	0xca8	; 0xca8 <prvUnlockQueue>
    111a:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <xTaskResumeAll>
    111e:	c8 01       	movw	r24, r16
    1120:	0e 94 ce 05 	call	0xb9c	; 0xb9c <prvIsQueueEmpty>
    1124:	88 23       	and	r24, r24
    1126:	09 f4       	brne	.+2      	; 0x112a <xQueueReceive+0x124>
    1128:	82 cf       	rjmp	.-252    	; 0x102e <xQueueReceive+0x28>
    112a:	80 e0       	ldi	r24, 0x00	; 0
    112c:	29 96       	adiw	r28, 0x09	; 9
    112e:	cd bf       	out	0x3d, r28	; 61
    1130:	de bf       	out	0x3e, r29	; 62
    1132:	df 91       	pop	r29
    1134:	cf 91       	pop	r28
    1136:	1f 91       	pop	r17
    1138:	0f 91       	pop	r16
    113a:	ff 90       	pop	r15
    113c:	ef 90       	pop	r14
    113e:	df 90       	pop	r13
    1140:	cf 90       	pop	r12
    1142:	08 95       	ret

00001144 <uxQueueMessagesWaiting>:
    1144:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1148:	ff 93       	push	r31
    114a:	f8 7f       	andi	r31, 0xF8	; 248
    114c:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1150:	fc 01       	movw	r30, r24
    1152:	86 8d       	ldd	r24, Z+30	; 0x1e
    1154:	ff 91       	pop	r31
    1156:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    115a:	08 95       	ret

0000115c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    115c:	cf 93       	push	r28
    115e:	df 93       	push	r29
    1160:	ec 01       	movw	r28, r24
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    1162:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1166:	ff 93       	push	r31
    1168:	f8 7f       	andi	r31, 0xF8	; 248
    116a:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    116e:	89 a1       	ldd	r24, Y+33	; 0x21
    1170:	8f 3f       	cpi	r24, 0xFF	; 255
    1172:	09 f4       	brne	.+2      	; 0x1176 <vQueueWaitForMessageRestricted+0x1a>
    1174:	19 a2       	std	Y+33, r1	; 0x21
    1176:	8a a1       	ldd	r24, Y+34	; 0x22
    1178:	8f 3f       	cpi	r24, 0xFF	; 255
    117a:	09 f4       	brne	.+2      	; 0x117e <vQueueWaitForMessageRestricted+0x22>
    117c:	1a a2       	std	Y+34, r1	; 0x22
    117e:	ff 91       	pop	r31
    1180:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1184:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1186:	81 11       	cpse	r24, r1
    1188:	04 c0       	rjmp	.+8      	; 0x1192 <vQueueWaitForMessageRestricted+0x36>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    118a:	ce 01       	movw	r24, r28
    118c:	43 96       	adiw	r24, 0x13	; 19
    118e:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    1192:	ce 01       	movw	r24, r28
    1194:	0e 94 54 06 	call	0xca8	; 0xca8 <prvUnlockQueue>
	}
    1198:	df 91       	pop	r29
    119a:	cf 91       	pop	r28
    119c:	08 95       	ret

0000119e <prvResetNextTaskUnblockTime>:
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;

		return xReturn;
	}
    119e:	e0 91 08 35 	lds	r30, 0x3508	; 0x803508 <pxDelayedTaskList>
    11a2:	f0 91 09 35 	lds	r31, 0x3509	; 0x803509 <pxDelayedTaskList+0x1>
    11a6:	80 81       	ld	r24, Z
    11a8:	81 11       	cpse	r24, r1
    11aa:	0c c0       	rjmp	.+24     	; 0x11c4 <prvResetNextTaskUnblockTime+0x26>
    11ac:	8f ef       	ldi	r24, 0xFF	; 255
    11ae:	9f ef       	ldi	r25, 0xFF	; 255
    11b0:	dc 01       	movw	r26, r24
    11b2:	80 93 e1 34 	sts	0x34E1, r24	; 0x8034e1 <xNextTaskUnblockTime>
    11b6:	90 93 e2 34 	sts	0x34E2, r25	; 0x8034e2 <xNextTaskUnblockTime+0x1>
    11ba:	a0 93 e3 34 	sts	0x34E3, r26	; 0x8034e3 <xNextTaskUnblockTime+0x2>
    11be:	b0 93 e4 34 	sts	0x34E4, r27	; 0x8034e4 <xNextTaskUnblockTime+0x3>
    11c2:	08 95       	ret
    11c4:	e0 91 08 35 	lds	r30, 0x3508	; 0x803508 <pxDelayedTaskList>
    11c8:	f0 91 09 35 	lds	r31, 0x3509	; 0x803509 <pxDelayedTaskList+0x1>
    11cc:	07 80       	ldd	r0, Z+7	; 0x07
    11ce:	f0 85       	ldd	r31, Z+8	; 0x08
    11d0:	e0 2d       	mov	r30, r0
    11d2:	00 84       	ldd	r0, Z+8	; 0x08
    11d4:	f1 85       	ldd	r31, Z+9	; 0x09
    11d6:	e0 2d       	mov	r30, r0
    11d8:	82 81       	ldd	r24, Z+2	; 0x02
    11da:	93 81       	ldd	r25, Z+3	; 0x03
    11dc:	a4 81       	ldd	r26, Z+4	; 0x04
    11de:	b5 81       	ldd	r27, Z+5	; 0x05
    11e0:	80 93 e1 34 	sts	0x34E1, r24	; 0x8034e1 <xNextTaskUnblockTime>
    11e4:	90 93 e2 34 	sts	0x34E2, r25	; 0x8034e2 <xNextTaskUnblockTime+0x1>
    11e8:	a0 93 e3 34 	sts	0x34E3, r26	; 0x8034e3 <xNextTaskUnblockTime+0x2>
    11ec:	b0 93 e4 34 	sts	0x34E4, r27	; 0x8034e4 <xNextTaskUnblockTime+0x3>
    11f0:	08 95       	ret

000011f2 <prvInitialiseNewTask>:
    11f2:	2f 92       	push	r2
    11f4:	3f 92       	push	r3
    11f6:	4f 92       	push	r4
    11f8:	5f 92       	push	r5
    11fa:	6f 92       	push	r6
    11fc:	7f 92       	push	r7
    11fe:	8f 92       	push	r8
    1200:	9f 92       	push	r9
    1202:	af 92       	push	r10
    1204:	bf 92       	push	r11
    1206:	cf 92       	push	r12
    1208:	df 92       	push	r13
    120a:	ef 92       	push	r14
    120c:	0f 93       	push	r16
    120e:	1f 93       	push	r17
    1210:	cf 93       	push	r28
    1212:	df 93       	push	r29
    1214:	cd b7       	in	r28, 0x3d	; 61
    1216:	de b7       	in	r29, 0x3e	; 62
    1218:	1c 01       	movw	r2, r24
    121a:	4b 01       	movw	r8, r22
    121c:	29 01       	movw	r4, r18
    121e:	3a 01       	movw	r6, r20
    1220:	a9 01       	movw	r20, r18
    1222:	65 ea       	ldi	r22, 0xA5	; 165
    1224:	70 e0       	ldi	r23, 0x00	; 0
    1226:	f5 01       	movw	r30, r10
    1228:	83 8d       	ldd	r24, Z+27	; 0x1b
    122a:	94 8d       	ldd	r25, Z+28	; 0x1c
    122c:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <memset>
    1230:	f5 01       	movw	r30, r10
    1232:	83 8d       	ldd	r24, Z+27	; 0x1b
    1234:	94 8d       	ldd	r25, Z+28	; 0x1c
    1236:	f1 e0       	ldi	r31, 0x01	; 1
    1238:	4f 1a       	sub	r4, r31
    123a:	51 08       	sbc	r5, r1
    123c:	48 0e       	add	r4, r24
    123e:	59 1e       	adc	r5, r25
    1240:	20 e0       	ldi	r18, 0x00	; 0
    1242:	0f c0       	rjmp	.+30     	; 0x1262 <prvInitialiseNewTask+0x70>
    1244:	82 2f       	mov	r24, r18
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	f4 01       	movw	r30, r8
    124a:	e8 0f       	add	r30, r24
    124c:	f9 1f       	adc	r31, r25
    124e:	30 81       	ld	r19, Z
    1250:	d5 01       	movw	r26, r10
    1252:	a8 0f       	add	r26, r24
    1254:	b9 1f       	adc	r27, r25
    1256:	5d 96       	adiw	r26, 0x1d	; 29
    1258:	3c 93       	st	X, r19
    125a:	80 81       	ld	r24, Z
    125c:	88 23       	and	r24, r24
    125e:	19 f0       	breq	.+6      	; 0x1266 <prvInitialiseNewTask+0x74>
    1260:	2f 5f       	subi	r18, 0xFF	; 255
    1262:	28 30       	cpi	r18, 0x08	; 8
    1264:	78 f3       	brcs	.-34     	; 0x1244 <prvInitialiseNewTask+0x52>
    1266:	f5 01       	movw	r30, r10
    1268:	14 a2       	std	Z+36, r1	; 0x24
    126a:	f3 e0       	ldi	r31, 0x03	; 3
    126c:	fe 15       	cp	r31, r14
    126e:	20 f4       	brcc	.+8      	; 0x1278 <prvInitialiseNewTask+0x86>
    1270:	0f 2e       	mov	r0, r31
    1272:	f3 e0       	ldi	r31, 0x03	; 3
    1274:	ef 2e       	mov	r14, r31
    1276:	f0 2d       	mov	r31, r0
    1278:	f5 01       	movw	r30, r10
    127a:	e2 8e       	std	Z+26, r14	; 0x1a
    127c:	c5 01       	movw	r24, r10
    127e:	02 96       	adiw	r24, 0x02	; 2
    1280:	0e 94 90 03 	call	0x720	; 0x720 <vListInitialiseItem>
    1284:	c5 01       	movw	r24, r10
    1286:	0e 96       	adiw	r24, 0x0e	; 14
    1288:	0e 94 90 03 	call	0x720	; 0x720 <vListInitialiseItem>
    128c:	f5 01       	movw	r30, r10
    128e:	a2 86       	std	Z+10, r10	; 0x0a
    1290:	b3 86       	std	Z+11, r11	; 0x0b
    1292:	84 e0       	ldi	r24, 0x04	; 4
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	a0 e0       	ldi	r26, 0x00	; 0
    1298:	b0 e0       	ldi	r27, 0x00	; 0
    129a:	8e 19       	sub	r24, r14
    129c:	91 09       	sbc	r25, r1
    129e:	a1 09       	sbc	r26, r1
    12a0:	b1 09       	sbc	r27, r1
    12a2:	86 87       	std	Z+14, r24	; 0x0e
    12a4:	97 87       	std	Z+15, r25	; 0x0f
    12a6:	a0 8b       	std	Z+16, r26	; 0x10
    12a8:	b1 8b       	std	Z+17, r27	; 0x11
    12aa:	a6 8a       	std	Z+22, r10	; 0x16
    12ac:	b7 8a       	std	Z+23, r11	; 0x17
    12ae:	17 a2       	std	Z+39, r1	; 0x27
    12b0:	10 a6       	std	Z+40, r1	; 0x28
    12b2:	11 a6       	std	Z+41, r1	; 0x29
    12b4:	12 a6       	std	Z+42, r1	; 0x2a
    12b6:	13 a6       	std	Z+43, r1	; 0x2b
    12b8:	a8 01       	movw	r20, r16
    12ba:	b1 01       	movw	r22, r2
    12bc:	c2 01       	movw	r24, r4
    12be:	0e 94 3b 04 	call	0x876	; 0x876 <pxPortInitialiseStack>
    12c2:	f5 01       	movw	r30, r10
    12c4:	80 83       	st	Z, r24
    12c6:	91 83       	std	Z+1, r25	; 0x01
    12c8:	c1 14       	cp	r12, r1
    12ca:	d1 04       	cpc	r13, r1
    12cc:	19 f0       	breq	.+6      	; 0x12d4 <prvInitialiseNewTask+0xe2>
    12ce:	f6 01       	movw	r30, r12
    12d0:	a0 82       	st	Z, r10
    12d2:	b1 82       	std	Z+1, r11	; 0x01
    12d4:	df 91       	pop	r29
    12d6:	cf 91       	pop	r28
    12d8:	1f 91       	pop	r17
    12da:	0f 91       	pop	r16
    12dc:	ef 90       	pop	r14
    12de:	df 90       	pop	r13
    12e0:	cf 90       	pop	r12
    12e2:	bf 90       	pop	r11
    12e4:	af 90       	pop	r10
    12e6:	9f 90       	pop	r9
    12e8:	8f 90       	pop	r8
    12ea:	7f 90       	pop	r7
    12ec:	6f 90       	pop	r6
    12ee:	5f 90       	pop	r5
    12f0:	4f 90       	pop	r4
    12f2:	3f 90       	pop	r3
    12f4:	2f 90       	pop	r2
    12f6:	08 95       	ret

000012f8 <prvInitialiseTaskLists>:
    12f8:	cf 93       	push	r28
    12fa:	c0 e0       	ldi	r28, 0x00	; 0
    12fc:	09 c0       	rjmp	.+18     	; 0x1310 <prvInitialiseTaskLists+0x18>
    12fe:	2b e0       	ldi	r18, 0x0B	; 11
    1300:	c2 9f       	mul	r28, r18
    1302:	c0 01       	movw	r24, r0
    1304:	11 24       	eor	r1, r1
    1306:	80 5e       	subi	r24, 0xE0	; 224
    1308:	9a 4c       	sbci	r25, 0xCA	; 202
    130a:	0e 94 7f 03 	call	0x6fe	; 0x6fe <vListInitialise>
    130e:	cf 5f       	subi	r28, 0xFF	; 255
    1310:	c4 30       	cpi	r28, 0x04	; 4
    1312:	a8 f3       	brcs	.-22     	; 0x12fe <prvInitialiseTaskLists+0x6>
    1314:	85 e1       	ldi	r24, 0x15	; 21
    1316:	95 e3       	ldi	r25, 0x35	; 53
    1318:	0e 94 7f 03 	call	0x6fe	; 0x6fe <vListInitialise>
    131c:	8a e0       	ldi	r24, 0x0A	; 10
    131e:	95 e3       	ldi	r25, 0x35	; 53
    1320:	0e 94 7f 03 	call	0x6fe	; 0x6fe <vListInitialise>
    1324:	8b ef       	ldi	r24, 0xFB	; 251
    1326:	94 e3       	ldi	r25, 0x34	; 52
    1328:	0e 94 7f 03 	call	0x6fe	; 0x6fe <vListInitialise>
    132c:	80 ef       	ldi	r24, 0xF0	; 240
    132e:	94 e3       	ldi	r25, 0x34	; 52
    1330:	0e 94 7f 03 	call	0x6fe	; 0x6fe <vListInitialise>
    1334:	85 e1       	ldi	r24, 0x15	; 21
    1336:	95 e3       	ldi	r25, 0x35	; 53
    1338:	80 93 08 35 	sts	0x3508, r24	; 0x803508 <pxDelayedTaskList>
    133c:	90 93 09 35 	sts	0x3509, r25	; 0x803509 <pxDelayedTaskList+0x1>
    1340:	8a e0       	ldi	r24, 0x0A	; 10
    1342:	95 e3       	ldi	r25, 0x35	; 53
    1344:	80 93 06 35 	sts	0x3506, r24	; 0x803506 <pxOverflowDelayedTaskList>
    1348:	90 93 07 35 	sts	0x3507, r25	; 0x803507 <pxOverflowDelayedTaskList+0x1>
    134c:	cf 91       	pop	r28
    134e:	08 95       	ret

00001350 <prvAddNewTaskToReadyList>:
    1350:	cf 93       	push	r28
    1352:	df 93       	push	r29
    1354:	ec 01       	movw	r28, r24
    1356:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    135a:	ff 93       	push	r31
    135c:	f8 7f       	andi	r31, 0xF8	; 248
    135e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1362:	80 91 ef 34 	lds	r24, 0x34EF	; 0x8034ef <uxCurrentNumberOfTasks>
    1366:	8f 5f       	subi	r24, 0xFF	; 255
    1368:	80 93 ef 34 	sts	0x34EF, r24	; 0x8034ef <uxCurrentNumberOfTasks>
    136c:	80 91 4c 35 	lds	r24, 0x354C	; 0x80354c <pxCurrentTCB>
    1370:	90 91 4d 35 	lds	r25, 0x354D	; 0x80354d <pxCurrentTCB+0x1>
    1374:	89 2b       	or	r24, r25
    1376:	59 f4       	brne	.+22     	; 0x138e <prvAddNewTaskToReadyList+0x3e>
    1378:	c0 93 4c 35 	sts	0x354C, r28	; 0x80354c <pxCurrentTCB>
    137c:	d0 93 4d 35 	sts	0x354D, r29	; 0x80354d <pxCurrentTCB+0x1>
    1380:	80 91 ef 34 	lds	r24, 0x34EF	; 0x8034ef <uxCurrentNumberOfTasks>
    1384:	81 30       	cpi	r24, 0x01	; 1
    1386:	99 f4       	brne	.+38     	; 0x13ae <prvAddNewTaskToReadyList+0x5e>
    1388:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <prvInitialiseTaskLists>
    138c:	10 c0       	rjmp	.+32     	; 0x13ae <prvAddNewTaskToReadyList+0x5e>
    138e:	80 91 e9 34 	lds	r24, 0x34E9	; 0x8034e9 <xSchedulerRunning>
    1392:	81 11       	cpse	r24, r1
    1394:	0c c0       	rjmp	.+24     	; 0x13ae <prvAddNewTaskToReadyList+0x5e>
    1396:	e0 91 4c 35 	lds	r30, 0x354C	; 0x80354c <pxCurrentTCB>
    139a:	f0 91 4d 35 	lds	r31, 0x354D	; 0x80354d <pxCurrentTCB+0x1>
    139e:	92 8d       	ldd	r25, Z+26	; 0x1a
    13a0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    13a2:	89 17       	cp	r24, r25
    13a4:	20 f0       	brcs	.+8      	; 0x13ae <prvAddNewTaskToReadyList+0x5e>
    13a6:	c0 93 4c 35 	sts	0x354C, r28	; 0x80354c <pxCurrentTCB>
    13aa:	d0 93 4d 35 	sts	0x354D, r29	; 0x80354d <pxCurrentTCB+0x1>
    13ae:	80 91 e5 34 	lds	r24, 0x34E5	; 0x8034e5 <uxTaskNumber>
    13b2:	8f 5f       	subi	r24, 0xFF	; 255
    13b4:	80 93 e5 34 	sts	0x34E5, r24	; 0x8034e5 <uxTaskNumber>
    13b8:	8d a3       	std	Y+37, r24	; 0x25
    13ba:	8a 8d       	ldd	r24, Y+26	; 0x1a
    13bc:	90 91 ea 34 	lds	r25, 0x34EA	; 0x8034ea <uxTopReadyPriority>
    13c0:	98 17       	cp	r25, r24
    13c2:	10 f4       	brcc	.+4      	; 0x13c8 <prvAddNewTaskToReadyList+0x78>
    13c4:	80 93 ea 34 	sts	0x34EA, r24	; 0x8034ea <uxTopReadyPriority>
    13c8:	2b e0       	ldi	r18, 0x0B	; 11
    13ca:	82 9f       	mul	r24, r18
    13cc:	c0 01       	movw	r24, r0
    13ce:	11 24       	eor	r1, r1
    13d0:	be 01       	movw	r22, r28
    13d2:	6e 5f       	subi	r22, 0xFE	; 254
    13d4:	7f 4f       	sbci	r23, 0xFF	; 255
    13d6:	80 5e       	subi	r24, 0xE0	; 224
    13d8:	9a 4c       	sbci	r25, 0xCA	; 202
    13da:	0e 94 94 03 	call	0x728	; 0x728 <vListInsertEnd>
    13de:	ff 91       	pop	r31
    13e0:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    13e4:	80 91 e9 34 	lds	r24, 0x34E9	; 0x8034e9 <xSchedulerRunning>
    13e8:	88 23       	and	r24, r24
    13ea:	51 f0       	breq	.+20     	; 0x1400 <prvAddNewTaskToReadyList+0xb0>
    13ec:	e0 91 4c 35 	lds	r30, 0x354C	; 0x80354c <pxCurrentTCB>
    13f0:	f0 91 4d 35 	lds	r31, 0x354D	; 0x80354d <pxCurrentTCB+0x1>
    13f4:	92 8d       	ldd	r25, Z+26	; 0x1a
    13f6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    13f8:	98 17       	cp	r25, r24
    13fa:	10 f4       	brcc	.+4      	; 0x1400 <prvAddNewTaskToReadyList+0xb0>
    13fc:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <vPortYield>
    1400:	df 91       	pop	r29
    1402:	cf 91       	pop	r28
    1404:	08 95       	ret

00001406 <prvAddCurrentTaskToDelayedList>:
    1406:	8f 92       	push	r8
    1408:	9f 92       	push	r9
    140a:	af 92       	push	r10
    140c:	bf 92       	push	r11
    140e:	cf 92       	push	r12
    1410:	df 92       	push	r13
    1412:	ef 92       	push	r14
    1414:	ff 92       	push	r15
    1416:	cf 93       	push	r28
    1418:	6b 01       	movw	r12, r22
    141a:	7c 01       	movw	r14, r24
    141c:	c4 2f       	mov	r28, r20
    141e:	80 90 eb 34 	lds	r8, 0x34EB	; 0x8034eb <xTickCount>
    1422:	90 90 ec 34 	lds	r9, 0x34EC	; 0x8034ec <xTickCount+0x1>
    1426:	a0 90 ed 34 	lds	r10, 0x34ED	; 0x8034ed <xTickCount+0x2>
    142a:	b0 90 ee 34 	lds	r11, 0x34EE	; 0x8034ee <xTickCount+0x3>
    142e:	80 91 4c 35 	lds	r24, 0x354C	; 0x80354c <pxCurrentTCB>
    1432:	90 91 4d 35 	lds	r25, 0x354D	; 0x80354d <pxCurrentTCB+0x1>
    1436:	02 96       	adiw	r24, 0x02	; 2
    1438:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <uxListRemove>
    143c:	8f ef       	ldi	r24, 0xFF	; 255
    143e:	c8 16       	cp	r12, r24
    1440:	d8 06       	cpc	r13, r24
    1442:	e8 06       	cpc	r14, r24
    1444:	f8 06       	cpc	r15, r24
    1446:	69 f4       	brne	.+26     	; 0x1462 <prvAddCurrentTaskToDelayedList+0x5c>
    1448:	cc 23       	and	r28, r28
    144a:	59 f0       	breq	.+22     	; 0x1462 <prvAddCurrentTaskToDelayedList+0x5c>
    144c:	60 91 4c 35 	lds	r22, 0x354C	; 0x80354c <pxCurrentTCB>
    1450:	70 91 4d 35 	lds	r23, 0x354D	; 0x80354d <pxCurrentTCB+0x1>
    1454:	6e 5f       	subi	r22, 0xFE	; 254
    1456:	7f 4f       	sbci	r23, 0xFF	; 255
    1458:	80 ef       	ldi	r24, 0xF0	; 240
    145a:	94 e3       	ldi	r25, 0x34	; 52
    145c:	0e 94 94 03 	call	0x728	; 0x728 <vListInsertEnd>
    1460:	3f c0       	rjmp	.+126    	; 0x14e0 <prvAddCurrentTaskToDelayedList+0xda>
    1462:	c8 0c       	add	r12, r8
    1464:	d9 1c       	adc	r13, r9
    1466:	ea 1c       	adc	r14, r10
    1468:	fb 1c       	adc	r15, r11
    146a:	e0 91 4c 35 	lds	r30, 0x354C	; 0x80354c <pxCurrentTCB>
    146e:	f0 91 4d 35 	lds	r31, 0x354D	; 0x80354d <pxCurrentTCB+0x1>
    1472:	c2 82       	std	Z+2, r12	; 0x02
    1474:	d3 82       	std	Z+3, r13	; 0x03
    1476:	e4 82       	std	Z+4, r14	; 0x04
    1478:	f5 82       	std	Z+5, r15	; 0x05
    147a:	c8 14       	cp	r12, r8
    147c:	d9 04       	cpc	r13, r9
    147e:	ea 04       	cpc	r14, r10
    1480:	fb 04       	cpc	r15, r11
    1482:	68 f4       	brcc	.+26     	; 0x149e <prvAddCurrentTaskToDelayedList+0x98>
    1484:	60 91 4c 35 	lds	r22, 0x354C	; 0x80354c <pxCurrentTCB>
    1488:	70 91 4d 35 	lds	r23, 0x354D	; 0x80354d <pxCurrentTCB+0x1>
    148c:	80 91 06 35 	lds	r24, 0x3506	; 0x803506 <pxOverflowDelayedTaskList>
    1490:	90 91 07 35 	lds	r25, 0x3507	; 0x803507 <pxOverflowDelayedTaskList+0x1>
    1494:	6e 5f       	subi	r22, 0xFE	; 254
    1496:	7f 4f       	sbci	r23, 0xFF	; 255
    1498:	0e 94 b5 03 	call	0x76a	; 0x76a <vListInsert>
    149c:	21 c0       	rjmp	.+66     	; 0x14e0 <prvAddCurrentTaskToDelayedList+0xda>
    149e:	60 91 4c 35 	lds	r22, 0x354C	; 0x80354c <pxCurrentTCB>
    14a2:	70 91 4d 35 	lds	r23, 0x354D	; 0x80354d <pxCurrentTCB+0x1>
    14a6:	80 91 08 35 	lds	r24, 0x3508	; 0x803508 <pxDelayedTaskList>
    14aa:	90 91 09 35 	lds	r25, 0x3509	; 0x803509 <pxDelayedTaskList+0x1>
    14ae:	6e 5f       	subi	r22, 0xFE	; 254
    14b0:	7f 4f       	sbci	r23, 0xFF	; 255
    14b2:	0e 94 b5 03 	call	0x76a	; 0x76a <vListInsert>
    14b6:	80 91 e1 34 	lds	r24, 0x34E1	; 0x8034e1 <xNextTaskUnblockTime>
    14ba:	90 91 e2 34 	lds	r25, 0x34E2	; 0x8034e2 <xNextTaskUnblockTime+0x1>
    14be:	a0 91 e3 34 	lds	r26, 0x34E3	; 0x8034e3 <xNextTaskUnblockTime+0x2>
    14c2:	b0 91 e4 34 	lds	r27, 0x34E4	; 0x8034e4 <xNextTaskUnblockTime+0x3>
    14c6:	c8 16       	cp	r12, r24
    14c8:	d9 06       	cpc	r13, r25
    14ca:	ea 06       	cpc	r14, r26
    14cc:	fb 06       	cpc	r15, r27
    14ce:	40 f4       	brcc	.+16     	; 0x14e0 <prvAddCurrentTaskToDelayedList+0xda>
    14d0:	c0 92 e1 34 	sts	0x34E1, r12	; 0x8034e1 <xNextTaskUnblockTime>
    14d4:	d0 92 e2 34 	sts	0x34E2, r13	; 0x8034e2 <xNextTaskUnblockTime+0x1>
    14d8:	e0 92 e3 34 	sts	0x34E3, r14	; 0x8034e3 <xNextTaskUnblockTime+0x2>
    14dc:	f0 92 e4 34 	sts	0x34E4, r15	; 0x8034e4 <xNextTaskUnblockTime+0x3>
    14e0:	cf 91       	pop	r28
    14e2:	ff 90       	pop	r15
    14e4:	ef 90       	pop	r14
    14e6:	df 90       	pop	r13
    14e8:	cf 90       	pop	r12
    14ea:	bf 90       	pop	r11
    14ec:	af 90       	pop	r10
    14ee:	9f 90       	pop	r9
    14f0:	8f 90       	pop	r8
    14f2:	08 95       	ret

000014f4 <prvIdleTask>:
    14f4:	80 91 20 35 	lds	r24, 0x3520	; 0x803520 <pxReadyTasksLists>
    14f8:	82 30       	cpi	r24, 0x02	; 2
    14fa:	10 f0       	brcs	.+4      	; 0x1500 <prvIdleTask+0xc>
    14fc:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <vPortYield>
    1500:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <vApplicationIdleHook>
    1504:	f7 cf       	rjmp	.-18     	; 0x14f4 <prvIdleTask>

00001506 <xTaskCreate>:
    1506:	2f 92       	push	r2
    1508:	3f 92       	push	r3
    150a:	4f 92       	push	r4
    150c:	5f 92       	push	r5
    150e:	6f 92       	push	r6
    1510:	7f 92       	push	r7
    1512:	8f 92       	push	r8
    1514:	9f 92       	push	r9
    1516:	af 92       	push	r10
    1518:	bf 92       	push	r11
    151a:	cf 92       	push	r12
    151c:	df 92       	push	r13
    151e:	ef 92       	push	r14
    1520:	ff 92       	push	r15
    1522:	0f 93       	push	r16
    1524:	1f 93       	push	r17
    1526:	cf 93       	push	r28
    1528:	df 93       	push	r29
    152a:	3c 01       	movw	r6, r24
    152c:	1b 01       	movw	r2, r22
    152e:	5a 01       	movw	r10, r20
    1530:	29 01       	movw	r4, r18
    1532:	ca 01       	movw	r24, r20
    1534:	0e 94 58 03 	call	0x6b0	; 0x6b0 <pvPortMalloc>
    1538:	6c 01       	movw	r12, r24
    153a:	89 2b       	or	r24, r25
    153c:	71 f0       	breq	.+28     	; 0x155a <xTaskCreate+0x54>
    153e:	8c e2       	ldi	r24, 0x2C	; 44
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	0e 94 58 03 	call	0x6b0	; 0x6b0 <pvPortMalloc>
    1546:	ec 01       	movw	r28, r24
    1548:	89 2b       	or	r24, r25
    154a:	19 f0       	breq	.+6      	; 0x1552 <xTaskCreate+0x4c>
    154c:	cb 8e       	std	Y+27, r12	; 0x1b
    154e:	dc 8e       	std	Y+28, r13	; 0x1c
    1550:	06 c0       	rjmp	.+12     	; 0x155e <xTaskCreate+0x58>
    1552:	c6 01       	movw	r24, r12
    1554:	0e 94 7e 03 	call	0x6fc	; 0x6fc <vPortFree>
    1558:	02 c0       	rjmp	.+4      	; 0x155e <xTaskCreate+0x58>
    155a:	c0 e0       	ldi	r28, 0x00	; 0
    155c:	d0 e0       	ldi	r29, 0x00	; 0
    155e:	20 97       	sbiw	r28, 0x00	; 0
    1560:	91 f0       	breq	.+36     	; 0x1586 <xTaskCreate+0x80>
    1562:	95 01       	movw	r18, r10
    1564:	40 e0       	ldi	r20, 0x00	; 0
    1566:	50 e0       	ldi	r21, 0x00	; 0
    1568:	81 2c       	mov	r8, r1
    156a:	91 2c       	mov	r9, r1
    156c:	5e 01       	movw	r10, r28
    156e:	67 01       	movw	r12, r14
    1570:	e0 2e       	mov	r14, r16
    1572:	82 01       	movw	r16, r4
    1574:	b1 01       	movw	r22, r2
    1576:	c3 01       	movw	r24, r6
    1578:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <prvInitialiseNewTask>
    157c:	ce 01       	movw	r24, r28
    157e:	0e 94 a8 09 	call	0x1350	; 0x1350 <prvAddNewTaskToReadyList>
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	01 c0       	rjmp	.+2      	; 0x1588 <xTaskCreate+0x82>
    1586:	8f ef       	ldi	r24, 0xFF	; 255
    1588:	df 91       	pop	r29
    158a:	cf 91       	pop	r28
    158c:	1f 91       	pop	r17
    158e:	0f 91       	pop	r16
    1590:	ff 90       	pop	r15
    1592:	ef 90       	pop	r14
    1594:	df 90       	pop	r13
    1596:	cf 90       	pop	r12
    1598:	bf 90       	pop	r11
    159a:	af 90       	pop	r10
    159c:	9f 90       	pop	r9
    159e:	8f 90       	pop	r8
    15a0:	7f 90       	pop	r7
    15a2:	6f 90       	pop	r6
    15a4:	5f 90       	pop	r5
    15a6:	4f 90       	pop	r4
    15a8:	3f 90       	pop	r3
    15aa:	2f 90       	pop	r2
    15ac:	08 95       	ret

000015ae <vTaskStartScheduler>:
    15ae:	ef 92       	push	r14
    15b0:	ff 92       	push	r15
    15b2:	0f 93       	push	r16
    15b4:	0f 2e       	mov	r0, r31
    15b6:	ff ed       	ldi	r31, 0xDF	; 223
    15b8:	ef 2e       	mov	r14, r31
    15ba:	f4 e3       	ldi	r31, 0x34	; 52
    15bc:	ff 2e       	mov	r15, r31
    15be:	f0 2d       	mov	r31, r0
    15c0:	00 e0       	ldi	r16, 0x00	; 0
    15c2:	20 e0       	ldi	r18, 0x00	; 0
    15c4:	30 e0       	ldi	r19, 0x00	; 0
    15c6:	48 ec       	ldi	r20, 0xC8	; 200
    15c8:	50 e0       	ldi	r21, 0x00	; 0
    15ca:	60 e0       	ldi	r22, 0x00	; 0
    15cc:	70 e2       	ldi	r23, 0x20	; 32
    15ce:	8a e7       	ldi	r24, 0x7A	; 122
    15d0:	9a e0       	ldi	r25, 0x0A	; 10
    15d2:	0e 94 83 0a 	call	0x1506	; 0x1506 <xTaskCreate>
    15d6:	81 30       	cpi	r24, 0x01	; 1
    15d8:	11 f4       	brne	.+4      	; 0x15de <vTaskStartScheduler+0x30>
    15da:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <xTimerCreateTimerTask>
    15de:	81 30       	cpi	r24, 0x01	; 1
    15e0:	e9 f4       	brne	.+58     	; 0x161c <vTaskStartScheduler+0x6e>
    15e2:	e0 ea       	ldi	r30, 0xA0	; 160
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	82 81       	ldd	r24, Z+2	; 0x02
    15e8:	88 7f       	andi	r24, 0xF8	; 248
    15ea:	82 83       	std	Z+2, r24	; 0x02
    15ec:	8f ef       	ldi	r24, 0xFF	; 255
    15ee:	9f ef       	ldi	r25, 0xFF	; 255
    15f0:	dc 01       	movw	r26, r24
    15f2:	80 93 e1 34 	sts	0x34E1, r24	; 0x8034e1 <xNextTaskUnblockTime>
    15f6:	90 93 e2 34 	sts	0x34E2, r25	; 0x8034e2 <xNextTaskUnblockTime+0x1>
    15fa:	a0 93 e3 34 	sts	0x34E3, r26	; 0x8034e3 <xNextTaskUnblockTime+0x2>
    15fe:	b0 93 e4 34 	sts	0x34E4, r27	; 0x8034e4 <xNextTaskUnblockTime+0x3>
    1602:	81 e0       	ldi	r24, 0x01	; 1
    1604:	80 93 e9 34 	sts	0x34E9, r24	; 0x8034e9 <xSchedulerRunning>
    1608:	10 92 eb 34 	sts	0x34EB, r1	; 0x8034eb <xTickCount>
    160c:	10 92 ec 34 	sts	0x34EC, r1	; 0x8034ec <xTickCount+0x1>
    1610:	10 92 ed 34 	sts	0x34ED, r1	; 0x8034ed <xTickCount+0x2>
    1614:	10 92 ee 34 	sts	0x34EE, r1	; 0x8034ee <xTickCount+0x3>
    1618:	0e 94 b8 04 	call	0x970	; 0x970 <xPortStartScheduler>
    161c:	0f 91       	pop	r16
    161e:	ff 90       	pop	r15
    1620:	ef 90       	pop	r14
    1622:	08 95       	ret

00001624 <vTaskSuspendAll>:
    1624:	80 91 de 34 	lds	r24, 0x34DE	; 0x8034de <uxSchedulerSuspended>
    1628:	8f 5f       	subi	r24, 0xFF	; 255
    162a:	80 93 de 34 	sts	0x34DE, r24	; 0x8034de <uxSchedulerSuspended>
    162e:	08 95       	ret

00001630 <xTaskGetTickCount>:
    1630:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1634:	ff 93       	push	r31
    1636:	f8 7f       	andi	r31, 0xF8	; 248
    1638:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    163c:	60 91 eb 34 	lds	r22, 0x34EB	; 0x8034eb <xTickCount>
    1640:	70 91 ec 34 	lds	r23, 0x34EC	; 0x8034ec <xTickCount+0x1>
    1644:	80 91 ed 34 	lds	r24, 0x34ED	; 0x8034ed <xTickCount+0x2>
    1648:	90 91 ee 34 	lds	r25, 0x34EE	; 0x8034ee <xTickCount+0x3>
    164c:	ff 91       	pop	r31
    164e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1652:	08 95       	ret

00001654 <xTaskIncrementTick>:
    1654:	bf 92       	push	r11
    1656:	cf 92       	push	r12
    1658:	df 92       	push	r13
    165a:	ef 92       	push	r14
    165c:	ff 92       	push	r15
    165e:	0f 93       	push	r16
    1660:	1f 93       	push	r17
    1662:	cf 93       	push	r28
    1664:	df 93       	push	r29
    1666:	80 91 de 34 	lds	r24, 0x34DE	; 0x8034de <uxSchedulerSuspended>
    166a:	81 11       	cpse	r24, r1
    166c:	a9 c0       	rjmp	.+338    	; 0x17c0 <xTaskIncrementTick+0x16c>
    166e:	c0 90 eb 34 	lds	r12, 0x34EB	; 0x8034eb <xTickCount>
    1672:	d0 90 ec 34 	lds	r13, 0x34EC	; 0x8034ec <xTickCount+0x1>
    1676:	e0 90 ed 34 	lds	r14, 0x34ED	; 0x8034ed <xTickCount+0x2>
    167a:	f0 90 ee 34 	lds	r15, 0x34EE	; 0x8034ee <xTickCount+0x3>
    167e:	2f ef       	ldi	r18, 0xFF	; 255
    1680:	c2 1a       	sub	r12, r18
    1682:	d2 0a       	sbc	r13, r18
    1684:	e2 0a       	sbc	r14, r18
    1686:	f2 0a       	sbc	r15, r18
    1688:	c0 92 eb 34 	sts	0x34EB, r12	; 0x8034eb <xTickCount>
    168c:	d0 92 ec 34 	sts	0x34EC, r13	; 0x8034ec <xTickCount+0x1>
    1690:	e0 92 ed 34 	sts	0x34ED, r14	; 0x8034ed <xTickCount+0x2>
    1694:	f0 92 ee 34 	sts	0x34EE, r15	; 0x8034ee <xTickCount+0x3>
    1698:	c1 14       	cp	r12, r1
    169a:	d1 04       	cpc	r13, r1
    169c:	e1 04       	cpc	r14, r1
    169e:	f1 04       	cpc	r15, r1
    16a0:	b9 f4       	brne	.+46     	; 0x16d0 <xTaskIncrementTick+0x7c>
    16a2:	80 91 08 35 	lds	r24, 0x3508	; 0x803508 <pxDelayedTaskList>
    16a6:	90 91 09 35 	lds	r25, 0x3509	; 0x803509 <pxDelayedTaskList+0x1>
    16aa:	20 91 06 35 	lds	r18, 0x3506	; 0x803506 <pxOverflowDelayedTaskList>
    16ae:	30 91 07 35 	lds	r19, 0x3507	; 0x803507 <pxOverflowDelayedTaskList+0x1>
    16b2:	20 93 08 35 	sts	0x3508, r18	; 0x803508 <pxDelayedTaskList>
    16b6:	30 93 09 35 	sts	0x3509, r19	; 0x803509 <pxDelayedTaskList+0x1>
    16ba:	80 93 06 35 	sts	0x3506, r24	; 0x803506 <pxOverflowDelayedTaskList>
    16be:	90 93 07 35 	sts	0x3507, r25	; 0x803507 <pxOverflowDelayedTaskList+0x1>
    16c2:	80 91 e6 34 	lds	r24, 0x34E6	; 0x8034e6 <xNumOfOverflows>
    16c6:	8f 5f       	subi	r24, 0xFF	; 255
    16c8:	80 93 e6 34 	sts	0x34E6, r24	; 0x8034e6 <xNumOfOverflows>
    16cc:	0e 94 cf 08 	call	0x119e	; 0x119e <prvResetNextTaskUnblockTime>
    16d0:	80 91 e1 34 	lds	r24, 0x34E1	; 0x8034e1 <xNextTaskUnblockTime>
    16d4:	90 91 e2 34 	lds	r25, 0x34E2	; 0x8034e2 <xNextTaskUnblockTime+0x1>
    16d8:	a0 91 e3 34 	lds	r26, 0x34E3	; 0x8034e3 <xNextTaskUnblockTime+0x2>
    16dc:	b0 91 e4 34 	lds	r27, 0x34E4	; 0x8034e4 <xNextTaskUnblockTime+0x3>
    16e0:	c8 16       	cp	r12, r24
    16e2:	d9 06       	cpc	r13, r25
    16e4:	ea 06       	cpc	r14, r26
    16e6:	fb 06       	cpc	r15, r27
    16e8:	28 f4       	brcc	.+10     	; 0x16f4 <xTaskIncrementTick+0xa0>
    16ea:	b1 2c       	mov	r11, r1
    16ec:	5a c0       	rjmp	.+180    	; 0x17a2 <xTaskIncrementTick+0x14e>
    16ee:	bb 24       	eor	r11, r11
    16f0:	b3 94       	inc	r11
    16f2:	01 c0       	rjmp	.+2      	; 0x16f6 <xTaskIncrementTick+0xa2>
    16f4:	b1 2c       	mov	r11, r1
    16f6:	e0 91 08 35 	lds	r30, 0x3508	; 0x803508 <pxDelayedTaskList>
    16fa:	f0 91 09 35 	lds	r31, 0x3509	; 0x803509 <pxDelayedTaskList+0x1>
    16fe:	80 81       	ld	r24, Z
    1700:	81 11       	cpse	r24, r1
    1702:	0c c0       	rjmp	.+24     	; 0x171c <xTaskIncrementTick+0xc8>
    1704:	8f ef       	ldi	r24, 0xFF	; 255
    1706:	9f ef       	ldi	r25, 0xFF	; 255
    1708:	dc 01       	movw	r26, r24
    170a:	80 93 e1 34 	sts	0x34E1, r24	; 0x8034e1 <xNextTaskUnblockTime>
    170e:	90 93 e2 34 	sts	0x34E2, r25	; 0x8034e2 <xNextTaskUnblockTime+0x1>
    1712:	a0 93 e3 34 	sts	0x34E3, r26	; 0x8034e3 <xNextTaskUnblockTime+0x2>
    1716:	b0 93 e4 34 	sts	0x34E4, r27	; 0x8034e4 <xNextTaskUnblockTime+0x3>
    171a:	43 c0       	rjmp	.+134    	; 0x17a2 <xTaskIncrementTick+0x14e>
    171c:	e0 91 08 35 	lds	r30, 0x3508	; 0x803508 <pxDelayedTaskList>
    1720:	f0 91 09 35 	lds	r31, 0x3509	; 0x803509 <pxDelayedTaskList+0x1>
    1724:	07 80       	ldd	r0, Z+7	; 0x07
    1726:	f0 85       	ldd	r31, Z+8	; 0x08
    1728:	e0 2d       	mov	r30, r0
    172a:	c0 85       	ldd	r28, Z+8	; 0x08
    172c:	d1 85       	ldd	r29, Z+9	; 0x09
    172e:	8a 81       	ldd	r24, Y+2	; 0x02
    1730:	9b 81       	ldd	r25, Y+3	; 0x03
    1732:	ac 81       	ldd	r26, Y+4	; 0x04
    1734:	bd 81       	ldd	r27, Y+5	; 0x05
    1736:	c8 16       	cp	r12, r24
    1738:	d9 06       	cpc	r13, r25
    173a:	ea 06       	cpc	r14, r26
    173c:	fb 06       	cpc	r15, r27
    173e:	48 f4       	brcc	.+18     	; 0x1752 <xTaskIncrementTick+0xfe>
    1740:	80 93 e1 34 	sts	0x34E1, r24	; 0x8034e1 <xNextTaskUnblockTime>
    1744:	90 93 e2 34 	sts	0x34E2, r25	; 0x8034e2 <xNextTaskUnblockTime+0x1>
    1748:	a0 93 e3 34 	sts	0x34E3, r26	; 0x8034e3 <xNextTaskUnblockTime+0x2>
    174c:	b0 93 e4 34 	sts	0x34E4, r27	; 0x8034e4 <xNextTaskUnblockTime+0x3>
    1750:	28 c0       	rjmp	.+80     	; 0x17a2 <xTaskIncrementTick+0x14e>
    1752:	8e 01       	movw	r16, r28
    1754:	0e 5f       	subi	r16, 0xFE	; 254
    1756:	1f 4f       	sbci	r17, 0xFF	; 255
    1758:	c8 01       	movw	r24, r16
    175a:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <uxListRemove>
    175e:	88 8d       	ldd	r24, Y+24	; 0x18
    1760:	99 8d       	ldd	r25, Y+25	; 0x19
    1762:	89 2b       	or	r24, r25
    1764:	21 f0       	breq	.+8      	; 0x176e <xTaskIncrementTick+0x11a>
    1766:	ce 01       	movw	r24, r28
    1768:	0e 96       	adiw	r24, 0x0e	; 14
    176a:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <uxListRemove>
    176e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1770:	90 91 ea 34 	lds	r25, 0x34EA	; 0x8034ea <uxTopReadyPriority>
    1774:	98 17       	cp	r25, r24
    1776:	10 f4       	brcc	.+4      	; 0x177c <xTaskIncrementTick+0x128>
    1778:	80 93 ea 34 	sts	0x34EA, r24	; 0x8034ea <uxTopReadyPriority>
    177c:	2b e0       	ldi	r18, 0x0B	; 11
    177e:	82 9f       	mul	r24, r18
    1780:	c0 01       	movw	r24, r0
    1782:	11 24       	eor	r1, r1
    1784:	b8 01       	movw	r22, r16
    1786:	80 5e       	subi	r24, 0xE0	; 224
    1788:	9a 4c       	sbci	r25, 0xCA	; 202
    178a:	0e 94 94 03 	call	0x728	; 0x728 <vListInsertEnd>
    178e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1790:	e0 91 4c 35 	lds	r30, 0x354C	; 0x80354c <pxCurrentTCB>
    1794:	f0 91 4d 35 	lds	r31, 0x354D	; 0x80354d <pxCurrentTCB+0x1>
    1798:	82 8d       	ldd	r24, Z+26	; 0x1a
    179a:	98 17       	cp	r25, r24
    179c:	08 f0       	brcs	.+2      	; 0x17a0 <xTaskIncrementTick+0x14c>
    179e:	a7 cf       	rjmp	.-178    	; 0x16ee <xTaskIncrementTick+0x9a>
    17a0:	aa cf       	rjmp	.-172    	; 0x16f6 <xTaskIncrementTick+0xa2>
    17a2:	e0 91 4c 35 	lds	r30, 0x354C	; 0x80354c <pxCurrentTCB>
    17a6:	f0 91 4d 35 	lds	r31, 0x354D	; 0x80354d <pxCurrentTCB+0x1>
    17aa:	e2 8d       	ldd	r30, Z+26	; 0x1a
    17ac:	8b e0       	ldi	r24, 0x0B	; 11
    17ae:	e8 9f       	mul	r30, r24
    17b0:	f0 01       	movw	r30, r0
    17b2:	11 24       	eor	r1, r1
    17b4:	e0 5e       	subi	r30, 0xE0	; 224
    17b6:	fa 4c       	sbci	r31, 0xCA	; 202
    17b8:	80 81       	ld	r24, Z
    17ba:	82 30       	cpi	r24, 0x02	; 2
    17bc:	40 f4       	brcc	.+16     	; 0x17ce <xTaskIncrementTick+0x17a>
    17be:	09 c0       	rjmp	.+18     	; 0x17d2 <xTaskIncrementTick+0x17e>
    17c0:	80 91 e8 34 	lds	r24, 0x34E8	; 0x8034e8 <uxPendedTicks>
    17c4:	8f 5f       	subi	r24, 0xFF	; 255
    17c6:	80 93 e8 34 	sts	0x34E8, r24	; 0x8034e8 <uxPendedTicks>
    17ca:	b1 2c       	mov	r11, r1
    17cc:	02 c0       	rjmp	.+4      	; 0x17d2 <xTaskIncrementTick+0x17e>
    17ce:	bb 24       	eor	r11, r11
    17d0:	b3 94       	inc	r11
    17d2:	80 91 e7 34 	lds	r24, 0x34E7	; 0x8034e7 <xYieldPending>
    17d6:	88 23       	and	r24, r24
    17d8:	11 f0       	breq	.+4      	; 0x17de <xTaskIncrementTick+0x18a>
    17da:	bb 24       	eor	r11, r11
    17dc:	b3 94       	inc	r11
    17de:	8b 2d       	mov	r24, r11
    17e0:	df 91       	pop	r29
    17e2:	cf 91       	pop	r28
    17e4:	1f 91       	pop	r17
    17e6:	0f 91       	pop	r16
    17e8:	ff 90       	pop	r15
    17ea:	ef 90       	pop	r14
    17ec:	df 90       	pop	r13
    17ee:	cf 90       	pop	r12
    17f0:	bf 90       	pop	r11
    17f2:	08 95       	ret

000017f4 <xTaskResumeAll>:
    17f4:	0f 93       	push	r16
    17f6:	1f 93       	push	r17
    17f8:	cf 93       	push	r28
    17fa:	df 93       	push	r29
    17fc:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1800:	ff 93       	push	r31
    1802:	f8 7f       	andi	r31, 0xF8	; 248
    1804:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1808:	80 91 de 34 	lds	r24, 0x34DE	; 0x8034de <uxSchedulerSuspended>
    180c:	81 50       	subi	r24, 0x01	; 1
    180e:	80 93 de 34 	sts	0x34DE, r24	; 0x8034de <uxSchedulerSuspended>
    1812:	80 91 de 34 	lds	r24, 0x34DE	; 0x8034de <uxSchedulerSuspended>
    1816:	81 11       	cpse	r24, r1
    1818:	52 c0       	rjmp	.+164    	; 0x18be <xTaskResumeAll+0xca>
    181a:	80 91 ef 34 	lds	r24, 0x34EF	; 0x8034ef <uxCurrentNumberOfTasks>
    181e:	81 11       	cpse	r24, r1
    1820:	2d c0       	rjmp	.+90     	; 0x187c <xTaskResumeAll+0x88>
    1822:	50 c0       	rjmp	.+160    	; 0x18c4 <xTaskResumeAll+0xd0>
    1824:	e0 91 02 35 	lds	r30, 0x3502	; 0x803502 <xPendingReadyList+0x7>
    1828:	f0 91 03 35 	lds	r31, 0x3503	; 0x803503 <xPendingReadyList+0x8>
    182c:	c0 85       	ldd	r28, Z+8	; 0x08
    182e:	d1 85       	ldd	r29, Z+9	; 0x09
    1830:	ce 01       	movw	r24, r28
    1832:	0e 96       	adiw	r24, 0x0e	; 14
    1834:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <uxListRemove>
    1838:	8e 01       	movw	r16, r28
    183a:	0e 5f       	subi	r16, 0xFE	; 254
    183c:	1f 4f       	sbci	r17, 0xFF	; 255
    183e:	c8 01       	movw	r24, r16
    1840:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <uxListRemove>
    1844:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1846:	90 91 ea 34 	lds	r25, 0x34EA	; 0x8034ea <uxTopReadyPriority>
    184a:	98 17       	cp	r25, r24
    184c:	10 f4       	brcc	.+4      	; 0x1852 <xTaskResumeAll+0x5e>
    184e:	80 93 ea 34 	sts	0x34EA, r24	; 0x8034ea <uxTopReadyPriority>
    1852:	2b e0       	ldi	r18, 0x0B	; 11
    1854:	82 9f       	mul	r24, r18
    1856:	c0 01       	movw	r24, r0
    1858:	11 24       	eor	r1, r1
    185a:	b8 01       	movw	r22, r16
    185c:	80 5e       	subi	r24, 0xE0	; 224
    185e:	9a 4c       	sbci	r25, 0xCA	; 202
    1860:	0e 94 94 03 	call	0x728	; 0x728 <vListInsertEnd>
    1864:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1866:	e0 91 4c 35 	lds	r30, 0x354C	; 0x80354c <pxCurrentTCB>
    186a:	f0 91 4d 35 	lds	r31, 0x354D	; 0x80354d <pxCurrentTCB+0x1>
    186e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1870:	98 17       	cp	r25, r24
    1872:	30 f0       	brcs	.+12     	; 0x1880 <xTaskResumeAll+0x8c>
    1874:	81 e0       	ldi	r24, 0x01	; 1
    1876:	80 93 e7 34 	sts	0x34E7, r24	; 0x8034e7 <xYieldPending>
    187a:	02 c0       	rjmp	.+4      	; 0x1880 <xTaskResumeAll+0x8c>
    187c:	c0 e0       	ldi	r28, 0x00	; 0
    187e:	d0 e0       	ldi	r29, 0x00	; 0
    1880:	80 91 fb 34 	lds	r24, 0x34FB	; 0x8034fb <xPendingReadyList>
    1884:	81 11       	cpse	r24, r1
    1886:	ce cf       	rjmp	.-100    	; 0x1824 <xTaskResumeAll+0x30>
    1888:	cd 2b       	or	r28, r29
    188a:	11 f0       	breq	.+4      	; 0x1890 <xTaskResumeAll+0x9c>
    188c:	0e 94 cf 08 	call	0x119e	; 0x119e <prvResetNextTaskUnblockTime>
    1890:	c0 91 e8 34 	lds	r28, 0x34E8	; 0x8034e8 <uxPendedTicks>
    1894:	cc 23       	and	r28, r28
    1896:	59 f0       	breq	.+22     	; 0x18ae <xTaskResumeAll+0xba>
    1898:	0e 94 2a 0b 	call	0x1654	; 0x1654 <xTaskIncrementTick>
    189c:	88 23       	and	r24, r24
    189e:	19 f0       	breq	.+6      	; 0x18a6 <xTaskResumeAll+0xb2>
    18a0:	81 e0       	ldi	r24, 0x01	; 1
    18a2:	80 93 e7 34 	sts	0x34E7, r24	; 0x8034e7 <xYieldPending>
    18a6:	c1 50       	subi	r28, 0x01	; 1
    18a8:	b9 f7       	brne	.-18     	; 0x1898 <xTaskResumeAll+0xa4>
    18aa:	10 92 e8 34 	sts	0x34E8, r1	; 0x8034e8 <uxPendedTicks>
    18ae:	80 91 e7 34 	lds	r24, 0x34E7	; 0x8034e7 <xYieldPending>
    18b2:	88 23       	and	r24, r24
    18b4:	31 f0       	breq	.+12     	; 0x18c2 <xTaskResumeAll+0xce>
    18b6:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <vPortYield>
    18ba:	81 e0       	ldi	r24, 0x01	; 1
    18bc:	03 c0       	rjmp	.+6      	; 0x18c4 <xTaskResumeAll+0xd0>
    18be:	80 e0       	ldi	r24, 0x00	; 0
    18c0:	01 c0       	rjmp	.+2      	; 0x18c4 <xTaskResumeAll+0xd0>
    18c2:	80 e0       	ldi	r24, 0x00	; 0
    18c4:	ff 91       	pop	r31
    18c6:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    18ca:	df 91       	pop	r29
    18cc:	cf 91       	pop	r28
    18ce:	1f 91       	pop	r17
    18d0:	0f 91       	pop	r16
    18d2:	08 95       	ret

000018d4 <vTaskDelay>:
    18d4:	cf 92       	push	r12
    18d6:	df 92       	push	r13
    18d8:	ef 92       	push	r14
    18da:	ff 92       	push	r15
    18dc:	6b 01       	movw	r12, r22
    18de:	7c 01       	movw	r14, r24
    18e0:	67 2b       	or	r22, r23
    18e2:	68 2b       	or	r22, r24
    18e4:	69 2b       	or	r22, r25
    18e6:	51 f0       	breq	.+20     	; 0x18fc <vTaskDelay+0x28>
    18e8:	0e 94 12 0b 	call	0x1624	; 0x1624 <vTaskSuspendAll>
    18ec:	40 e0       	ldi	r20, 0x00	; 0
    18ee:	c7 01       	movw	r24, r14
    18f0:	b6 01       	movw	r22, r12
    18f2:	0e 94 03 0a 	call	0x1406	; 0x1406 <prvAddCurrentTaskToDelayedList>
    18f6:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <xTaskResumeAll>
    18fa:	01 c0       	rjmp	.+2      	; 0x18fe <vTaskDelay+0x2a>
    18fc:	80 e0       	ldi	r24, 0x00	; 0
    18fe:	81 11       	cpse	r24, r1
    1900:	02 c0       	rjmp	.+4      	; 0x1906 <vTaskDelay+0x32>
    1902:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <vPortYield>
    1906:	ff 90       	pop	r15
    1908:	ef 90       	pop	r14
    190a:	df 90       	pop	r13
    190c:	cf 90       	pop	r12
    190e:	08 95       	ret

00001910 <vTaskSwitchContext>:
    1910:	80 91 de 34 	lds	r24, 0x34DE	; 0x8034de <uxSchedulerSuspended>
    1914:	88 23       	and	r24, r24
    1916:	21 f0       	breq	.+8      	; 0x1920 <vTaskSwitchContext+0x10>
    1918:	81 e0       	ldi	r24, 0x01	; 1
    191a:	80 93 e7 34 	sts	0x34E7, r24	; 0x8034e7 <xYieldPending>
    191e:	08 95       	ret
    1920:	10 92 e7 34 	sts	0x34E7, r1	; 0x8034e7 <xYieldPending>
    1924:	e0 91 4c 35 	lds	r30, 0x354C	; 0x80354c <pxCurrentTCB>
    1928:	f0 91 4d 35 	lds	r31, 0x354D	; 0x80354d <pxCurrentTCB+0x1>
    192c:	03 8c       	ldd	r0, Z+27	; 0x1b
    192e:	f4 8d       	ldd	r31, Z+28	; 0x1c
    1930:	e0 2d       	mov	r30, r0
    1932:	80 81       	ld	r24, Z
    1934:	91 81       	ldd	r25, Z+1	; 0x01
    1936:	a2 81       	ldd	r26, Z+2	; 0x02
    1938:	b3 81       	ldd	r27, Z+3	; 0x03
    193a:	85 3a       	cpi	r24, 0xA5	; 165
    193c:	95 4a       	sbci	r25, 0xA5	; 165
    193e:	a5 4a       	sbci	r26, 0xA5	; 165
    1940:	b5 4a       	sbci	r27, 0xA5	; 165
    1942:	d9 f4       	brne	.+54     	; 0x197a <vTaskSwitchContext+0x6a>
    1944:	84 81       	ldd	r24, Z+4	; 0x04
    1946:	95 81       	ldd	r25, Z+5	; 0x05
    1948:	a6 81       	ldd	r26, Z+6	; 0x06
    194a:	b7 81       	ldd	r27, Z+7	; 0x07
    194c:	85 3a       	cpi	r24, 0xA5	; 165
    194e:	95 4a       	sbci	r25, 0xA5	; 165
    1950:	a5 4a       	sbci	r26, 0xA5	; 165
    1952:	b5 4a       	sbci	r27, 0xA5	; 165
    1954:	91 f4       	brne	.+36     	; 0x197a <vTaskSwitchContext+0x6a>
    1956:	80 85       	ldd	r24, Z+8	; 0x08
    1958:	91 85       	ldd	r25, Z+9	; 0x09
    195a:	a2 85       	ldd	r26, Z+10	; 0x0a
    195c:	b3 85       	ldd	r27, Z+11	; 0x0b
    195e:	85 3a       	cpi	r24, 0xA5	; 165
    1960:	95 4a       	sbci	r25, 0xA5	; 165
    1962:	a5 4a       	sbci	r26, 0xA5	; 165
    1964:	b5 4a       	sbci	r27, 0xA5	; 165
    1966:	49 f4       	brne	.+18     	; 0x197a <vTaskSwitchContext+0x6a>
    1968:	84 85       	ldd	r24, Z+12	; 0x0c
    196a:	95 85       	ldd	r25, Z+13	; 0x0d
    196c:	a6 85       	ldd	r26, Z+14	; 0x0e
    196e:	b7 85       	ldd	r27, Z+15	; 0x0f
    1970:	85 3a       	cpi	r24, 0xA5	; 165
    1972:	95 4a       	sbci	r25, 0xA5	; 165
    1974:	a5 4a       	sbci	r26, 0xA5	; 165
    1976:	b5 4a       	sbci	r27, 0xA5	; 165
    1978:	61 f0       	breq	.+24     	; 0x1992 <vTaskSwitchContext+0x82>
    197a:	60 91 4c 35 	lds	r22, 0x354C	; 0x80354c <pxCurrentTCB>
    197e:	70 91 4d 35 	lds	r23, 0x354D	; 0x80354d <pxCurrentTCB+0x1>
    1982:	63 5e       	subi	r22, 0xE3	; 227
    1984:	7f 4f       	sbci	r23, 0xFF	; 255
    1986:	80 91 4c 35 	lds	r24, 0x354C	; 0x80354c <pxCurrentTCB>
    198a:	90 91 4d 35 	lds	r25, 0x354D	; 0x80354d <pxCurrentTCB+0x1>
    198e:	0e 94 b8 01 	call	0x370	; 0x370 <vApplicationStackOverflowHook>
    1992:	80 91 ea 34 	lds	r24, 0x34EA	; 0x8034ea <uxTopReadyPriority>
    1996:	01 c0       	rjmp	.+2      	; 0x199a <vTaskSwitchContext+0x8a>
    1998:	81 50       	subi	r24, 0x01	; 1
    199a:	28 2f       	mov	r18, r24
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	9b e0       	ldi	r25, 0x0B	; 11
    19a0:	92 9f       	mul	r25, r18
    19a2:	f0 01       	movw	r30, r0
    19a4:	93 9f       	mul	r25, r19
    19a6:	f0 0d       	add	r31, r0
    19a8:	11 24       	eor	r1, r1
    19aa:	e0 5e       	subi	r30, 0xE0	; 224
    19ac:	fa 4c       	sbci	r31, 0xCA	; 202
    19ae:	90 81       	ld	r25, Z
    19b0:	99 23       	and	r25, r25
    19b2:	91 f3       	breq	.-28     	; 0x1998 <vTaskSwitchContext+0x88>
    19b4:	9b e0       	ldi	r25, 0x0B	; 11
    19b6:	92 9f       	mul	r25, r18
    19b8:	a0 01       	movw	r20, r0
    19ba:	93 9f       	mul	r25, r19
    19bc:	50 0d       	add	r21, r0
    19be:	11 24       	eor	r1, r1
    19c0:	df 01       	movw	r26, r30
    19c2:	01 80       	ldd	r0, Z+1	; 0x01
    19c4:	f2 81       	ldd	r31, Z+2	; 0x02
    19c6:	e0 2d       	mov	r30, r0
    19c8:	04 80       	ldd	r0, Z+4	; 0x04
    19ca:	f5 81       	ldd	r31, Z+5	; 0x05
    19cc:	e0 2d       	mov	r30, r0
    19ce:	11 96       	adiw	r26, 0x01	; 1
    19d0:	ed 93       	st	X+, r30
    19d2:	fc 93       	st	X, r31
    19d4:	12 97       	sbiw	r26, 0x02	; 2
    19d6:	4d 5d       	subi	r20, 0xDD	; 221
    19d8:	5a 4c       	sbci	r21, 0xCA	; 202
    19da:	e4 17       	cp	r30, r20
    19dc:	f5 07       	cpc	r31, r21
    19de:	29 f4       	brne	.+10     	; 0x19ea <vTaskSwitchContext+0xda>
    19e0:	44 81       	ldd	r20, Z+4	; 0x04
    19e2:	55 81       	ldd	r21, Z+5	; 0x05
    19e4:	fd 01       	movw	r30, r26
    19e6:	41 83       	std	Z+1, r20	; 0x01
    19e8:	52 83       	std	Z+2, r21	; 0x02
    19ea:	9b e0       	ldi	r25, 0x0B	; 11
    19ec:	92 9f       	mul	r25, r18
    19ee:	f0 01       	movw	r30, r0
    19f0:	93 9f       	mul	r25, r19
    19f2:	f0 0d       	add	r31, r0
    19f4:	11 24       	eor	r1, r1
    19f6:	e0 5e       	subi	r30, 0xE0	; 224
    19f8:	fa 4c       	sbci	r31, 0xCA	; 202
    19fa:	01 80       	ldd	r0, Z+1	; 0x01
    19fc:	f2 81       	ldd	r31, Z+2	; 0x02
    19fe:	e0 2d       	mov	r30, r0
    1a00:	20 85       	ldd	r18, Z+8	; 0x08
    1a02:	31 85       	ldd	r19, Z+9	; 0x09
    1a04:	20 93 4c 35 	sts	0x354C, r18	; 0x80354c <pxCurrentTCB>
    1a08:	30 93 4d 35 	sts	0x354D, r19	; 0x80354d <pxCurrentTCB+0x1>
    1a0c:	80 93 ea 34 	sts	0x34EA, r24	; 0x8034ea <uxTopReadyPriority>
    1a10:	08 95       	ret

00001a12 <vTaskPlaceOnEventList>:
    1a12:	cf 92       	push	r12
    1a14:	df 92       	push	r13
    1a16:	ef 92       	push	r14
    1a18:	ff 92       	push	r15
    1a1a:	6a 01       	movw	r12, r20
    1a1c:	7b 01       	movw	r14, r22
    1a1e:	60 91 4c 35 	lds	r22, 0x354C	; 0x80354c <pxCurrentTCB>
    1a22:	70 91 4d 35 	lds	r23, 0x354D	; 0x80354d <pxCurrentTCB+0x1>
    1a26:	62 5f       	subi	r22, 0xF2	; 242
    1a28:	7f 4f       	sbci	r23, 0xFF	; 255
    1a2a:	0e 94 b5 03 	call	0x76a	; 0x76a <vListInsert>
    1a2e:	41 e0       	ldi	r20, 0x01	; 1
    1a30:	c7 01       	movw	r24, r14
    1a32:	b6 01       	movw	r22, r12
    1a34:	0e 94 03 0a 	call	0x1406	; 0x1406 <prvAddCurrentTaskToDelayedList>
    1a38:	ff 90       	pop	r15
    1a3a:	ef 90       	pop	r14
    1a3c:	df 90       	pop	r13
    1a3e:	cf 90       	pop	r12
    1a40:	08 95       	ret

00001a42 <vTaskPlaceOnUnorderedEventList>:
    1a42:	cf 92       	push	r12
    1a44:	df 92       	push	r13
    1a46:	ef 92       	push	r14
    1a48:	ff 92       	push	r15
    1a4a:	0f 93       	push	r16
    1a4c:	1f 93       	push	r17
    1a4e:	68 01       	movw	r12, r16
    1a50:	79 01       	movw	r14, r18
    1a52:	e0 91 4c 35 	lds	r30, 0x354C	; 0x80354c <pxCurrentTCB>
    1a56:	f0 91 4d 35 	lds	r31, 0x354D	; 0x80354d <pxCurrentTCB+0x1>
    1a5a:	70 68       	ori	r23, 0x80	; 128
    1a5c:	46 87       	std	Z+14, r20	; 0x0e
    1a5e:	57 87       	std	Z+15, r21	; 0x0f
    1a60:	60 8b       	std	Z+16, r22	; 0x10
    1a62:	71 8b       	std	Z+17, r23	; 0x11
    1a64:	60 91 4c 35 	lds	r22, 0x354C	; 0x80354c <pxCurrentTCB>
    1a68:	70 91 4d 35 	lds	r23, 0x354D	; 0x80354d <pxCurrentTCB+0x1>
    1a6c:	62 5f       	subi	r22, 0xF2	; 242
    1a6e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a70:	0e 94 94 03 	call	0x728	; 0x728 <vListInsertEnd>
    1a74:	41 e0       	ldi	r20, 0x01	; 1
    1a76:	c7 01       	movw	r24, r14
    1a78:	b6 01       	movw	r22, r12
    1a7a:	0e 94 03 0a 	call	0x1406	; 0x1406 <prvAddCurrentTaskToDelayedList>
    1a7e:	1f 91       	pop	r17
    1a80:	0f 91       	pop	r16
    1a82:	ff 90       	pop	r15
    1a84:	ef 90       	pop	r14
    1a86:	df 90       	pop	r13
    1a88:	cf 90       	pop	r12
    1a8a:	08 95       	ret

00001a8c <vTaskPlaceOnEventListRestricted>:
    1a8c:	cf 92       	push	r12
    1a8e:	df 92       	push	r13
    1a90:	ef 92       	push	r14
    1a92:	ff 92       	push	r15
    1a94:	cf 93       	push	r28
    1a96:	6a 01       	movw	r12, r20
    1a98:	7b 01       	movw	r14, r22
    1a9a:	c2 2f       	mov	r28, r18
    1a9c:	60 91 4c 35 	lds	r22, 0x354C	; 0x80354c <pxCurrentTCB>
    1aa0:	70 91 4d 35 	lds	r23, 0x354D	; 0x80354d <pxCurrentTCB+0x1>
    1aa4:	62 5f       	subi	r22, 0xF2	; 242
    1aa6:	7f 4f       	sbci	r23, 0xFF	; 255
    1aa8:	0e 94 94 03 	call	0x728	; 0x728 <vListInsertEnd>
    1aac:	cc 23       	and	r28, r28
    1aae:	21 f0       	breq	.+8      	; 0x1ab8 <vTaskPlaceOnEventListRestricted+0x2c>
    1ab0:	cc 24       	eor	r12, r12
    1ab2:	ca 94       	dec	r12
    1ab4:	dc 2c       	mov	r13, r12
    1ab6:	76 01       	movw	r14, r12
    1ab8:	4c 2f       	mov	r20, r28
    1aba:	c7 01       	movw	r24, r14
    1abc:	b6 01       	movw	r22, r12
    1abe:	0e 94 03 0a 	call	0x1406	; 0x1406 <prvAddCurrentTaskToDelayedList>
    1ac2:	cf 91       	pop	r28
    1ac4:	ff 90       	pop	r15
    1ac6:	ef 90       	pop	r14
    1ac8:	df 90       	pop	r13
    1aca:	cf 90       	pop	r12
    1acc:	08 95       	ret

00001ace <xTaskRemoveFromEventList>:
    1ace:	0f 93       	push	r16
    1ad0:	1f 93       	push	r17
    1ad2:	cf 93       	push	r28
    1ad4:	df 93       	push	r29
    1ad6:	dc 01       	movw	r26, r24
    1ad8:	17 96       	adiw	r26, 0x07	; 7
    1ada:	ed 91       	ld	r30, X+
    1adc:	fc 91       	ld	r31, X
    1ade:	18 97       	sbiw	r26, 0x08	; 8
    1ae0:	c0 85       	ldd	r28, Z+8	; 0x08
    1ae2:	d1 85       	ldd	r29, Z+9	; 0x09
    1ae4:	8e 01       	movw	r16, r28
    1ae6:	02 5f       	subi	r16, 0xF2	; 242
    1ae8:	1f 4f       	sbci	r17, 0xFF	; 255
    1aea:	c8 01       	movw	r24, r16
    1aec:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <uxListRemove>
    1af0:	80 91 de 34 	lds	r24, 0x34DE	; 0x8034de <uxSchedulerSuspended>
    1af4:	81 11       	cpse	r24, r1
    1af6:	16 c0       	rjmp	.+44     	; 0x1b24 <xTaskRemoveFromEventList+0x56>
    1af8:	0c 50       	subi	r16, 0x0C	; 12
    1afa:	11 09       	sbc	r17, r1
    1afc:	c8 01       	movw	r24, r16
    1afe:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <uxListRemove>
    1b02:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1b04:	90 91 ea 34 	lds	r25, 0x34EA	; 0x8034ea <uxTopReadyPriority>
    1b08:	98 17       	cp	r25, r24
    1b0a:	10 f4       	brcc	.+4      	; 0x1b10 <xTaskRemoveFromEventList+0x42>
    1b0c:	80 93 ea 34 	sts	0x34EA, r24	; 0x8034ea <uxTopReadyPriority>
    1b10:	bb e0       	ldi	r27, 0x0B	; 11
    1b12:	8b 9f       	mul	r24, r27
    1b14:	c0 01       	movw	r24, r0
    1b16:	11 24       	eor	r1, r1
    1b18:	b8 01       	movw	r22, r16
    1b1a:	80 5e       	subi	r24, 0xE0	; 224
    1b1c:	9a 4c       	sbci	r25, 0xCA	; 202
    1b1e:	0e 94 94 03 	call	0x728	; 0x728 <vListInsertEnd>
    1b22:	05 c0       	rjmp	.+10     	; 0x1b2e <xTaskRemoveFromEventList+0x60>
    1b24:	b8 01       	movw	r22, r16
    1b26:	8b ef       	ldi	r24, 0xFB	; 251
    1b28:	94 e3       	ldi	r25, 0x34	; 52
    1b2a:	0e 94 94 03 	call	0x728	; 0x728 <vListInsertEnd>
    1b2e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1b30:	e0 91 4c 35 	lds	r30, 0x354C	; 0x80354c <pxCurrentTCB>
    1b34:	f0 91 4d 35 	lds	r31, 0x354D	; 0x80354d <pxCurrentTCB+0x1>
    1b38:	82 8d       	ldd	r24, Z+26	; 0x1a
    1b3a:	89 17       	cp	r24, r25
    1b3c:	20 f4       	brcc	.+8      	; 0x1b46 <xTaskRemoveFromEventList+0x78>
    1b3e:	81 e0       	ldi	r24, 0x01	; 1
    1b40:	80 93 e7 34 	sts	0x34E7, r24	; 0x8034e7 <xYieldPending>
    1b44:	01 c0       	rjmp	.+2      	; 0x1b48 <xTaskRemoveFromEventList+0x7a>
    1b46:	80 e0       	ldi	r24, 0x00	; 0
    1b48:	df 91       	pop	r29
    1b4a:	cf 91       	pop	r28
    1b4c:	1f 91       	pop	r17
    1b4e:	0f 91       	pop	r16
    1b50:	08 95       	ret

00001b52 <vTaskRemoveFromUnorderedEventList>:
    1b52:	0f 93       	push	r16
    1b54:	1f 93       	push	r17
    1b56:	cf 93       	push	r28
    1b58:	df 93       	push	r29
    1b5a:	70 68       	ori	r23, 0x80	; 128
    1b5c:	fc 01       	movw	r30, r24
    1b5e:	40 83       	st	Z, r20
    1b60:	51 83       	std	Z+1, r21	; 0x01
    1b62:	62 83       	std	Z+2, r22	; 0x02
    1b64:	73 83       	std	Z+3, r23	; 0x03
    1b66:	c0 85       	ldd	r28, Z+8	; 0x08
    1b68:	d1 85       	ldd	r29, Z+9	; 0x09
    1b6a:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <uxListRemove>
    1b6e:	8e 01       	movw	r16, r28
    1b70:	0e 5f       	subi	r16, 0xFE	; 254
    1b72:	1f 4f       	sbci	r17, 0xFF	; 255
    1b74:	c8 01       	movw	r24, r16
    1b76:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <uxListRemove>
    1b7a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1b7c:	90 91 ea 34 	lds	r25, 0x34EA	; 0x8034ea <uxTopReadyPriority>
    1b80:	98 17       	cp	r25, r24
    1b82:	10 f4       	brcc	.+4      	; 0x1b88 <vTaskRemoveFromUnorderedEventList+0x36>
    1b84:	80 93 ea 34 	sts	0x34EA, r24	; 0x8034ea <uxTopReadyPriority>
    1b88:	fb e0       	ldi	r31, 0x0B	; 11
    1b8a:	8f 9f       	mul	r24, r31
    1b8c:	c0 01       	movw	r24, r0
    1b8e:	11 24       	eor	r1, r1
    1b90:	b8 01       	movw	r22, r16
    1b92:	80 5e       	subi	r24, 0xE0	; 224
    1b94:	9a 4c       	sbci	r25, 0xCA	; 202
    1b96:	0e 94 94 03 	call	0x728	; 0x728 <vListInsertEnd>
    1b9a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1b9c:	e0 91 4c 35 	lds	r30, 0x354C	; 0x80354c <pxCurrentTCB>
    1ba0:	f0 91 4d 35 	lds	r31, 0x354D	; 0x80354d <pxCurrentTCB+0x1>
    1ba4:	82 8d       	ldd	r24, Z+26	; 0x1a
    1ba6:	89 17       	cp	r24, r25
    1ba8:	18 f4       	brcc	.+6      	; 0x1bb0 <vTaskRemoveFromUnorderedEventList+0x5e>
    1baa:	81 e0       	ldi	r24, 0x01	; 1
    1bac:	80 93 e7 34 	sts	0x34E7, r24	; 0x8034e7 <xYieldPending>
    1bb0:	df 91       	pop	r29
    1bb2:	cf 91       	pop	r28
    1bb4:	1f 91       	pop	r17
    1bb6:	0f 91       	pop	r16
    1bb8:	08 95       	ret

00001bba <vTaskInternalSetTimeOutState>:
    1bba:	20 91 e6 34 	lds	r18, 0x34E6	; 0x8034e6 <xNumOfOverflows>
    1bbe:	fc 01       	movw	r30, r24
    1bc0:	20 83       	st	Z, r18
    1bc2:	40 91 eb 34 	lds	r20, 0x34EB	; 0x8034eb <xTickCount>
    1bc6:	50 91 ec 34 	lds	r21, 0x34EC	; 0x8034ec <xTickCount+0x1>
    1bca:	60 91 ed 34 	lds	r22, 0x34ED	; 0x8034ed <xTickCount+0x2>
    1bce:	70 91 ee 34 	lds	r23, 0x34EE	; 0x8034ee <xTickCount+0x3>
    1bd2:	41 83       	std	Z+1, r20	; 0x01
    1bd4:	52 83       	std	Z+2, r21	; 0x02
    1bd6:	63 83       	std	Z+3, r22	; 0x03
    1bd8:	74 83       	std	Z+4, r23	; 0x04
    1bda:	08 95       	ret

00001bdc <xTaskCheckForTimeOut>:
    1bdc:	8f 92       	push	r8
    1bde:	9f 92       	push	r9
    1be0:	af 92       	push	r10
    1be2:	bf 92       	push	r11
    1be4:	cf 92       	push	r12
    1be6:	df 92       	push	r13
    1be8:	ef 92       	push	r14
    1bea:	ff 92       	push	r15
    1bec:	0f 93       	push	r16
    1bee:	1f 93       	push	r17
    1bf0:	cf 93       	push	r28
    1bf2:	df 93       	push	r29
    1bf4:	db 01       	movw	r26, r22
    1bf6:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1bfa:	ff 93       	push	r31
    1bfc:	f8 7f       	andi	r31, 0xF8	; 248
    1bfe:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1c02:	c0 90 eb 34 	lds	r12, 0x34EB	; 0x8034eb <xTickCount>
    1c06:	d0 90 ec 34 	lds	r13, 0x34EC	; 0x8034ec <xTickCount+0x1>
    1c0a:	e0 90 ed 34 	lds	r14, 0x34ED	; 0x8034ed <xTickCount+0x2>
    1c0e:	f0 90 ee 34 	lds	r15, 0x34EE	; 0x8034ee <xTickCount+0x3>
    1c12:	ec 01       	movw	r28, r24
    1c14:	09 81       	ldd	r16, Y+1	; 0x01
    1c16:	1a 81       	ldd	r17, Y+2	; 0x02
    1c18:	2b 81       	ldd	r18, Y+3	; 0x03
    1c1a:	3c 81       	ldd	r19, Y+4	; 0x04
    1c1c:	46 01       	movw	r8, r12
    1c1e:	57 01       	movw	r10, r14
    1c20:	80 1a       	sub	r8, r16
    1c22:	91 0a       	sbc	r9, r17
    1c24:	a2 0a       	sbc	r10, r18
    1c26:	b3 0a       	sbc	r11, r19
    1c28:	4d 91       	ld	r20, X+
    1c2a:	5d 91       	ld	r21, X+
    1c2c:	6d 91       	ld	r22, X+
    1c2e:	7c 91       	ld	r23, X
    1c30:	13 97       	sbiw	r26, 0x03	; 3
    1c32:	4f 3f       	cpi	r20, 0xFF	; 255
    1c34:	df ef       	ldi	r29, 0xFF	; 255
    1c36:	5d 07       	cpc	r21, r29
    1c38:	6d 07       	cpc	r22, r29
    1c3a:	7d 07       	cpc	r23, r29
    1c3c:	21 f1       	breq	.+72     	; 0x1c86 <xTaskCheckForTimeOut+0xaa>
    1c3e:	ec 01       	movw	r28, r24
    1c40:	f8 81       	ld	r31, Y
    1c42:	e0 91 e6 34 	lds	r30, 0x34E6	; 0x8034e6 <xNumOfOverflows>
    1c46:	fe 17       	cp	r31, r30
    1c48:	29 f0       	breq	.+10     	; 0x1c54 <xTaskCheckForTimeOut+0x78>
    1c4a:	c0 16       	cp	r12, r16
    1c4c:	d1 06       	cpc	r13, r17
    1c4e:	e2 06       	cpc	r14, r18
    1c50:	f3 06       	cpc	r15, r19
    1c52:	d8 f4       	brcc	.+54     	; 0x1c8a <xTaskCheckForTimeOut+0xae>
    1c54:	84 16       	cp	r8, r20
    1c56:	95 06       	cpc	r9, r21
    1c58:	a6 06       	cpc	r10, r22
    1c5a:	b7 06       	cpc	r11, r23
    1c5c:	68 f4       	brcc	.+26     	; 0x1c78 <xTaskCheckForTimeOut+0x9c>
    1c5e:	48 19       	sub	r20, r8
    1c60:	59 09       	sbc	r21, r9
    1c62:	6a 09       	sbc	r22, r10
    1c64:	7b 09       	sbc	r23, r11
    1c66:	4d 93       	st	X+, r20
    1c68:	5d 93       	st	X+, r21
    1c6a:	6d 93       	st	X+, r22
    1c6c:	7c 93       	st	X, r23
    1c6e:	13 97       	sbiw	r26, 0x03	; 3
    1c70:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <vTaskInternalSetTimeOutState>
    1c74:	80 e0       	ldi	r24, 0x00	; 0
    1c76:	0a c0       	rjmp	.+20     	; 0x1c8c <xTaskCheckForTimeOut+0xb0>
    1c78:	1d 92       	st	X+, r1
    1c7a:	1d 92       	st	X+, r1
    1c7c:	1d 92       	st	X+, r1
    1c7e:	1c 92       	st	X, r1
    1c80:	13 97       	sbiw	r26, 0x03	; 3
    1c82:	81 e0       	ldi	r24, 0x01	; 1
    1c84:	03 c0       	rjmp	.+6      	; 0x1c8c <xTaskCheckForTimeOut+0xb0>
    1c86:	80 e0       	ldi	r24, 0x00	; 0
    1c88:	01 c0       	rjmp	.+2      	; 0x1c8c <xTaskCheckForTimeOut+0xb0>
    1c8a:	81 e0       	ldi	r24, 0x01	; 1
    1c8c:	ff 91       	pop	r31
    1c8e:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1c92:	df 91       	pop	r29
    1c94:	cf 91       	pop	r28
    1c96:	1f 91       	pop	r17
    1c98:	0f 91       	pop	r16
    1c9a:	ff 90       	pop	r15
    1c9c:	ef 90       	pop	r14
    1c9e:	df 90       	pop	r13
    1ca0:	cf 90       	pop	r12
    1ca2:	bf 90       	pop	r11
    1ca4:	af 90       	pop	r10
    1ca6:	9f 90       	pop	r9
    1ca8:	8f 90       	pop	r8
    1caa:	08 95       	ret

00001cac <vTaskMissedYield>:
    1cac:	81 e0       	ldi	r24, 0x01	; 1
    1cae:	80 93 e7 34 	sts	0x34E7, r24	; 0x8034e7 <xYieldPending>
    1cb2:	08 95       	ret

00001cb4 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    1cb4:	80 91 e9 34 	lds	r24, 0x34E9	; 0x8034e9 <xSchedulerRunning>
    1cb8:	88 23       	and	r24, r24
    1cba:	31 f0       	breq	.+12     	; 0x1cc8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    1cbc:	80 91 de 34 	lds	r24, 0x34DE	; 0x8034de <uxSchedulerSuspended>
    1cc0:	81 11       	cpse	r24, r1
    1cc2:	04 c0       	rjmp	.+8      	; 0x1ccc <xTaskGetSchedulerState+0x18>
			{
				xReturn = taskSCHEDULER_RUNNING;
    1cc4:	82 e0       	ldi	r24, 0x02	; 2
    1cc6:	08 95       	ret
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    1cc8:	81 e0       	ldi	r24, 0x01	; 1
    1cca:	08 95       	ret
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
    1ccc:	80 e0       	ldi	r24, 0x00	; 0
			}
		}

		return xReturn;
	}
    1cce:	08 95       	ret

00001cd0 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
    1cd0:	cf 92       	push	r12
    1cd2:	df 92       	push	r13
    1cd4:	ef 92       	push	r14
    1cd6:	ff 92       	push	r15
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
    1cd8:	e0 91 4c 35 	lds	r30, 0x354C	; 0x80354c <pxCurrentTCB>
    1cdc:	f0 91 4d 35 	lds	r31, 0x354D	; 0x80354d <pxCurrentTCB+0x1>
    1ce0:	66 85       	ldd	r22, Z+14	; 0x0e
    1ce2:	77 85       	ldd	r23, Z+15	; 0x0f
    1ce4:	80 89       	ldd	r24, Z+16	; 0x10
    1ce6:	91 89       	ldd	r25, Z+17	; 0x11

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1ce8:	e0 91 4c 35 	lds	r30, 0x354C	; 0x80354c <pxCurrentTCB>
    1cec:	f0 91 4d 35 	lds	r31, 0x354D	; 0x80354d <pxCurrentTCB+0x1>
    1cf0:	a0 91 4c 35 	lds	r26, 0x354C	; 0x80354c <pxCurrentTCB>
    1cf4:	b0 91 4d 35 	lds	r27, 0x354D	; 0x80354d <pxCurrentTCB+0x1>
    1cf8:	5a 96       	adiw	r26, 0x1a	; 26
    1cfa:	2c 91       	ld	r18, X
    1cfc:	c1 2c       	mov	r12, r1
    1cfe:	d1 2c       	mov	r13, r1
    1d00:	76 01       	movw	r14, r12
    1d02:	68 94       	set
    1d04:	c2 f8       	bld	r12, 2
    1d06:	c2 1a       	sub	r12, r18
    1d08:	d1 08       	sbc	r13, r1
    1d0a:	e1 08       	sbc	r14, r1
    1d0c:	f1 08       	sbc	r15, r1
    1d0e:	c6 86       	std	Z+14, r12	; 0x0e
    1d10:	d7 86       	std	Z+15, r13	; 0x0f
    1d12:	e0 8a       	std	Z+16, r14	; 0x10
    1d14:	f1 8a       	std	Z+17, r15	; 0x11

	return uxReturn;
}
    1d16:	ff 90       	pop	r15
    1d18:	ef 90       	pop	r14
    1d1a:	df 90       	pop	r13
    1d1c:	cf 90       	pop	r12
    1d1e:	08 95       	ret

00001d20 <prvGetNextExpireTime>:

	taskENTER_CRITICAL();
	{
		pxTimer->pvTimerID = pvNewID;
	}
	taskEXIT_CRITICAL();
    1d20:	dc 01       	movw	r26, r24
    1d22:	e0 91 58 35 	lds	r30, 0x3558	; 0x803558 <pxCurrentTimerList>
    1d26:	f0 91 59 35 	lds	r31, 0x3559	; 0x803559 <pxCurrentTimerList+0x1>
    1d2a:	80 81       	ld	r24, Z
    1d2c:	91 e0       	ldi	r25, 0x01	; 1
    1d2e:	81 11       	cpse	r24, r1
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	9c 93       	st	X, r25
    1d34:	91 11       	cpse	r25, r1
    1d36:	08 c0       	rjmp	.+16     	; 0x1d48 <prvGetNextExpireTime+0x28>
    1d38:	07 80       	ldd	r0, Z+7	; 0x07
    1d3a:	f0 85       	ldd	r31, Z+8	; 0x08
    1d3c:	e0 2d       	mov	r30, r0
    1d3e:	60 81       	ld	r22, Z
    1d40:	71 81       	ldd	r23, Z+1	; 0x01
    1d42:	82 81       	ldd	r24, Z+2	; 0x02
    1d44:	93 81       	ldd	r25, Z+3	; 0x03
    1d46:	08 95       	ret
    1d48:	60 e0       	ldi	r22, 0x00	; 0
    1d4a:	70 e0       	ldi	r23, 0x00	; 0
    1d4c:	cb 01       	movw	r24, r22
    1d4e:	08 95       	ret

00001d50 <prvInsertTimerInActiveList>:
    1d50:	cf 92       	push	r12
    1d52:	df 92       	push	r13
    1d54:	ef 92       	push	r14
    1d56:	ff 92       	push	r15
    1d58:	0f 93       	push	r16
    1d5a:	1f 93       	push	r17
    1d5c:	fc 01       	movw	r30, r24
    1d5e:	42 83       	std	Z+2, r20	; 0x02
    1d60:	53 83       	std	Z+3, r21	; 0x03
    1d62:	64 83       	std	Z+4, r22	; 0x04
    1d64:	75 83       	std	Z+5, r23	; 0x05
    1d66:	82 87       	std	Z+10, r24	; 0x0a
    1d68:	93 87       	std	Z+11, r25	; 0x0b
    1d6a:	04 17       	cp	r16, r20
    1d6c:	15 07       	cpc	r17, r21
    1d6e:	26 07       	cpc	r18, r22
    1d70:	37 07       	cpc	r19, r23
    1d72:	c0 f0       	brcs	.+48     	; 0x1da4 <prvInsertTimerInActiveList+0x54>
    1d74:	0c 19       	sub	r16, r12
    1d76:	1d 09       	sbc	r17, r13
    1d78:	2e 09       	sbc	r18, r14
    1d7a:	3f 09       	sbc	r19, r15
    1d7c:	86 85       	ldd	r24, Z+14	; 0x0e
    1d7e:	97 85       	ldd	r25, Z+15	; 0x0f
    1d80:	a0 89       	ldd	r26, Z+16	; 0x10
    1d82:	b1 89       	ldd	r27, Z+17	; 0x11
    1d84:	08 17       	cp	r16, r24
    1d86:	19 07       	cpc	r17, r25
    1d88:	2a 07       	cpc	r18, r26
    1d8a:	3b 07       	cpc	r19, r27
    1d8c:	00 f5       	brcc	.+64     	; 0x1dce <prvInsertTimerInActiveList+0x7e>
    1d8e:	bf 01       	movw	r22, r30
    1d90:	6e 5f       	subi	r22, 0xFE	; 254
    1d92:	7f 4f       	sbci	r23, 0xFF	; 255
    1d94:	80 91 56 35 	lds	r24, 0x3556	; 0x803556 <pxOverflowTimerList>
    1d98:	90 91 57 35 	lds	r25, 0x3557	; 0x803557 <pxOverflowTimerList+0x1>
    1d9c:	0e 94 b5 03 	call	0x76a	; 0x76a <vListInsert>
    1da0:	80 e0       	ldi	r24, 0x00	; 0
    1da2:	18 c0       	rjmp	.+48     	; 0x1dd4 <prvInsertTimerInActiveList+0x84>
    1da4:	0c 15       	cp	r16, r12
    1da6:	1d 05       	cpc	r17, r13
    1da8:	2e 05       	cpc	r18, r14
    1daa:	3f 05       	cpc	r19, r15
    1dac:	28 f4       	brcc	.+10     	; 0x1db8 <prvInsertTimerInActiveList+0x68>
    1dae:	4c 15       	cp	r20, r12
    1db0:	5d 05       	cpc	r21, r13
    1db2:	6e 05       	cpc	r22, r14
    1db4:	7f 05       	cpc	r23, r15
    1db6:	68 f4       	brcc	.+26     	; 0x1dd2 <prvInsertTimerInActiveList+0x82>
    1db8:	bf 01       	movw	r22, r30
    1dba:	6e 5f       	subi	r22, 0xFE	; 254
    1dbc:	7f 4f       	sbci	r23, 0xFF	; 255
    1dbe:	80 91 58 35 	lds	r24, 0x3558	; 0x803558 <pxCurrentTimerList>
    1dc2:	90 91 59 35 	lds	r25, 0x3559	; 0x803559 <pxCurrentTimerList+0x1>
    1dc6:	0e 94 b5 03 	call	0x76a	; 0x76a <vListInsert>
    1dca:	80 e0       	ldi	r24, 0x00	; 0
    1dcc:	03 c0       	rjmp	.+6      	; 0x1dd4 <prvInsertTimerInActiveList+0x84>
    1dce:	81 e0       	ldi	r24, 0x01	; 1
    1dd0:	01 c0       	rjmp	.+2      	; 0x1dd4 <prvInsertTimerInActiveList+0x84>
    1dd2:	81 e0       	ldi	r24, 0x01	; 1
    1dd4:	1f 91       	pop	r17
    1dd6:	0f 91       	pop	r16
    1dd8:	ff 90       	pop	r15
    1dda:	ef 90       	pop	r14
    1ddc:	df 90       	pop	r13
    1dde:	cf 90       	pop	r12
    1de0:	08 95       	ret

00001de2 <prvCheckForValidListAndQueue>:
    1de2:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1de6:	ff 93       	push	r31
    1de8:	f8 7f       	andi	r31, 0xF8	; 248
    1dea:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1dee:	80 91 54 35 	lds	r24, 0x3554	; 0x803554 <xTimerQueue>
    1df2:	90 91 55 35 	lds	r25, 0x3555	; 0x803555 <xTimerQueue+0x1>
    1df6:	89 2b       	or	r24, r25
    1df8:	e9 f4       	brne	.+58     	; 0x1e34 <prvCheckForValidListAndQueue+0x52>
    1dfa:	85 e6       	ldi	r24, 0x65	; 101
    1dfc:	95 e3       	ldi	r25, 0x35	; 53
    1dfe:	0e 94 7f 03 	call	0x6fe	; 0x6fe <vListInitialise>
    1e02:	8a e5       	ldi	r24, 0x5A	; 90
    1e04:	95 e3       	ldi	r25, 0x35	; 53
    1e06:	0e 94 7f 03 	call	0x6fe	; 0x6fe <vListInitialise>
    1e0a:	85 e6       	ldi	r24, 0x65	; 101
    1e0c:	95 e3       	ldi	r25, 0x35	; 53
    1e0e:	80 93 58 35 	sts	0x3558, r24	; 0x803558 <pxCurrentTimerList>
    1e12:	90 93 59 35 	sts	0x3559, r25	; 0x803559 <pxCurrentTimerList+0x1>
    1e16:	8a e5       	ldi	r24, 0x5A	; 90
    1e18:	95 e3       	ldi	r25, 0x35	; 53
    1e1a:	80 93 56 35 	sts	0x3556, r24	; 0x803556 <pxOverflowTimerList>
    1e1e:	90 93 57 35 	sts	0x3557, r25	; 0x803557 <pxOverflowTimerList+0x1>
    1e22:	40 e0       	ldi	r20, 0x00	; 0
    1e24:	69 e0       	ldi	r22, 0x09	; 9
    1e26:	85 e0       	ldi	r24, 0x05	; 5
    1e28:	0e 94 f5 06 	call	0xdea	; 0xdea <xQueueGenericCreate>
    1e2c:	80 93 54 35 	sts	0x3554, r24	; 0x803554 <xTimerQueue>
    1e30:	90 93 55 35 	sts	0x3555, r25	; 0x803555 <xTimerQueue+0x1>
    1e34:	ff 91       	pop	r31
    1e36:	f0 93 a2 00 	sts	0x00A2, r31	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
    1e3a:	08 95       	ret

00001e3c <xTimerCreateTimerTask>:
    1e3c:	ef 92       	push	r14
    1e3e:	ff 92       	push	r15
    1e40:	0f 93       	push	r16
    1e42:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <prvCheckForValidListAndQueue>
    1e46:	80 91 54 35 	lds	r24, 0x3554	; 0x803554 <xTimerQueue>
    1e4a:	90 91 55 35 	lds	r25, 0x3555	; 0x803555 <xTimerQueue+0x1>
    1e4e:	89 2b       	or	r24, r25
    1e50:	91 f0       	breq	.+36     	; 0x1e76 <xTimerCreateTimerTask+0x3a>
    1e52:	0f 2e       	mov	r0, r31
    1e54:	f2 e5       	ldi	r31, 0x52	; 82
    1e56:	ef 2e       	mov	r14, r31
    1e58:	f5 e3       	ldi	r31, 0x35	; 53
    1e5a:	ff 2e       	mov	r15, r31
    1e5c:	f0 2d       	mov	r31, r0
    1e5e:	03 e0       	ldi	r16, 0x03	; 3
    1e60:	20 e0       	ldi	r18, 0x00	; 0
    1e62:	30 e0       	ldi	r19, 0x00	; 0
    1e64:	48 ec       	ldi	r20, 0xC8	; 200
    1e66:	50 e0       	ldi	r21, 0x00	; 0
    1e68:	65 e0       	ldi	r22, 0x05	; 5
    1e6a:	70 e2       	ldi	r23, 0x20	; 32
    1e6c:	8c e8       	ldi	r24, 0x8C	; 140
    1e6e:	91 e1       	ldi	r25, 0x11	; 17
    1e70:	0e 94 83 0a 	call	0x1506	; 0x1506 <xTaskCreate>
    1e74:	01 c0       	rjmp	.+2      	; 0x1e78 <xTimerCreateTimerTask+0x3c>
    1e76:	80 e0       	ldi	r24, 0x00	; 0
    1e78:	0f 91       	pop	r16
    1e7a:	ff 90       	pop	r15
    1e7c:	ef 90       	pop	r14
    1e7e:	08 95       	ret

00001e80 <xTimerGenericCommand>:
    1e80:	8f 92       	push	r8
    1e82:	9f 92       	push	r9
    1e84:	af 92       	push	r10
    1e86:	bf 92       	push	r11
    1e88:	cf 92       	push	r12
    1e8a:	df 92       	push	r13
    1e8c:	ef 92       	push	r14
    1e8e:	ff 92       	push	r15
    1e90:	0f 93       	push	r16
    1e92:	1f 93       	push	r17
    1e94:	cf 93       	push	r28
    1e96:	df 93       	push	r29
    1e98:	cd b7       	in	r28, 0x3d	; 61
    1e9a:	de b7       	in	r29, 0x3e	; 62
    1e9c:	29 97       	sbiw	r28, 0x09	; 9
    1e9e:	cd bf       	out	0x3d, r28	; 61
    1ea0:	de bf       	out	0x3e, r29	; 62
    1ea2:	e0 91 54 35 	lds	r30, 0x3554	; 0x803554 <xTimerQueue>
    1ea6:	f0 91 55 35 	lds	r31, 0x3555	; 0x803555 <xTimerQueue+0x1>
    1eaa:	30 97       	sbiw	r30, 0x00	; 0
    1eac:	89 f1       	breq	.+98     	; 0x1f10 <xTimerGenericCommand+0x90>
    1eae:	69 83       	std	Y+1, r22	; 0x01
    1eb0:	2a 83       	std	Y+2, r18	; 0x02
    1eb2:	3b 83       	std	Y+3, r19	; 0x03
    1eb4:	4c 83       	std	Y+4, r20	; 0x04
    1eb6:	5d 83       	std	Y+5, r21	; 0x05
    1eb8:	8e 83       	std	Y+6, r24	; 0x06
    1eba:	9f 83       	std	Y+7, r25	; 0x07
    1ebc:	66 30       	cpi	r22, 0x06	; 6
    1ebe:	fc f4       	brge	.+62     	; 0x1efe <xTimerGenericCommand+0x7e>
    1ec0:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <xTaskGetSchedulerState>
    1ec4:	82 30       	cpi	r24, 0x02	; 2
    1ec6:	69 f4       	brne	.+26     	; 0x1ee2 <xTimerGenericCommand+0x62>
    1ec8:	00 e0       	ldi	r16, 0x00	; 0
    1eca:	a7 01       	movw	r20, r14
    1ecc:	96 01       	movw	r18, r12
    1ece:	be 01       	movw	r22, r28
    1ed0:	6f 5f       	subi	r22, 0xFF	; 255
    1ed2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ed4:	80 91 54 35 	lds	r24, 0x3554	; 0x803554 <xTimerQueue>
    1ed8:	90 91 55 35 	lds	r25, 0x3555	; 0x803555 <xTimerQueue+0x1>
    1edc:	0e 94 1f 07 	call	0xe3e	; 0xe3e <xQueueGenericSend>
    1ee0:	18 c0       	rjmp	.+48     	; 0x1f12 <xTimerGenericCommand+0x92>
    1ee2:	00 e0       	ldi	r16, 0x00	; 0
    1ee4:	20 e0       	ldi	r18, 0x00	; 0
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	a9 01       	movw	r20, r18
    1eea:	be 01       	movw	r22, r28
    1eec:	6f 5f       	subi	r22, 0xFF	; 255
    1eee:	7f 4f       	sbci	r23, 0xFF	; 255
    1ef0:	80 91 54 35 	lds	r24, 0x3554	; 0x803554 <xTimerQueue>
    1ef4:	90 91 55 35 	lds	r25, 0x3555	; 0x803555 <xTimerQueue+0x1>
    1ef8:	0e 94 1f 07 	call	0xe3e	; 0xe3e <xQueueGenericSend>
    1efc:	0a c0       	rjmp	.+20     	; 0x1f12 <xTimerGenericCommand+0x92>
    1efe:	20 e0       	ldi	r18, 0x00	; 0
    1f00:	a8 01       	movw	r20, r16
    1f02:	be 01       	movw	r22, r28
    1f04:	6f 5f       	subi	r22, 0xFF	; 255
    1f06:	7f 4f       	sbci	r23, 0xFF	; 255
    1f08:	cf 01       	movw	r24, r30
    1f0a:	0e 94 be 07 	call	0xf7c	; 0xf7c <xQueueGenericSendFromISR>
    1f0e:	01 c0       	rjmp	.+2      	; 0x1f12 <xTimerGenericCommand+0x92>
    1f10:	80 e0       	ldi	r24, 0x00	; 0
    1f12:	29 96       	adiw	r28, 0x09	; 9
    1f14:	cd bf       	out	0x3d, r28	; 61
    1f16:	de bf       	out	0x3e, r29	; 62
    1f18:	df 91       	pop	r29
    1f1a:	cf 91       	pop	r28
    1f1c:	1f 91       	pop	r17
    1f1e:	0f 91       	pop	r16
    1f20:	ff 90       	pop	r15
    1f22:	ef 90       	pop	r14
    1f24:	df 90       	pop	r13
    1f26:	cf 90       	pop	r12
    1f28:	bf 90       	pop	r11
    1f2a:	af 90       	pop	r10
    1f2c:	9f 90       	pop	r9
    1f2e:	8f 90       	pop	r8
    1f30:	08 95       	ret

00001f32 <prvSwitchTimerLists>:
    1f32:	8f 92       	push	r8
    1f34:	9f 92       	push	r9
    1f36:	af 92       	push	r10
    1f38:	bf 92       	push	r11
    1f3a:	cf 92       	push	r12
    1f3c:	df 92       	push	r13
    1f3e:	ef 92       	push	r14
    1f40:	ff 92       	push	r15
    1f42:	0f 93       	push	r16
    1f44:	1f 93       	push	r17
    1f46:	cf 93       	push	r28
    1f48:	df 93       	push	r29
    1f4a:	3c c0       	rjmp	.+120    	; 0x1fc4 <prvSwitchTimerLists+0x92>
    1f4c:	07 80       	ldd	r0, Z+7	; 0x07
    1f4e:	f0 85       	ldd	r31, Z+8	; 0x08
    1f50:	e0 2d       	mov	r30, r0
    1f52:	80 80       	ld	r8, Z
    1f54:	91 80       	ldd	r9, Z+1	; 0x01
    1f56:	a2 80       	ldd	r10, Z+2	; 0x02
    1f58:	b3 80       	ldd	r11, Z+3	; 0x03
    1f5a:	c0 85       	ldd	r28, Z+8	; 0x08
    1f5c:	d1 85       	ldd	r29, Z+9	; 0x09
    1f5e:	8e 01       	movw	r16, r28
    1f60:	0e 5f       	subi	r16, 0xFE	; 254
    1f62:	1f 4f       	sbci	r17, 0xFF	; 255
    1f64:	c8 01       	movw	r24, r16
    1f66:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <uxListRemove>
    1f6a:	ed 89       	ldd	r30, Y+21	; 0x15
    1f6c:	fe 89       	ldd	r31, Y+22	; 0x16
    1f6e:	ce 01       	movw	r24, r28
    1f70:	19 95       	eicall
    1f72:	8a 89       	ldd	r24, Y+18	; 0x12
    1f74:	81 30       	cpi	r24, 0x01	; 1
    1f76:	31 f5       	brne	.+76     	; 0x1fc4 <prvSwitchTimerLists+0x92>
    1f78:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f7a:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f7c:	a8 89       	ldd	r26, Y+16	; 0x10
    1f7e:	b9 89       	ldd	r27, Y+17	; 0x11
    1f80:	88 0d       	add	r24, r8
    1f82:	99 1d       	adc	r25, r9
    1f84:	aa 1d       	adc	r26, r10
    1f86:	bb 1d       	adc	r27, r11
    1f88:	88 16       	cp	r8, r24
    1f8a:	99 06       	cpc	r9, r25
    1f8c:	aa 06       	cpc	r10, r26
    1f8e:	bb 06       	cpc	r11, r27
    1f90:	70 f4       	brcc	.+28     	; 0x1fae <prvSwitchTimerLists+0x7c>
    1f92:	8a 83       	std	Y+2, r24	; 0x02
    1f94:	9b 83       	std	Y+3, r25	; 0x03
    1f96:	ac 83       	std	Y+4, r26	; 0x04
    1f98:	bd 83       	std	Y+5, r27	; 0x05
    1f9a:	ca 87       	std	Y+10, r28	; 0x0a
    1f9c:	db 87       	std	Y+11, r29	; 0x0b
    1f9e:	b8 01       	movw	r22, r16
    1fa0:	80 91 58 35 	lds	r24, 0x3558	; 0x803558 <pxCurrentTimerList>
    1fa4:	90 91 59 35 	lds	r25, 0x3559	; 0x803559 <pxCurrentTimerList+0x1>
    1fa8:	0e 94 b5 03 	call	0x76a	; 0x76a <vListInsert>
    1fac:	0b c0       	rjmp	.+22     	; 0x1fc4 <prvSwitchTimerLists+0x92>
    1fae:	c1 2c       	mov	r12, r1
    1fb0:	d1 2c       	mov	r13, r1
    1fb2:	76 01       	movw	r14, r12
    1fb4:	00 e0       	ldi	r16, 0x00	; 0
    1fb6:	10 e0       	ldi	r17, 0x00	; 0
    1fb8:	a5 01       	movw	r20, r10
    1fba:	94 01       	movw	r18, r8
    1fbc:	60 e0       	ldi	r22, 0x00	; 0
    1fbe:	ce 01       	movw	r24, r28
    1fc0:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <xTimerGenericCommand>
    1fc4:	e0 91 58 35 	lds	r30, 0x3558	; 0x803558 <pxCurrentTimerList>
    1fc8:	f0 91 59 35 	lds	r31, 0x3559	; 0x803559 <pxCurrentTimerList+0x1>
    1fcc:	80 81       	ld	r24, Z
    1fce:	81 11       	cpse	r24, r1
    1fd0:	bd cf       	rjmp	.-134    	; 0x1f4c <prvSwitchTimerLists+0x1a>
    1fd2:	80 91 56 35 	lds	r24, 0x3556	; 0x803556 <pxOverflowTimerList>
    1fd6:	90 91 57 35 	lds	r25, 0x3557	; 0x803557 <pxOverflowTimerList+0x1>
    1fda:	80 93 58 35 	sts	0x3558, r24	; 0x803558 <pxCurrentTimerList>
    1fde:	90 93 59 35 	sts	0x3559, r25	; 0x803559 <pxCurrentTimerList+0x1>
    1fe2:	e0 93 56 35 	sts	0x3556, r30	; 0x803556 <pxOverflowTimerList>
    1fe6:	f0 93 57 35 	sts	0x3557, r31	; 0x803557 <pxOverflowTimerList+0x1>
    1fea:	df 91       	pop	r29
    1fec:	cf 91       	pop	r28
    1fee:	1f 91       	pop	r17
    1ff0:	0f 91       	pop	r16
    1ff2:	ff 90       	pop	r15
    1ff4:	ef 90       	pop	r14
    1ff6:	df 90       	pop	r13
    1ff8:	cf 90       	pop	r12
    1ffa:	bf 90       	pop	r11
    1ffc:	af 90       	pop	r10
    1ffe:	9f 90       	pop	r9
    2000:	8f 90       	pop	r8
    2002:	08 95       	ret

00002004 <prvSampleTimeNow>:
    2004:	cf 92       	push	r12
    2006:	df 92       	push	r13
    2008:	ef 92       	push	r14
    200a:	ff 92       	push	r15
    200c:	cf 93       	push	r28
    200e:	df 93       	push	r29
    2010:	ec 01       	movw	r28, r24
    2012:	0e 94 18 0b 	call	0x1630	; 0x1630 <xTaskGetTickCount>
    2016:	6b 01       	movw	r12, r22
    2018:	7c 01       	movw	r14, r24
    201a:	80 91 4e 35 	lds	r24, 0x354E	; 0x80354e <xLastTime.4745>
    201e:	90 91 4f 35 	lds	r25, 0x354F	; 0x80354f <xLastTime.4745+0x1>
    2022:	a0 91 50 35 	lds	r26, 0x3550	; 0x803550 <xLastTime.4745+0x2>
    2026:	b0 91 51 35 	lds	r27, 0x3551	; 0x803551 <xLastTime.4745+0x3>
    202a:	c8 16       	cp	r12, r24
    202c:	d9 06       	cpc	r13, r25
    202e:	ea 06       	cpc	r14, r26
    2030:	fb 06       	cpc	r15, r27
    2032:	28 f4       	brcc	.+10     	; 0x203e <prvSampleTimeNow+0x3a>
    2034:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <prvSwitchTimerLists>
    2038:	81 e0       	ldi	r24, 0x01	; 1
    203a:	88 83       	st	Y, r24
    203c:	01 c0       	rjmp	.+2      	; 0x2040 <prvSampleTimeNow+0x3c>
    203e:	18 82       	st	Y, r1
    2040:	c0 92 4e 35 	sts	0x354E, r12	; 0x80354e <xLastTime.4745>
    2044:	d0 92 4f 35 	sts	0x354F, r13	; 0x80354f <xLastTime.4745+0x1>
    2048:	e0 92 50 35 	sts	0x3550, r14	; 0x803550 <xLastTime.4745+0x2>
    204c:	f0 92 51 35 	sts	0x3551, r15	; 0x803551 <xLastTime.4745+0x3>
    2050:	c7 01       	movw	r24, r14
    2052:	b6 01       	movw	r22, r12
    2054:	df 91       	pop	r29
    2056:	cf 91       	pop	r28
    2058:	ff 90       	pop	r15
    205a:	ef 90       	pop	r14
    205c:	df 90       	pop	r13
    205e:	cf 90       	pop	r12
    2060:	08 95       	ret

00002062 <prvProcessExpiredTimer>:
    2062:	4f 92       	push	r4
    2064:	5f 92       	push	r5
    2066:	6f 92       	push	r6
    2068:	7f 92       	push	r7
    206a:	8f 92       	push	r8
    206c:	9f 92       	push	r9
    206e:	af 92       	push	r10
    2070:	bf 92       	push	r11
    2072:	cf 92       	push	r12
    2074:	df 92       	push	r13
    2076:	ef 92       	push	r14
    2078:	ff 92       	push	r15
    207a:	0f 93       	push	r16
    207c:	1f 93       	push	r17
    207e:	cf 93       	push	r28
    2080:	df 93       	push	r29
    2082:	4b 01       	movw	r8, r22
    2084:	5c 01       	movw	r10, r24
    2086:	29 01       	movw	r4, r18
    2088:	3a 01       	movw	r6, r20
    208a:	e0 91 58 35 	lds	r30, 0x3558	; 0x803558 <pxCurrentTimerList>
    208e:	f0 91 59 35 	lds	r31, 0x3559	; 0x803559 <pxCurrentTimerList+0x1>
    2092:	07 80       	ldd	r0, Z+7	; 0x07
    2094:	f0 85       	ldd	r31, Z+8	; 0x08
    2096:	e0 2d       	mov	r30, r0
    2098:	c0 85       	ldd	r28, Z+8	; 0x08
    209a:	d1 85       	ldd	r29, Z+9	; 0x09
    209c:	ce 01       	movw	r24, r28
    209e:	02 96       	adiw	r24, 0x02	; 2
    20a0:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <uxListRemove>
    20a4:	8a 89       	ldd	r24, Y+18	; 0x12
    20a6:	81 30       	cpi	r24, 0x01	; 1
    20a8:	e1 f4       	brne	.+56     	; 0x20e2 <prvProcessExpiredTimer+0x80>
    20aa:	4e 85       	ldd	r20, Y+14	; 0x0e
    20ac:	5f 85       	ldd	r21, Y+15	; 0x0f
    20ae:	68 89       	ldd	r22, Y+16	; 0x10
    20b0:	79 89       	ldd	r23, Y+17	; 0x11
    20b2:	48 0d       	add	r20, r8
    20b4:	59 1d       	adc	r21, r9
    20b6:	6a 1d       	adc	r22, r10
    20b8:	7b 1d       	adc	r23, r11
    20ba:	75 01       	movw	r14, r10
    20bc:	64 01       	movw	r12, r8
    20be:	93 01       	movw	r18, r6
    20c0:	82 01       	movw	r16, r4
    20c2:	ce 01       	movw	r24, r28
    20c4:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <prvInsertTimerInActiveList>
    20c8:	88 23       	and	r24, r24
    20ca:	59 f0       	breq	.+22     	; 0x20e2 <prvProcessExpiredTimer+0x80>
    20cc:	c1 2c       	mov	r12, r1
    20ce:	d1 2c       	mov	r13, r1
    20d0:	76 01       	movw	r14, r12
    20d2:	00 e0       	ldi	r16, 0x00	; 0
    20d4:	10 e0       	ldi	r17, 0x00	; 0
    20d6:	a5 01       	movw	r20, r10
    20d8:	94 01       	movw	r18, r8
    20da:	60 e0       	ldi	r22, 0x00	; 0
    20dc:	ce 01       	movw	r24, r28
    20de:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <xTimerGenericCommand>
    20e2:	ed 89       	ldd	r30, Y+21	; 0x15
    20e4:	fe 89       	ldd	r31, Y+22	; 0x16
    20e6:	ce 01       	movw	r24, r28
    20e8:	19 95       	eicall
    20ea:	df 91       	pop	r29
    20ec:	cf 91       	pop	r28
    20ee:	1f 91       	pop	r17
    20f0:	0f 91       	pop	r16
    20f2:	ff 90       	pop	r15
    20f4:	ef 90       	pop	r14
    20f6:	df 90       	pop	r13
    20f8:	cf 90       	pop	r12
    20fa:	bf 90       	pop	r11
    20fc:	af 90       	pop	r10
    20fe:	9f 90       	pop	r9
    2100:	8f 90       	pop	r8
    2102:	7f 90       	pop	r7
    2104:	6f 90       	pop	r6
    2106:	5f 90       	pop	r5
    2108:	4f 90       	pop	r4
    210a:	08 95       	ret

0000210c <prvProcessTimerOrBlockTask>:
    210c:	8f 92       	push	r8
    210e:	9f 92       	push	r9
    2110:	af 92       	push	r10
    2112:	bf 92       	push	r11
    2114:	cf 92       	push	r12
    2116:	df 92       	push	r13
    2118:	ef 92       	push	r14
    211a:	ff 92       	push	r15
    211c:	1f 93       	push	r17
    211e:	cf 93       	push	r28
    2120:	df 93       	push	r29
    2122:	1f 92       	push	r1
    2124:	cd b7       	in	r28, 0x3d	; 61
    2126:	de b7       	in	r29, 0x3e	; 62
    2128:	6b 01       	movw	r12, r22
    212a:	7c 01       	movw	r14, r24
    212c:	14 2f       	mov	r17, r20
    212e:	0e 94 12 0b 	call	0x1624	; 0x1624 <vTaskSuspendAll>
    2132:	ce 01       	movw	r24, r28
    2134:	01 96       	adiw	r24, 0x01	; 1
    2136:	0e 94 02 10 	call	0x2004	; 0x2004 <prvSampleTimeNow>
    213a:	4b 01       	movw	r8, r22
    213c:	5c 01       	movw	r10, r24
    213e:	89 81       	ldd	r24, Y+1	; 0x01
    2140:	81 11       	cpse	r24, r1
    2142:	2e c0       	rjmp	.+92     	; 0x21a0 <prvProcessTimerOrBlockTask+0x94>
    2144:	11 11       	cpse	r17, r1
    2146:	0e c0       	rjmp	.+28     	; 0x2164 <prvProcessTimerOrBlockTask+0x58>
    2148:	8c 14       	cp	r8, r12
    214a:	9d 04       	cpc	r9, r13
    214c:	ae 04       	cpc	r10, r14
    214e:	bf 04       	cpc	r11, r15
    2150:	48 f0       	brcs	.+18     	; 0x2164 <prvProcessTimerOrBlockTask+0x58>
    2152:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <xTaskResumeAll>
    2156:	a5 01       	movw	r20, r10
    2158:	94 01       	movw	r18, r8
    215a:	c7 01       	movw	r24, r14
    215c:	b6 01       	movw	r22, r12
    215e:	0e 94 31 10 	call	0x2062	; 0x2062 <prvProcessExpiredTimer>
    2162:	20 c0       	rjmp	.+64     	; 0x21a4 <prvProcessTimerOrBlockTask+0x98>
    2164:	11 23       	and	r17, r17
    2166:	41 f0       	breq	.+16     	; 0x2178 <prvProcessTimerOrBlockTask+0x6c>
    2168:	e0 91 56 35 	lds	r30, 0x3556	; 0x803556 <pxOverflowTimerList>
    216c:	f0 91 57 35 	lds	r31, 0x3557	; 0x803557 <pxOverflowTimerList+0x1>
    2170:	80 81       	ld	r24, Z
    2172:	11 e0       	ldi	r17, 0x01	; 1
    2174:	81 11       	cpse	r24, r1
    2176:	10 e0       	ldi	r17, 0x00	; 0
    2178:	b7 01       	movw	r22, r14
    217a:	a6 01       	movw	r20, r12
    217c:	48 19       	sub	r20, r8
    217e:	59 09       	sbc	r21, r9
    2180:	6a 09       	sbc	r22, r10
    2182:	7b 09       	sbc	r23, r11
    2184:	21 2f       	mov	r18, r17
    2186:	80 91 54 35 	lds	r24, 0x3554	; 0x803554 <xTimerQueue>
    218a:	90 91 55 35 	lds	r25, 0x3555	; 0x803555 <xTimerQueue+0x1>
    218e:	0e 94 ae 08 	call	0x115c	; 0x115c <vQueueWaitForMessageRestricted>
    2192:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <xTaskResumeAll>
    2196:	81 11       	cpse	r24, r1
    2198:	05 c0       	rjmp	.+10     	; 0x21a4 <prvProcessTimerOrBlockTask+0x98>
    219a:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <vPortYield>
    219e:	02 c0       	rjmp	.+4      	; 0x21a4 <prvProcessTimerOrBlockTask+0x98>
    21a0:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <xTaskResumeAll>
    21a4:	0f 90       	pop	r0
    21a6:	df 91       	pop	r29
    21a8:	cf 91       	pop	r28
    21aa:	1f 91       	pop	r17
    21ac:	ff 90       	pop	r15
    21ae:	ef 90       	pop	r14
    21b0:	df 90       	pop	r13
    21b2:	cf 90       	pop	r12
    21b4:	bf 90       	pop	r11
    21b6:	af 90       	pop	r10
    21b8:	9f 90       	pop	r9
    21ba:	8f 90       	pop	r8
    21bc:	08 95       	ret

000021be <prvProcessReceivedCommands>:
    21be:	af 92       	push	r10
    21c0:	bf 92       	push	r11
    21c2:	cf 92       	push	r12
    21c4:	df 92       	push	r13
    21c6:	ef 92       	push	r14
    21c8:	ff 92       	push	r15
    21ca:	0f 93       	push	r16
    21cc:	1f 93       	push	r17
    21ce:	cf 93       	push	r28
    21d0:	df 93       	push	r29
    21d2:	cd b7       	in	r28, 0x3d	; 61
    21d4:	de b7       	in	r29, 0x3e	; 62
    21d6:	2a 97       	sbiw	r28, 0x0a	; 10
    21d8:	cd bf       	out	0x3d, r28	; 61
    21da:	de bf       	out	0x3e, r29	; 62
    21dc:	81 c0       	rjmp	.+258    	; 0x22e0 <prvProcessReceivedCommands+0x122>
    21de:	89 81       	ldd	r24, Y+1	; 0x01
    21e0:	88 23       	and	r24, r24
    21e2:	4c f4       	brge	.+18     	; 0x21f6 <prvProcessReceivedCommands+0x38>
    21e4:	ea 81       	ldd	r30, Y+2	; 0x02
    21e6:	fb 81       	ldd	r31, Y+3	; 0x03
    21e8:	4e 81       	ldd	r20, Y+6	; 0x06
    21ea:	5f 81       	ldd	r21, Y+7	; 0x07
    21ec:	68 85       	ldd	r22, Y+8	; 0x08
    21ee:	79 85       	ldd	r23, Y+9	; 0x09
    21f0:	8c 81       	ldd	r24, Y+4	; 0x04
    21f2:	9d 81       	ldd	r25, Y+5	; 0x05
    21f4:	19 95       	eicall
    21f6:	89 81       	ldd	r24, Y+1	; 0x01
    21f8:	88 23       	and	r24, r24
    21fa:	0c f4       	brge	.+2      	; 0x21fe <prvProcessReceivedCommands+0x40>
    21fc:	71 c0       	rjmp	.+226    	; 0x22e0 <prvProcessReceivedCommands+0x122>
    21fe:	ae 80       	ldd	r10, Y+6	; 0x06
    2200:	bf 80       	ldd	r11, Y+7	; 0x07
    2202:	d5 01       	movw	r26, r10
    2204:	1c 96       	adiw	r26, 0x0c	; 12
    2206:	8d 91       	ld	r24, X+
    2208:	9c 91       	ld	r25, X
    220a:	1d 97       	sbiw	r26, 0x0d	; 13
    220c:	89 2b       	or	r24, r25
    220e:	21 f0       	breq	.+8      	; 0x2218 <prvProcessReceivedCommands+0x5a>
    2210:	c5 01       	movw	r24, r10
    2212:	02 96       	adiw	r24, 0x02	; 2
    2214:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <uxListRemove>
    2218:	ce 01       	movw	r24, r28
    221a:	0a 96       	adiw	r24, 0x0a	; 10
    221c:	0e 94 02 10 	call	0x2004	; 0x2004 <prvSampleTimeNow>
    2220:	8b 01       	movw	r16, r22
    2222:	9c 01       	movw	r18, r24
    2224:	89 81       	ldd	r24, Y+1	; 0x01
    2226:	08 2e       	mov	r0, r24
    2228:	00 0c       	add	r0, r0
    222a:	99 0b       	sbc	r25, r25
    222c:	aa 0b       	sbc	r26, r26
    222e:	bb 0b       	sbc	r27, r27
    2230:	8a 30       	cpi	r24, 0x0A	; 10
    2232:	91 05       	cpc	r25, r1
    2234:	08 f0       	brcs	.+2      	; 0x2238 <prvProcessReceivedCommands+0x7a>
    2236:	54 c0       	rjmp	.+168    	; 0x22e0 <prvProcessReceivedCommands+0x122>
    2238:	fc 01       	movw	r30, r24
    223a:	88 27       	eor	r24, r24
    223c:	e2 50       	subi	r30, 0x02	; 2
    223e:	ff 4f       	sbci	r31, 0xFF	; 255
    2240:	8f 4f       	sbci	r24, 0xFF	; 255
    2242:	0c 94 cd 1d 	jmp	0x3b9a	; 0x3b9a <__tablejump2__>
    2246:	ca 80       	ldd	r12, Y+2	; 0x02
    2248:	db 80       	ldd	r13, Y+3	; 0x03
    224a:	ec 80       	ldd	r14, Y+4	; 0x04
    224c:	fd 80       	ldd	r15, Y+5	; 0x05
    224e:	f5 01       	movw	r30, r10
    2250:	46 85       	ldd	r20, Z+14	; 0x0e
    2252:	57 85       	ldd	r21, Z+15	; 0x0f
    2254:	60 89       	ldd	r22, Z+16	; 0x10
    2256:	71 89       	ldd	r23, Z+17	; 0x11
    2258:	4c 0d       	add	r20, r12
    225a:	5d 1d       	adc	r21, r13
    225c:	6e 1d       	adc	r22, r14
    225e:	7f 1d       	adc	r23, r15
    2260:	c5 01       	movw	r24, r10
    2262:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <prvInsertTimerInActiveList>
    2266:	88 23       	and	r24, r24
    2268:	d9 f1       	breq	.+118    	; 0x22e0 <prvProcessReceivedCommands+0x122>
    226a:	d5 01       	movw	r26, r10
    226c:	55 96       	adiw	r26, 0x15	; 21
    226e:	ed 91       	ld	r30, X+
    2270:	fc 91       	ld	r31, X
    2272:	56 97       	sbiw	r26, 0x16	; 22
    2274:	c5 01       	movw	r24, r10
    2276:	19 95       	eicall
    2278:	f5 01       	movw	r30, r10
    227a:	82 89       	ldd	r24, Z+18	; 0x12
    227c:	81 30       	cpi	r24, 0x01	; 1
    227e:	81 f5       	brne	.+96     	; 0x22e0 <prvProcessReceivedCommands+0x122>
    2280:	4a 81       	ldd	r20, Y+2	; 0x02
    2282:	5b 81       	ldd	r21, Y+3	; 0x03
    2284:	6c 81       	ldd	r22, Y+4	; 0x04
    2286:	7d 81       	ldd	r23, Y+5	; 0x05
    2288:	86 85       	ldd	r24, Z+14	; 0x0e
    228a:	97 85       	ldd	r25, Z+15	; 0x0f
    228c:	a0 89       	ldd	r26, Z+16	; 0x10
    228e:	b1 89       	ldd	r27, Z+17	; 0x11
    2290:	9a 01       	movw	r18, r20
    2292:	ab 01       	movw	r20, r22
    2294:	28 0f       	add	r18, r24
    2296:	39 1f       	adc	r19, r25
    2298:	4a 1f       	adc	r20, r26
    229a:	5b 1f       	adc	r21, r27
    229c:	c1 2c       	mov	r12, r1
    229e:	d1 2c       	mov	r13, r1
    22a0:	76 01       	movw	r14, r12
    22a2:	00 e0       	ldi	r16, 0x00	; 0
    22a4:	10 e0       	ldi	r17, 0x00	; 0
    22a6:	60 e0       	ldi	r22, 0x00	; 0
    22a8:	c5 01       	movw	r24, r10
    22aa:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <xTimerGenericCommand>
    22ae:	18 c0       	rjmp	.+48     	; 0x22e0 <prvProcessReceivedCommands+0x122>
    22b0:	4a 81       	ldd	r20, Y+2	; 0x02
    22b2:	5b 81       	ldd	r21, Y+3	; 0x03
    22b4:	6c 81       	ldd	r22, Y+4	; 0x04
    22b6:	7d 81       	ldd	r23, Y+5	; 0x05
    22b8:	d5 01       	movw	r26, r10
    22ba:	1e 96       	adiw	r26, 0x0e	; 14
    22bc:	4d 93       	st	X+, r20
    22be:	5d 93       	st	X+, r21
    22c0:	6d 93       	st	X+, r22
    22c2:	7c 93       	st	X, r23
    22c4:	51 97       	sbiw	r26, 0x11	; 17
    22c6:	40 0f       	add	r20, r16
    22c8:	51 1f       	adc	r21, r17
    22ca:	62 1f       	adc	r22, r18
    22cc:	73 1f       	adc	r23, r19
    22ce:	68 01       	movw	r12, r16
    22d0:	79 01       	movw	r14, r18
    22d2:	c5 01       	movw	r24, r10
    22d4:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <prvInsertTimerInActiveList>
    22d8:	03 c0       	rjmp	.+6      	; 0x22e0 <prvProcessReceivedCommands+0x122>
    22da:	c5 01       	movw	r24, r10
    22dc:	0e 94 7e 03 	call	0x6fc	; 0x6fc <vPortFree>
    22e0:	20 e0       	ldi	r18, 0x00	; 0
    22e2:	30 e0       	ldi	r19, 0x00	; 0
    22e4:	a9 01       	movw	r20, r18
    22e6:	be 01       	movw	r22, r28
    22e8:	6f 5f       	subi	r22, 0xFF	; 255
    22ea:	7f 4f       	sbci	r23, 0xFF	; 255
    22ec:	80 91 54 35 	lds	r24, 0x3554	; 0x803554 <xTimerQueue>
    22f0:	90 91 55 35 	lds	r25, 0x3555	; 0x803555 <xTimerQueue+0x1>
    22f4:	0e 94 03 08 	call	0x1006	; 0x1006 <xQueueReceive>
    22f8:	81 11       	cpse	r24, r1
    22fa:	71 cf       	rjmp	.-286    	; 0x21de <prvProcessReceivedCommands+0x20>
    22fc:	2a 96       	adiw	r28, 0x0a	; 10
    22fe:	cd bf       	out	0x3d, r28	; 61
    2300:	de bf       	out	0x3e, r29	; 62
    2302:	df 91       	pop	r29
    2304:	cf 91       	pop	r28
    2306:	1f 91       	pop	r17
    2308:	0f 91       	pop	r16
    230a:	ff 90       	pop	r15
    230c:	ef 90       	pop	r14
    230e:	df 90       	pop	r13
    2310:	cf 90       	pop	r12
    2312:	bf 90       	pop	r11
    2314:	af 90       	pop	r10
    2316:	08 95       	ret

00002318 <prvTimerTask>:
    2318:	cf 93       	push	r28
    231a:	df 93       	push	r29
    231c:	1f 92       	push	r1
    231e:	cd b7       	in	r28, 0x3d	; 61
    2320:	de b7       	in	r29, 0x3e	; 62
    2322:	ce 01       	movw	r24, r28
    2324:	01 96       	adiw	r24, 0x01	; 1
    2326:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <prvGetNextExpireTime>
    232a:	49 81       	ldd	r20, Y+1	; 0x01
    232c:	0e 94 86 10 	call	0x210c	; 0x210c <prvProcessTimerOrBlockTask>
    2330:	0e 94 df 10 	call	0x21be	; 0x21be <prvProcessReceivedCommands>
    2334:	f6 cf       	rjmp	.-20     	; 0x2322 <prvTimerTask+0xa>

00002336 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
    2336:	0f 93       	push	r16
    2338:	1f 93       	push	r17
    233a:	cf 93       	push	r28
    233c:	df 93       	push	r29
    233e:	cd b7       	in	r28, 0x3d	; 61
    2340:	de b7       	in	r29, 0x3e	; 62
    2342:	29 97       	sbiw	r28, 0x09	; 9
    2344:	cd bf       	out	0x3d, r28	; 61
    2346:	de bf       	out	0x3e, r29	; 62
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
    2348:	ee ef       	ldi	r30, 0xFE	; 254
    234a:	e9 83       	std	Y+1, r30	; 0x01
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
    234c:	8a 83       	std	Y+2, r24	; 0x02
    234e:	9b 83       	std	Y+3, r25	; 0x03
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
    2350:	6c 83       	std	Y+4, r22	; 0x04
    2352:	7d 83       	std	Y+5, r23	; 0x05
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
    2354:	2e 83       	std	Y+6, r18	; 0x06
    2356:	3f 83       	std	Y+7, r19	; 0x07
    2358:	48 87       	std	Y+8, r20	; 0x08
    235a:	59 87       	std	Y+9, r21	; 0x09

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    235c:	20 e0       	ldi	r18, 0x00	; 0
    235e:	a8 01       	movw	r20, r16
    2360:	be 01       	movw	r22, r28
    2362:	6f 5f       	subi	r22, 0xFF	; 255
    2364:	7f 4f       	sbci	r23, 0xFF	; 255
    2366:	80 91 54 35 	lds	r24, 0x3554	; 0x803554 <xTimerQueue>
    236a:	90 91 55 35 	lds	r25, 0x3555	; 0x803555 <xTimerQueue+0x1>
    236e:	0e 94 be 07 	call	0xf7c	; 0xf7c <xQueueGenericSendFromISR>

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
	}
    2372:	29 96       	adiw	r28, 0x09	; 9
    2374:	cd bf       	out	0x3d, r28	; 61
    2376:	de bf       	out	0x3e, r29	; 62
    2378:	df 91       	pop	r29
    237a:	cf 91       	pop	r28
    237c:	1f 91       	pop	r17
    237e:	0f 91       	pop	r16
    2380:	08 95       	ret

00002382 <vInitClock>:
#include "clksys_driver.h"


void vInitClock(void)
{
	CLKSYS_Enable( OSC_RC2MEN_bm );
    2382:	e0 e5       	ldi	r30, 0x50	; 80
    2384:	f0 e0       	ldi	r31, 0x00	; 0
    2386:	80 81       	ld	r24, Z
    2388:	81 60       	ori	r24, 0x01	; 1
    238a:	80 83       	st	Z, r24
	do {} while ( CLKSYS_IsReady( OSC_RC2MRDY_bm ) == 0 );
    238c:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7de051>
    2390:	80 ff       	sbrs	r24, 0
    2392:	fc cf       	rjmp	.-8      	; 0x238c <vInitClock+0xa>
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_RC2M_gc );
    2394:	80 e0       	ldi	r24, 0x00	; 0
    2396:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC32MEN_bm | OSC_RC32KEN_bm | OSC_XOSCEN_bm | OSC_PLLEN_bm);
    239a:	8e e1       	ldi	r24, 0x1E	; 30
    239c:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <CLKSYS_Disable>
	CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_1_gc );
    23a0:	60 e0       	ldi	r22, 0x00	; 0
    23a2:	80 e0       	ldi	r24, 0x00	; 0
    23a4:	0e 94 75 01 	call	0x2ea	; 0x2ea <CLKSYS_Prescalers_Config>
	CLKSYS_XOSC_Config( OSC_FRQRANGE_2TO9_gc,false,OSC_XOSCSEL_XTAL_256CLK_gc );
    23a8:	43 e0       	ldi	r20, 0x03	; 3
    23aa:	60 e0       	ldi	r22, 0x00	; 0
    23ac:	80 e4       	ldi	r24, 0x40	; 64
    23ae:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <CLKSYS_XOSC_Config>
	CLKSYS_Enable( OSC_XOSCEN_bm );
    23b2:	e0 e5       	ldi	r30, 0x50	; 80
    23b4:	f0 e0       	ldi	r31, 0x00	; 0
    23b6:	80 81       	ld	r24, Z
    23b8:	88 60       	ori	r24, 0x08	; 8
    23ba:	80 83       	st	Z, r24
	do {} while ( CLKSYS_IsReady( OSC_XOSCRDY_bm ) == 0 );
    23bc:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7de051>
    23c0:	83 ff       	sbrs	r24, 3
    23c2:	fc cf       	rjmp	.-8      	; 0x23bc <vInitClock+0x3a>
	CLKSYS_PLL_Config( OSC_PLLSRC_XOSC_gc, 4 );
    23c4:	64 e0       	ldi	r22, 0x04	; 4
    23c6:	80 ec       	ldi	r24, 0xC0	; 192
    23c8:	0e 94 66 01 	call	0x2cc	; 0x2cc <CLKSYS_PLL_Config>
	CLKSYS_Enable( OSC_PLLEN_bm );
    23cc:	e0 e5       	ldi	r30, 0x50	; 80
    23ce:	f0 e0       	ldi	r31, 0x00	; 0
    23d0:	80 81       	ld	r24, Z
    23d2:	80 61       	ori	r24, 0x10	; 16
    23d4:	80 83       	st	Z, r24
	CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_1_gc );
    23d6:	60 e0       	ldi	r22, 0x00	; 0
    23d8:	80 e0       	ldi	r24, 0x00	; 0
    23da:	0e 94 75 01 	call	0x2ea	; 0x2ea <CLKSYS_Prescalers_Config>
	do {} while ( CLKSYS_IsReady( OSC_PLLRDY_bm ) == 0 );
    23de:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7de051>
    23e2:	84 ff       	sbrs	r24, 4
    23e4:	fc cf       	rjmp	.-8      	; 0x23de <vInitClock+0x5c>
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_PLL_gc );
    23e6:	84 e0       	ldi	r24, 0x04	; 4
    23e8:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC32MEN_bm | OSC_RC2MEN_bm | OSC_RC32KEN_bm);
    23ec:	87 e0       	ldi	r24, 0x07	; 7
    23ee:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <CLKSYS_Disable>
    23f2:	08 95       	ret

000023f4 <vApplicationIdleHook>:
void vLedBlink(void *pvParameters);

TaskHandle_t ledTask;

void vApplicationIdleHook( void )
{	
    23f4:	08 95       	ret

000023f6 <main>:
	
}

int main(void)
{
    23f6:	ef 92       	push	r14
    23f8:	ff 92       	push	r15
    23fa:	0f 93       	push	r16
    23fc:	cf 93       	push	r28
	resetReason_t reason = getResetReason();
    23fe:	0e 94 69 1b 	call	0x36d2	; 0x36d2 <getResetReason>
    2402:	c8 2f       	mov	r28, r24

	vInitClock();
    2404:	0e 94 c1 11 	call	0x2382	; 0x2382 <vInitClock>
	vInitDisplay();
    2408:	0e 94 34 17 	call	0x2e68	; 0x2e68 <vInitDisplay>
	
	initDAC();
    240c:	0e 94 90 1a 	call	0x3520	; 0x3520 <initDAC>
	initDACTimer();
    2410:	0e 94 9e 1a 	call	0x353c	; 0x353c <initDACTimer>
	initGenDMA();
    2414:	0e 94 df 1a 	call	0x35be	; 0x35be <initGenDMA>
	initADC();
    2418:	0e 94 80 1a 	call	0x3500	; 0x3500 <initADC>
	initADCTimer();
    241c:	0e 94 b2 1a 	call	0x3564	; 0x3564 <initADCTimer>
	initDecDMA();
    2420:	0e 94 1c 1b 	call	0x3638	; 0x3638 <initDecDMA>
	
	xTaskCreate(vQuamGen, NULL, configMINIMAL_STACK_SIZE+500, NULL, 2, NULL);
    2424:	e1 2c       	mov	r14, r1
    2426:	f1 2c       	mov	r15, r1
    2428:	02 e0       	ldi	r16, 0x02	; 2
    242a:	20 e0       	ldi	r18, 0x00	; 0
    242c:	30 e0       	ldi	r19, 0x00	; 0
    242e:	4c eb       	ldi	r20, 0xBC	; 188
    2430:	52 e0       	ldi	r21, 0x02	; 2
    2432:	60 e0       	ldi	r22, 0x00	; 0
    2434:	70 e0       	ldi	r23, 0x00	; 0
    2436:	86 e9       	ldi	r24, 0x96	; 150
    2438:	99 e1       	ldi	r25, 0x19	; 25
    243a:	0e 94 83 0a 	call	0x1506	; 0x1506 <xTaskCreate>
	xTaskCreate(vQuamDec, NULL, configMINIMAL_STACK_SIZE+100, NULL, 1, NULL);
    243e:	01 e0       	ldi	r16, 0x01	; 1
    2440:	20 e0       	ldi	r18, 0x00	; 0
    2442:	30 e0       	ldi	r19, 0x00	; 0
    2444:	4c e2       	ldi	r20, 0x2C	; 44
    2446:	51 e0       	ldi	r21, 0x01	; 1
    2448:	60 e0       	ldi	r22, 0x00	; 0
    244a:	70 e0       	ldi	r23, 0x00	; 0
    244c:	8d ed       	ldi	r24, 0xDD	; 221
    244e:	98 e1       	ldi	r25, 0x18	; 24
    2450:	0e 94 83 0a 	call	0x1506	; 0x1506 <xTaskCreate>

	vDisplayClear();
    2454:	0e 94 c0 18 	call	0x3180	; 0x3180 <vDisplayClear>
	vDisplayWriteStringAtPos(0,0,"FreeRTOS 10.0.1");
    2458:	8d e0       	ldi	r24, 0x0D	; 13
    245a:	90 e2       	ldi	r25, 0x20	; 32
    245c:	9f 93       	push	r25
    245e:	8f 93       	push	r24
    2460:	1f 92       	push	r1
    2462:	1f 92       	push	r1
    2464:	1f 92       	push	r1
    2466:	1f 92       	push	r1
    2468:	0e 94 cb 18 	call	0x3196	; 0x3196 <vDisplayWriteStringAtPos>
	vDisplayWriteStringAtPos(1,0,"EDUBoard 1.0");
    246c:	8d e1       	ldi	r24, 0x1D	; 29
    246e:	90 e2       	ldi	r25, 0x20	; 32
    2470:	9f 93       	push	r25
    2472:	8f 93       	push	r24
    2474:	1f 92       	push	r1
    2476:	1f 92       	push	r1
    2478:	1f 92       	push	r1
    247a:	81 e0       	ldi	r24, 0x01	; 1
    247c:	8f 93       	push	r24
    247e:	0e 94 cb 18 	call	0x3196	; 0x3196 <vDisplayWriteStringAtPos>
	vDisplayWriteStringAtPos(2,0,"QAMDECGEN-Base");
    2482:	8a e2       	ldi	r24, 0x2A	; 42
    2484:	90 e2       	ldi	r25, 0x20	; 32
    2486:	9f 93       	push	r25
    2488:	8f 93       	push	r24
    248a:	1f 92       	push	r1
    248c:	1f 92       	push	r1
    248e:	1f 92       	push	r1
    2490:	82 e0       	ldi	r24, 0x02	; 2
    2492:	8f 93       	push	r24
    2494:	0e 94 cb 18 	call	0x3196	; 0x3196 <vDisplayWriteStringAtPos>
	vDisplayWriteStringAtPos(3,0,"ResetReason: %d", reason);
    2498:	1f 92       	push	r1
    249a:	cf 93       	push	r28
    249c:	89 e3       	ldi	r24, 0x39	; 57
    249e:	90 e2       	ldi	r25, 0x20	; 32
    24a0:	9f 93       	push	r25
    24a2:	8f 93       	push	r24
    24a4:	1f 92       	push	r1
    24a6:	1f 92       	push	r1
    24a8:	1f 92       	push	r1
    24aa:	83 e0       	ldi	r24, 0x03	; 3
    24ac:	8f 93       	push	r24
    24ae:	0e 94 cb 18 	call	0x3196	; 0x3196 <vDisplayWriteStringAtPos>
	vTaskStartScheduler();
    24b2:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <vTaskStartScheduler>
    24b6:	8d b7       	in	r24, 0x3d	; 61
    24b8:	9e b7       	in	r25, 0x3e	; 62
    24ba:	4a 96       	adiw	r24, 0x1a	; 26
    24bc:	8d bf       	out	0x3d, r24	; 61
    24be:	9e bf       	out	0x3e, r25	; 62
	return 0;
}
    24c0:	80 e0       	ldi	r24, 0x00	; 0
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	cf 91       	pop	r28
    24c6:	0f 91       	pop	r16
    24c8:	ff 90       	pop	r15
    24ca:	ef 90       	pop	r14
    24cc:	08 95       	ret

000024ce <normalize>:
 void displayHome() {
	 command(0x02);
 }
 void _displayClear() {
	 command(0x01);
	 delayUS(2000);
    24ce:	cf 92       	push	r12
    24d0:	df 92       	push	r13
    24d2:	ef 92       	push	r14
    24d4:	ff 92       	push	r15
    24d6:	0f 93       	push	r16
    24d8:	1f 93       	push	r17
    24da:	cf 93       	push	r28
    24dc:	df 93       	push	r29
    24de:	8c 01       	movw	r16, r24
    24e0:	fc 01       	movw	r30, r24
    24e2:	c0 80       	ld	r12, Z
    24e4:	d1 80       	ldd	r13, Z+1	; 0x01
    24e6:	e2 80       	ldd	r14, Z+2	; 0x02
    24e8:	f3 80       	ldd	r15, Z+3	; 0x03
    24ea:	c0 e0       	ldi	r28, 0x00	; 0
    24ec:	d0 e0       	ldi	r29, 0x00	; 0
    24ee:	0b c0       	rjmp	.+22     	; 0x2506 <normalize+0x38>
    24f0:	20 e0       	ldi	r18, 0x00	; 0
    24f2:	30 e0       	ldi	r19, 0x00	; 0
    24f4:	40 e2       	ldi	r20, 0x20	; 32
    24f6:	51 e4       	ldi	r21, 0x41	; 65
    24f8:	c7 01       	movw	r24, r14
    24fa:	b6 01       	movw	r22, r12
    24fc:	0e 94 01 1c 	call	0x3802	; 0x3802 <__divsf3>
    2500:	6b 01       	movw	r12, r22
    2502:	7c 01       	movw	r14, r24
    2504:	21 96       	adiw	r28, 0x01	; 1
    2506:	20 e0       	ldi	r18, 0x00	; 0
    2508:	30 e0       	ldi	r19, 0x00	; 0
    250a:	40 e8       	ldi	r20, 0x80	; 128
    250c:	5f e3       	ldi	r21, 0x3F	; 63
    250e:	c7 01       	movw	r24, r14
    2510:	b6 01       	movw	r22, r12
    2512:	0e 94 5b 1d 	call	0x3ab6	; 0x3ab6 <__gesf2>
    2516:	88 23       	and	r24, r24
    2518:	5c f7       	brge	.-42     	; 0x24f0 <normalize+0x22>
    251a:	0b c0       	rjmp	.+22     	; 0x2532 <normalize+0x64>
    251c:	20 e0       	ldi	r18, 0x00	; 0
    251e:	30 e0       	ldi	r19, 0x00	; 0
    2520:	40 e2       	ldi	r20, 0x20	; 32
    2522:	51 e4       	ldi	r21, 0x41	; 65
    2524:	c7 01       	movw	r24, r14
    2526:	b6 01       	movw	r22, r12
    2528:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <__mulsf3>
    252c:	6b 01       	movw	r12, r22
    252e:	7c 01       	movw	r14, r24
    2530:	21 97       	sbiw	r28, 0x01	; 1
    2532:	2d ec       	ldi	r18, 0xCD	; 205
    2534:	3c ec       	ldi	r19, 0xCC	; 204
    2536:	4c ec       	ldi	r20, 0xCC	; 204
    2538:	5d e3       	ldi	r21, 0x3D	; 61
    253a:	c7 01       	movw	r24, r14
    253c:	b6 01       	movw	r22, r12
    253e:	0e 94 fc 1b 	call	0x37f8	; 0x37f8 <__cmpsf2>
    2542:	88 23       	and	r24, r24
    2544:	5c f3       	brlt	.-42     	; 0x251c <normalize+0x4e>
    2546:	f8 01       	movw	r30, r16
    2548:	c0 82       	st	Z, r12
    254a:	d1 82       	std	Z+1, r13	; 0x01
    254c:	e2 82       	std	Z+2, r14	; 0x02
    254e:	f3 82       	std	Z+3, r15	; 0x03
    2550:	ce 01       	movw	r24, r28
    2552:	df 91       	pop	r29
    2554:	cf 91       	pop	r28
    2556:	1f 91       	pop	r17
    2558:	0f 91       	pop	r16
    255a:	ff 90       	pop	r15
    255c:	ef 90       	pop	r14
    255e:	df 90       	pop	r13
    2560:	cf 90       	pop	r12
    2562:	08 95       	ret

00002564 <ftoa_fixed>:
    2564:	4f 92       	push	r4
    2566:	5f 92       	push	r5
    2568:	6f 92       	push	r6
    256a:	7f 92       	push	r7
    256c:	8f 92       	push	r8
    256e:	9f 92       	push	r9
    2570:	af 92       	push	r10
    2572:	bf 92       	push	r11
    2574:	cf 92       	push	r12
    2576:	df 92       	push	r13
    2578:	ef 92       	push	r14
    257a:	ff 92       	push	r15
    257c:	0f 93       	push	r16
    257e:	1f 93       	push	r17
    2580:	cf 93       	push	r28
    2582:	df 93       	push	r29
    2584:	00 d0       	rcall	.+0      	; 0x2586 <ftoa_fixed+0x22>
    2586:	1f 92       	push	r1
    2588:	cd b7       	in	r28, 0x3d	; 61
    258a:	de b7       	in	r29, 0x3e	; 62
    258c:	5c 01       	movw	r10, r24
    258e:	e4 2e       	mov	r14, r20
    2590:	f5 2e       	mov	r15, r21
    2592:	06 2f       	mov	r16, r22
    2594:	17 2f       	mov	r17, r23
    2596:	49 83       	std	Y+1, r20	; 0x01
    2598:	5a 83       	std	Y+2, r21	; 0x02
    259a:	6b 83       	std	Y+3, r22	; 0x03
    259c:	7c 83       	std	Y+4, r23	; 0x04
    259e:	20 e0       	ldi	r18, 0x00	; 0
    25a0:	30 e0       	ldi	r19, 0x00	; 0
    25a2:	a9 01       	movw	r20, r18
    25a4:	6e 2d       	mov	r22, r14
    25a6:	7f 2d       	mov	r23, r15
    25a8:	80 2f       	mov	r24, r16
    25aa:	91 2f       	mov	r25, r17
    25ac:	0e 94 fc 1b 	call	0x37f8	; 0x37f8 <__cmpsf2>
    25b0:	81 11       	cpse	r24, r1
    25b2:	05 c0       	rjmp	.+10     	; 0x25be <ftoa_fixed+0x5a>
    25b4:	80 e3       	ldi	r24, 0x30	; 48
    25b6:	f5 01       	movw	r30, r10
    25b8:	80 83       	st	Z, r24
    25ba:	11 82       	std	Z+1, r1	; 0x01
    25bc:	b9 c0       	rjmp	.+370    	; 0x2730 <ftoa_fixed+0x1cc>
    25be:	20 e0       	ldi	r18, 0x00	; 0
    25c0:	30 e0       	ldi	r19, 0x00	; 0
    25c2:	a9 01       	movw	r20, r18
    25c4:	6e 2d       	mov	r22, r14
    25c6:	7f 2d       	mov	r23, r15
    25c8:	80 2f       	mov	r24, r16
    25ca:	91 2f       	mov	r25, r17
    25cc:	0e 94 fc 1b 	call	0x37f8	; 0x37f8 <__cmpsf2>
    25d0:	88 23       	and	r24, r24
    25d2:	7c f4       	brge	.+30     	; 0x25f2 <ftoa_fixed+0x8e>
    25d4:	8d e2       	ldi	r24, 0x2D	; 45
    25d6:	f5 01       	movw	r30, r10
    25d8:	80 83       	st	Z, r24
    25da:	89 81       	ldd	r24, Y+1	; 0x01
    25dc:	9a 81       	ldd	r25, Y+2	; 0x02
    25de:	ab 81       	ldd	r26, Y+3	; 0x03
    25e0:	bc 81       	ldd	r27, Y+4	; 0x04
    25e2:	b0 58       	subi	r27, 0x80	; 128
    25e4:	89 83       	std	Y+1, r24	; 0x01
    25e6:	9a 83       	std	Y+2, r25	; 0x02
    25e8:	ab 83       	std	Y+3, r26	; 0x03
    25ea:	bc 83       	std	Y+4, r27	; 0x04
    25ec:	c5 01       	movw	r24, r10
    25ee:	01 96       	adiw	r24, 0x01	; 1
    25f0:	5c 01       	movw	r10, r24
    25f2:	ce 01       	movw	r24, r28
    25f4:	01 96       	adiw	r24, 0x01	; 1
    25f6:	0e 94 67 12 	call	0x24ce	; 0x24ce <normalize>
    25fa:	7c 01       	movw	r14, r24
    25fc:	00 e0       	ldi	r16, 0x00	; 0
    25fe:	10 e0       	ldi	r17, 0x00	; 0
    2600:	38 c0       	rjmp	.+112    	; 0x2672 <ftoa_fixed+0x10e>
    2602:	20 e0       	ldi	r18, 0x00	; 0
    2604:	30 e0       	ldi	r19, 0x00	; 0
    2606:	40 e2       	ldi	r20, 0x20	; 32
    2608:	51 e4       	ldi	r21, 0x41	; 65
    260a:	69 81       	ldd	r22, Y+1	; 0x01
    260c:	7a 81       	ldd	r23, Y+2	; 0x02
    260e:	8b 81       	ldd	r24, Y+3	; 0x03
    2610:	9c 81       	ldd	r25, Y+4	; 0x04
    2612:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <__mulsf3>
    2616:	0e 94 73 1c 	call	0x38e6	; 0x38e6 <__fixsfsi>
    261a:	2b 01       	movw	r4, r22
    261c:	3c 01       	movw	r6, r24
    261e:	65 01       	movw	r12, r10
    2620:	9f ef       	ldi	r25, 0xFF	; 255
    2622:	c9 1a       	sub	r12, r25
    2624:	d9 0a       	sbc	r13, r25
    2626:	80 e3       	ldi	r24, 0x30	; 48
    2628:	84 0d       	add	r24, r4
    262a:	f5 01       	movw	r30, r10
    262c:	80 83       	st	Z, r24
    262e:	20 e0       	ldi	r18, 0x00	; 0
    2630:	30 e0       	ldi	r19, 0x00	; 0
    2632:	40 e2       	ldi	r20, 0x20	; 32
    2634:	51 e4       	ldi	r21, 0x41	; 65
    2636:	69 81       	ldd	r22, Y+1	; 0x01
    2638:	7a 81       	ldd	r23, Y+2	; 0x02
    263a:	8b 81       	ldd	r24, Y+3	; 0x03
    263c:	9c 81       	ldd	r25, Y+4	; 0x04
    263e:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <__mulsf3>
    2642:	4b 01       	movw	r8, r22
    2644:	5c 01       	movw	r10, r24
    2646:	b2 01       	movw	r22, r4
    2648:	55 0c       	add	r5, r5
    264a:	88 0b       	sbc	r24, r24
    264c:	99 0b       	sbc	r25, r25
    264e:	0e 94 ab 1c 	call	0x3956	; 0x3956 <__floatsisf>
    2652:	9b 01       	movw	r18, r22
    2654:	ac 01       	movw	r20, r24
    2656:	c5 01       	movw	r24, r10
    2658:	b4 01       	movw	r22, r8
    265a:	0e 94 8f 1b 	call	0x371e	; 0x371e <__subsf3>
    265e:	69 83       	std	Y+1, r22	; 0x01
    2660:	7a 83       	std	Y+2, r23	; 0x02
    2662:	8b 83       	std	Y+3, r24	; 0x03
    2664:	9c 83       	std	Y+4, r25	; 0x04
    2666:	0f 5f       	subi	r16, 0xFF	; 255
    2668:	1f 4f       	sbci	r17, 0xFF	; 255
    266a:	f1 e0       	ldi	r31, 0x01	; 1
    266c:	ef 1a       	sub	r14, r31
    266e:	f1 08       	sbc	r15, r1
    2670:	56 01       	movw	r10, r12
    2672:	1e 14       	cp	r1, r14
    2674:	1f 04       	cpc	r1, r15
    2676:	2c f2       	brlt	.-118    	; 0x2602 <ftoa_fixed+0x9e>
    2678:	01 15       	cp	r16, r1
    267a:	11 05       	cpc	r17, r1
    267c:	31 f4       	brne	.+12     	; 0x268a <ftoa_fixed+0x126>
    267e:	80 e3       	ldi	r24, 0x30	; 48
    2680:	f5 01       	movw	r30, r10
    2682:	80 83       	st	Z, r24
    2684:	c5 01       	movw	r24, r10
    2686:	01 96       	adiw	r24, 0x01	; 1
    2688:	5c 01       	movw	r10, r24
    268a:	65 01       	movw	r12, r10
    268c:	9f ef       	ldi	r25, 0xFF	; 255
    268e:	c9 1a       	sub	r12, r25
    2690:	d9 0a       	sbc	r13, r25
    2692:	8e e2       	ldi	r24, 0x2E	; 46
    2694:	f5 01       	movw	r30, r10
    2696:	80 83       	st	Z, r24
    2698:	0b c0       	rjmp	.+22     	; 0x26b0 <ftoa_fixed+0x14c>
    269a:	80 e3       	ldi	r24, 0x30	; 48
    269c:	f6 01       	movw	r30, r12
    269e:	80 83       	st	Z, r24
    26a0:	f1 e0       	ldi	r31, 0x01	; 1
    26a2:	ef 1a       	sub	r14, r31
    26a4:	f1 08       	sbc	r15, r1
    26a6:	0f 5f       	subi	r16, 0xFF	; 255
    26a8:	1f 4f       	sbci	r17, 0xFF	; 255
    26aa:	c6 01       	movw	r24, r12
    26ac:	01 96       	adiw	r24, 0x01	; 1
    26ae:	6c 01       	movw	r12, r24
    26b0:	ff 20       	and	r15, r15
    26b2:	cc f5       	brge	.+114    	; 0x2726 <ftoa_fixed+0x1c2>
    26b4:	04 30       	cpi	r16, 0x04	; 4
    26b6:	11 05       	cpc	r17, r1
    26b8:	84 f3       	brlt	.-32     	; 0x269a <ftoa_fixed+0x136>
    26ba:	35 c0       	rjmp	.+106    	; 0x2726 <ftoa_fixed+0x1c2>
    26bc:	20 e0       	ldi	r18, 0x00	; 0
    26be:	30 e0       	ldi	r19, 0x00	; 0
    26c0:	40 e2       	ldi	r20, 0x20	; 32
    26c2:	51 e4       	ldi	r21, 0x41	; 65
    26c4:	69 81       	ldd	r22, Y+1	; 0x01
    26c6:	7a 81       	ldd	r23, Y+2	; 0x02
    26c8:	8b 81       	ldd	r24, Y+3	; 0x03
    26ca:	9c 81       	ldd	r25, Y+4	; 0x04
    26cc:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <__mulsf3>
    26d0:	0e 94 73 1c 	call	0x38e6	; 0x38e6 <__fixsfsi>
    26d4:	4b 01       	movw	r8, r22
    26d6:	5c 01       	movw	r10, r24
    26d8:	76 01       	movw	r14, r12
    26da:	9f ef       	ldi	r25, 0xFF	; 255
    26dc:	e9 1a       	sub	r14, r25
    26de:	f9 0a       	sbc	r15, r25
    26e0:	80 e3       	ldi	r24, 0x30	; 48
    26e2:	88 0d       	add	r24, r8
    26e4:	f6 01       	movw	r30, r12
    26e6:	80 83       	st	Z, r24
    26e8:	20 e0       	ldi	r18, 0x00	; 0
    26ea:	30 e0       	ldi	r19, 0x00	; 0
    26ec:	40 e2       	ldi	r20, 0x20	; 32
    26ee:	51 e4       	ldi	r21, 0x41	; 65
    26f0:	69 81       	ldd	r22, Y+1	; 0x01
    26f2:	7a 81       	ldd	r23, Y+2	; 0x02
    26f4:	8b 81       	ldd	r24, Y+3	; 0x03
    26f6:	9c 81       	ldd	r25, Y+4	; 0x04
    26f8:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <__mulsf3>
    26fc:	2b 01       	movw	r4, r22
    26fe:	3c 01       	movw	r6, r24
    2700:	b4 01       	movw	r22, r8
    2702:	99 0c       	add	r9, r9
    2704:	88 0b       	sbc	r24, r24
    2706:	99 0b       	sbc	r25, r25
    2708:	0e 94 ab 1c 	call	0x3956	; 0x3956 <__floatsisf>
    270c:	9b 01       	movw	r18, r22
    270e:	ac 01       	movw	r20, r24
    2710:	c3 01       	movw	r24, r6
    2712:	b2 01       	movw	r22, r4
    2714:	0e 94 8f 1b 	call	0x371e	; 0x371e <__subsf3>
    2718:	69 83       	std	Y+1, r22	; 0x01
    271a:	7a 83       	std	Y+2, r23	; 0x02
    271c:	8b 83       	std	Y+3, r24	; 0x03
    271e:	9c 83       	std	Y+4, r25	; 0x04
    2720:	0f 5f       	subi	r16, 0xFF	; 255
    2722:	1f 4f       	sbci	r17, 0xFF	; 255
    2724:	67 01       	movw	r12, r14
    2726:	04 30       	cpi	r16, 0x04	; 4
    2728:	11 05       	cpc	r17, r1
    272a:	44 f2       	brlt	.-112    	; 0x26bc <ftoa_fixed+0x158>
    272c:	f6 01       	movw	r30, r12
    272e:	10 82       	st	Z, r1
    2730:	24 96       	adiw	r28, 0x04	; 4
    2732:	cd bf       	out	0x3d, r28	; 61
    2734:	de bf       	out	0x3e, r29	; 62
    2736:	df 91       	pop	r29
    2738:	cf 91       	pop	r28
    273a:	1f 91       	pop	r17
    273c:	0f 91       	pop	r16
    273e:	ff 90       	pop	r15
    2740:	ef 90       	pop	r14
    2742:	df 90       	pop	r13
    2744:	cf 90       	pop	r12
    2746:	bf 90       	pop	r11
    2748:	af 90       	pop	r10
    274a:	9f 90       	pop	r9
    274c:	8f 90       	pop	r8
    274e:	7f 90       	pop	r7
    2750:	6f 90       	pop	r6
    2752:	5f 90       	pop	r5
    2754:	4f 90       	pop	r4
    2756:	08 95       	ret

00002758 <ftoa_sci>:
    2758:	2f 92       	push	r2
    275a:	3f 92       	push	r3
    275c:	4f 92       	push	r4
    275e:	5f 92       	push	r5
    2760:	6f 92       	push	r6
    2762:	7f 92       	push	r7
    2764:	8f 92       	push	r8
    2766:	9f 92       	push	r9
    2768:	af 92       	push	r10
    276a:	bf 92       	push	r11
    276c:	cf 92       	push	r12
    276e:	df 92       	push	r13
    2770:	ef 92       	push	r14
    2772:	ff 92       	push	r15
    2774:	0f 93       	push	r16
    2776:	1f 93       	push	r17
    2778:	cf 93       	push	r28
    277a:	df 93       	push	r29
    277c:	cd b7       	in	r28, 0x3d	; 61
    277e:	de b7       	in	r29, 0x3e	; 62
    2780:	28 97       	sbiw	r28, 0x08	; 8
    2782:	cd bf       	out	0x3d, r28	; 61
    2784:	de bf       	out	0x3e, r29	; 62
    2786:	7c 01       	movw	r14, r24
    2788:	c4 2e       	mov	r12, r20
    278a:	d5 2e       	mov	r13, r21
    278c:	06 2f       	mov	r16, r22
    278e:	17 2f       	mov	r17, r23
    2790:	49 83       	std	Y+1, r20	; 0x01
    2792:	5a 83       	std	Y+2, r21	; 0x02
    2794:	6b 83       	std	Y+3, r22	; 0x03
    2796:	7c 83       	std	Y+4, r23	; 0x04
    2798:	20 e0       	ldi	r18, 0x00	; 0
    279a:	30 e0       	ldi	r19, 0x00	; 0
    279c:	a9 01       	movw	r20, r18
    279e:	6c 2d       	mov	r22, r12
    27a0:	7d 2d       	mov	r23, r13
    27a2:	80 2f       	mov	r24, r16
    27a4:	91 2f       	mov	r25, r17
    27a6:	0e 94 fc 1b 	call	0x37f8	; 0x37f8 <__cmpsf2>
    27aa:	81 11       	cpse	r24, r1
    27ac:	05 c0       	rjmp	.+10     	; 0x27b8 <ftoa_sci+0x60>
    27ae:	80 e3       	ldi	r24, 0x30	; 48
    27b0:	f7 01       	movw	r30, r14
    27b2:	80 83       	st	Z, r24
    27b4:	11 82       	std	Z+1, r1	; 0x01
    27b6:	a2 c0       	rjmp	.+324    	; 0x28fc <ftoa_sci+0x1a4>
    27b8:	20 e0       	ldi	r18, 0x00	; 0
    27ba:	30 e0       	ldi	r19, 0x00	; 0
    27bc:	a9 01       	movw	r20, r18
    27be:	6c 2d       	mov	r22, r12
    27c0:	7d 2d       	mov	r23, r13
    27c2:	80 2f       	mov	r24, r16
    27c4:	91 2f       	mov	r25, r17
    27c6:	0e 94 fc 1b 	call	0x37f8	; 0x37f8 <__cmpsf2>
    27ca:	88 23       	and	r24, r24
    27cc:	7c f4       	brge	.+30     	; 0x27ec <ftoa_sci+0x94>
    27ce:	8d e2       	ldi	r24, 0x2D	; 45
    27d0:	f7 01       	movw	r30, r14
    27d2:	80 83       	st	Z, r24
    27d4:	89 81       	ldd	r24, Y+1	; 0x01
    27d6:	9a 81       	ldd	r25, Y+2	; 0x02
    27d8:	ab 81       	ldd	r26, Y+3	; 0x03
    27da:	bc 81       	ldd	r27, Y+4	; 0x04
    27dc:	b0 58       	subi	r27, 0x80	; 128
    27de:	89 83       	std	Y+1, r24	; 0x01
    27e0:	9a 83       	std	Y+2, r25	; 0x02
    27e2:	ab 83       	std	Y+3, r26	; 0x03
    27e4:	bc 83       	std	Y+4, r27	; 0x04
    27e6:	c7 01       	movw	r24, r14
    27e8:	01 96       	adiw	r24, 0x01	; 1
    27ea:	7c 01       	movw	r14, r24
    27ec:	ce 01       	movw	r24, r28
    27ee:	01 96       	adiw	r24, 0x01	; 1
    27f0:	0e 94 67 12 	call	0x24ce	; 0x24ce <normalize>
    27f4:	5c 01       	movw	r10, r24
    27f6:	20 e0       	ldi	r18, 0x00	; 0
    27f8:	30 e0       	ldi	r19, 0x00	; 0
    27fa:	40 e2       	ldi	r20, 0x20	; 32
    27fc:	51 e4       	ldi	r21, 0x41	; 65
    27fe:	69 81       	ldd	r22, Y+1	; 0x01
    2800:	7a 81       	ldd	r23, Y+2	; 0x02
    2802:	8b 81       	ldd	r24, Y+3	; 0x03
    2804:	9c 81       	ldd	r25, Y+4	; 0x04
    2806:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <__mulsf3>
    280a:	0e 94 73 1c 	call	0x38e6	; 0x38e6 <__fixsfsi>
    280e:	2b 01       	movw	r4, r22
    2810:	3c 01       	movw	r6, r24
    2812:	80 e3       	ldi	r24, 0x30	; 48
    2814:	84 0d       	add	r24, r4
    2816:	f7 01       	movw	r30, r14
    2818:	80 83       	st	Z, r24
    281a:	20 e0       	ldi	r18, 0x00	; 0
    281c:	30 e0       	ldi	r19, 0x00	; 0
    281e:	40 e2       	ldi	r20, 0x20	; 32
    2820:	51 e4       	ldi	r21, 0x41	; 65
    2822:	69 81       	ldd	r22, Y+1	; 0x01
    2824:	7a 81       	ldd	r23, Y+2	; 0x02
    2826:	8b 81       	ldd	r24, Y+3	; 0x03
    2828:	9c 81       	ldd	r25, Y+4	; 0x04
    282a:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <__mulsf3>
    282e:	6d 83       	std	Y+5, r22	; 0x05
    2830:	7e 83       	std	Y+6, r23	; 0x06
    2832:	8f 83       	std	Y+7, r24	; 0x07
    2834:	98 87       	std	Y+8, r25	; 0x08
    2836:	b2 01       	movw	r22, r4
    2838:	55 0c       	add	r5, r5
    283a:	88 0b       	sbc	r24, r24
    283c:	99 0b       	sbc	r25, r25
    283e:	0e 94 ab 1c 	call	0x3956	; 0x3956 <__floatsisf>
    2842:	9b 01       	movw	r18, r22
    2844:	ac 01       	movw	r20, r24
    2846:	6d 81       	ldd	r22, Y+5	; 0x05
    2848:	7e 81       	ldd	r23, Y+6	; 0x06
    284a:	8f 81       	ldd	r24, Y+7	; 0x07
    284c:	98 85       	ldd	r25, Y+8	; 0x08
    284e:	0e 94 8f 1b 	call	0x371e	; 0x371e <__subsf3>
    2852:	69 83       	std	Y+1, r22	; 0x01
    2854:	7a 83       	std	Y+2, r23	; 0x02
    2856:	8b 83       	std	Y+3, r24	; 0x03
    2858:	9c 83       	std	Y+4, r25	; 0x04
    285a:	15 01       	movw	r2, r10
    285c:	f1 e0       	ldi	r31, 0x01	; 1
    285e:	2f 1a       	sub	r2, r31
    2860:	31 08       	sbc	r3, r1
    2862:	87 01       	movw	r16, r14
    2864:	0e 5f       	subi	r16, 0xFE	; 254
    2866:	1f 4f       	sbci	r17, 0xFF	; 255
    2868:	8e e2       	ldi	r24, 0x2E	; 46
    286a:	f7 01       	movw	r30, r14
    286c:	81 83       	std	Z+1, r24	; 0x01
    286e:	e1 2c       	mov	r14, r1
    2870:	f1 2c       	mov	r15, r1
    2872:	36 c0       	rjmp	.+108    	; 0x28e0 <ftoa_sci+0x188>
    2874:	20 e0       	ldi	r18, 0x00	; 0
    2876:	30 e0       	ldi	r19, 0x00	; 0
    2878:	40 e2       	ldi	r20, 0x20	; 32
    287a:	51 e4       	ldi	r21, 0x41	; 65
    287c:	69 81       	ldd	r22, Y+1	; 0x01
    287e:	7a 81       	ldd	r23, Y+2	; 0x02
    2880:	8b 81       	ldd	r24, Y+3	; 0x03
    2882:	9c 81       	ldd	r25, Y+4	; 0x04
    2884:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <__mulsf3>
    2888:	0e 94 73 1c 	call	0x38e6	; 0x38e6 <__fixsfsi>
    288c:	2b 01       	movw	r4, r22
    288e:	3c 01       	movw	r6, r24
    2890:	68 01       	movw	r12, r16
    2892:	ff ef       	ldi	r31, 0xFF	; 255
    2894:	cf 1a       	sub	r12, r31
    2896:	df 0a       	sbc	r13, r31
    2898:	80 e3       	ldi	r24, 0x30	; 48
    289a:	84 0d       	add	r24, r4
    289c:	f8 01       	movw	r30, r16
    289e:	80 83       	st	Z, r24
    28a0:	20 e0       	ldi	r18, 0x00	; 0
    28a2:	30 e0       	ldi	r19, 0x00	; 0
    28a4:	40 e2       	ldi	r20, 0x20	; 32
    28a6:	51 e4       	ldi	r21, 0x41	; 65
    28a8:	69 81       	ldd	r22, Y+1	; 0x01
    28aa:	7a 81       	ldd	r23, Y+2	; 0x02
    28ac:	8b 81       	ldd	r24, Y+3	; 0x03
    28ae:	9c 81       	ldd	r25, Y+4	; 0x04
    28b0:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <__mulsf3>
    28b4:	4b 01       	movw	r8, r22
    28b6:	5c 01       	movw	r10, r24
    28b8:	b2 01       	movw	r22, r4
    28ba:	55 0c       	add	r5, r5
    28bc:	88 0b       	sbc	r24, r24
    28be:	99 0b       	sbc	r25, r25
    28c0:	0e 94 ab 1c 	call	0x3956	; 0x3956 <__floatsisf>
    28c4:	9b 01       	movw	r18, r22
    28c6:	ac 01       	movw	r20, r24
    28c8:	c5 01       	movw	r24, r10
    28ca:	b4 01       	movw	r22, r8
    28cc:	0e 94 8f 1b 	call	0x371e	; 0x371e <__subsf3>
    28d0:	69 83       	std	Y+1, r22	; 0x01
    28d2:	7a 83       	std	Y+2, r23	; 0x02
    28d4:	8b 83       	std	Y+3, r24	; 0x03
    28d6:	9c 83       	std	Y+4, r25	; 0x04
    28d8:	ff ef       	ldi	r31, 0xFF	; 255
    28da:	ef 1a       	sub	r14, r31
    28dc:	ff 0a       	sbc	r15, r31
    28de:	86 01       	movw	r16, r12
    28e0:	84 e0       	ldi	r24, 0x04	; 4
    28e2:	e8 16       	cp	r14, r24
    28e4:	f1 04       	cpc	r15, r1
    28e6:	34 f2       	brlt	.-116    	; 0x2874 <ftoa_sci+0x11c>
    28e8:	b8 01       	movw	r22, r16
    28ea:	6f 5f       	subi	r22, 0xFF	; 255
    28ec:	7f 4f       	sbci	r23, 0xFF	; 255
    28ee:	85 e6       	ldi	r24, 0x65	; 101
    28f0:	f8 01       	movw	r30, r16
    28f2:	80 83       	st	Z, r24
    28f4:	4a e0       	ldi	r20, 0x0A	; 10
    28f6:	c1 01       	movw	r24, r2
    28f8:	0e 94 e5 1d 	call	0x3bca	; 0x3bca <__itoa_ncheck>
    28fc:	28 96       	adiw	r28, 0x08	; 8
    28fe:	cd bf       	out	0x3d, r28	; 61
    2900:	de bf       	out	0x3e, r29	; 62
    2902:	df 91       	pop	r29
    2904:	cf 91       	pop	r28
    2906:	1f 91       	pop	r17
    2908:	0f 91       	pop	r16
    290a:	ff 90       	pop	r15
    290c:	ef 90       	pop	r14
    290e:	df 90       	pop	r13
    2910:	cf 90       	pop	r12
    2912:	bf 90       	pop	r11
    2914:	af 90       	pop	r10
    2916:	9f 90       	pop	r9
    2918:	8f 90       	pop	r8
    291a:	7f 90       	pop	r7
    291c:	6f 90       	pop	r6
    291e:	5f 90       	pop	r5
    2920:	4f 90       	pop	r4
    2922:	3f 90       	pop	r3
    2924:	2f 90       	pop	r2
    2926:	08 95       	ret

00002928 <display_vprintf>:
    2928:	6f 92       	push	r6
    292a:	7f 92       	push	r7
    292c:	8f 92       	push	r8
    292e:	9f 92       	push	r9
    2930:	bf 92       	push	r11
    2932:	cf 92       	push	r12
    2934:	df 92       	push	r13
    2936:	ef 92       	push	r14
    2938:	ff 92       	push	r15
    293a:	0f 93       	push	r16
    293c:	1f 93       	push	r17
    293e:	cf 93       	push	r28
    2940:	df 93       	push	r29
    2942:	cd b7       	in	r28, 0x3d	; 61
    2944:	de b7       	in	r29, 0x3e	; 62
    2946:	66 97       	sbiw	r28, 0x16	; 22
    2948:	cd bf       	out	0x3d, r28	; 61
    294a:	de bf       	out	0x3e, r29	; 62
    294c:	b8 2e       	mov	r11, r24
    294e:	8b 01       	movw	r16, r22
    2950:	da 01       	movw	r26, r20
    2952:	39 01       	movw	r6, r18
    2954:	80 e0       	ldi	r24, 0x00	; 0
    2956:	90 e0       	ldi	r25, 0x00	; 0
    2958:	05 c0       	rjmp	.+10     	; 0x2964 <display_vprintf+0x3c>
    295a:	fc 01       	movw	r30, r24
    295c:	ec 57       	subi	r30, 0x7C	; 124
    295e:	fa 4c       	sbci	r31, 0xCA	; 202
    2960:	10 82       	st	Z, r1
    2962:	01 96       	adiw	r24, 0x01	; 1
    2964:	84 31       	cpi	r24, 0x14	; 20
    2966:	91 05       	cpc	r25, r1
    2968:	c4 f3       	brlt	.-16     	; 0x295a <display_vprintf+0x32>
    296a:	80 e0       	ldi	r24, 0x00	; 0
    296c:	90 e0       	ldi	r25, 0x00	; 0
    296e:	05 c0       	rjmp	.+10     	; 0x297a <display_vprintf+0x52>
    2970:	fc 01       	movw	r30, r24
    2972:	e0 59       	subi	r30, 0x90	; 144
    2974:	fa 4c       	sbci	r31, 0xCA	; 202
    2976:	10 82       	st	Z, r1
    2978:	01 96       	adiw	r24, 0x01	; 1
    297a:	84 31       	cpi	r24, 0x14	; 20
    297c:	91 05       	cpc	r25, r1
    297e:	c4 f3       	brlt	.-16     	; 0x2970 <display_vprintf+0x48>
    2980:	e1 2c       	mov	r14, r1
    2982:	f1 2c       	mov	r15, r1
    2984:	14 c1       	rjmp	.+552    	; 0x2bae <display_vprintf+0x286>
    2986:	85 32       	cpi	r24, 0x25	; 37
    2988:	09 f0       	breq	.+2      	; 0x298c <display_vprintf+0x64>
    298a:	01 c1       	rjmp	.+514    	; 0x2b8e <display_vprintf+0x266>
    298c:	6d 01       	movw	r12, r26
    298e:	82 e0       	ldi	r24, 0x02	; 2
    2990:	c8 0e       	add	r12, r24
    2992:	d1 1c       	adc	r13, r1
    2994:	11 96       	adiw	r26, 0x01	; 1
    2996:	8c 91       	ld	r24, X
    2998:	85 36       	cpi	r24, 0x65	; 101
    299a:	09 f4       	brne	.+2      	; 0x299e <display_vprintf+0x76>
    299c:	cd c0       	rjmp	.+410    	; 0x2b38 <display_vprintf+0x210>
    299e:	38 f4       	brcc	.+14     	; 0x29ae <display_vprintf+0x86>
    29a0:	83 36       	cpi	r24, 0x63	; 99
    29a2:	c1 f0       	breq	.+48     	; 0x29d4 <display_vprintf+0xac>
    29a4:	08 f0       	brcs	.+2      	; 0x29a8 <display_vprintf+0x80>
    29a6:	49 c0       	rjmp	.+146    	; 0x2a3a <display_vprintf+0x112>
    29a8:	85 32       	cpi	r24, 0x25	; 37
    29aa:	51 f0       	breq	.+20     	; 0x29c0 <display_vprintf+0x98>
    29ac:	ff c0       	rjmp	.+510    	; 0x2bac <display_vprintf+0x284>
    29ae:	83 37       	cpi	r24, 0x73	; 115
    29b0:	f9 f0       	breq	.+62     	; 0x29f0 <display_vprintf+0xc8>
    29b2:	88 37       	cpi	r24, 0x78	; 120
    29b4:	09 f4       	brne	.+2      	; 0x29b8 <display_vprintf+0x90>
    29b6:	6b c0       	rjmp	.+214    	; 0x2a8e <display_vprintf+0x166>
    29b8:	86 36       	cpi	r24, 0x66	; 102
    29ba:	09 f0       	breq	.+2      	; 0x29be <display_vprintf+0x96>
    29bc:	f7 c0       	rjmp	.+494    	; 0x2bac <display_vprintf+0x284>
    29be:	91 c0       	rjmp	.+290    	; 0x2ae2 <display_vprintf+0x1ba>
    29c0:	d7 01       	movw	r26, r14
    29c2:	a0 59       	subi	r26, 0x90	; 144
    29c4:	ba 4c       	sbci	r27, 0xCA	; 202
    29c6:	85 e2       	ldi	r24, 0x25	; 37
    29c8:	8c 93       	st	X, r24
    29ca:	9f ef       	ldi	r25, 0xFF	; 255
    29cc:	e9 1a       	sub	r14, r25
    29ce:	f9 0a       	sbc	r15, r25
    29d0:	d6 01       	movw	r26, r12
    29d2:	ed c0       	rjmp	.+474    	; 0x2bae <display_vprintf+0x286>
    29d4:	f3 01       	movw	r30, r6
    29d6:	80 81       	ld	r24, Z
    29d8:	d7 01       	movw	r26, r14
    29da:	a0 59       	subi	r26, 0x90	; 144
    29dc:	ba 4c       	sbci	r27, 0xCA	; 202
    29de:	8c 93       	st	X, r24
    29e0:	ff ef       	ldi	r31, 0xFF	; 255
    29e2:	ef 1a       	sub	r14, r31
    29e4:	ff 0a       	sbc	r15, r31
    29e6:	c3 01       	movw	r24, r6
    29e8:	02 96       	adiw	r24, 0x02	; 2
    29ea:	3c 01       	movw	r6, r24
    29ec:	d6 01       	movw	r26, r12
    29ee:	df c0       	rjmp	.+446    	; 0x2bae <display_vprintf+0x286>
    29f0:	93 01       	movw	r18, r6
    29f2:	2e 5f       	subi	r18, 0xFE	; 254
    29f4:	3f 4f       	sbci	r19, 0xFF	; 255
    29f6:	f3 01       	movw	r30, r6
    29f8:	a0 81       	ld	r26, Z
    29fa:	b1 81       	ldd	r27, Z+1	; 0x01
    29fc:	80 e0       	ldi	r24, 0x00	; 0
    29fe:	90 e0       	ldi	r25, 0x00	; 0
    2a00:	0d c0       	rjmp	.+26     	; 0x2a1c <display_vprintf+0xf4>
    2a02:	b7 01       	movw	r22, r14
    2a04:	68 0f       	add	r22, r24
    2a06:	79 1f       	adc	r23, r25
    2a08:	ad 01       	movw	r20, r26
    2a0a:	48 0f       	add	r20, r24
    2a0c:	59 1f       	adc	r21, r25
    2a0e:	fa 01       	movw	r30, r20
    2a10:	40 81       	ld	r20, Z
    2a12:	fb 01       	movw	r30, r22
    2a14:	e0 59       	subi	r30, 0x90	; 144
    2a16:	fa 4c       	sbci	r31, 0xCA	; 202
    2a18:	40 83       	st	Z, r20
    2a1a:	01 96       	adiw	r24, 0x01	; 1
    2a1c:	fd 01       	movw	r30, r26
    2a1e:	01 90       	ld	r0, Z+
    2a20:	00 20       	and	r0, r0
    2a22:	e9 f7       	brne	.-6      	; 0x2a1e <display_vprintf+0xf6>
    2a24:	31 97       	sbiw	r30, 0x01	; 1
    2a26:	ea 1b       	sub	r30, r26
    2a28:	fb 0b       	sbc	r31, r27
    2a2a:	8e 17       	cp	r24, r30
    2a2c:	9f 07       	cpc	r25, r31
    2a2e:	48 f3       	brcs	.-46     	; 0x2a02 <display_vprintf+0xda>
    2a30:	ee 0e       	add	r14, r30
    2a32:	ff 1e       	adc	r15, r31
    2a34:	39 01       	movw	r6, r18
    2a36:	d6 01       	movw	r26, r12
    2a38:	ba c0       	rjmp	.+372    	; 0x2bae <display_vprintf+0x286>
    2a3a:	43 01       	movw	r8, r6
    2a3c:	f2 e0       	ldi	r31, 0x02	; 2
    2a3e:	8f 0e       	add	r8, r31
    2a40:	91 1c       	adc	r9, r1
    2a42:	4a e0       	ldi	r20, 0x0A	; 10
    2a44:	64 e8       	ldi	r22, 0x84	; 132
    2a46:	75 e3       	ldi	r23, 0x35	; 53
    2a48:	f3 01       	movw	r30, r6
    2a4a:	80 81       	ld	r24, Z
    2a4c:	91 81       	ldd	r25, Z+1	; 0x01
    2a4e:	0e 94 e5 1d 	call	0x3bca	; 0x3bca <__itoa_ncheck>
    2a52:	80 e0       	ldi	r24, 0x00	; 0
    2a54:	90 e0       	ldi	r25, 0x00	; 0
    2a56:	0b c0       	rjmp	.+22     	; 0x2a6e <display_vprintf+0x146>
    2a58:	f7 01       	movw	r30, r14
    2a5a:	e8 0f       	add	r30, r24
    2a5c:	f9 1f       	adc	r31, r25
    2a5e:	dc 01       	movw	r26, r24
    2a60:	ac 57       	subi	r26, 0x7C	; 124
    2a62:	ba 4c       	sbci	r27, 0xCA	; 202
    2a64:	2c 91       	ld	r18, X
    2a66:	e0 59       	subi	r30, 0x90	; 144
    2a68:	fa 4c       	sbci	r31, 0xCA	; 202
    2a6a:	20 83       	st	Z, r18
    2a6c:	01 96       	adiw	r24, 0x01	; 1
    2a6e:	e4 e8       	ldi	r30, 0x84	; 132
    2a70:	f5 e3       	ldi	r31, 0x35	; 53
    2a72:	01 90       	ld	r0, Z+
    2a74:	00 20       	and	r0, r0
    2a76:	e9 f7       	brne	.-6      	; 0x2a72 <display_vprintf+0x14a>
    2a78:	31 97       	sbiw	r30, 0x01	; 1
    2a7a:	e4 58       	subi	r30, 0x84	; 132
    2a7c:	f5 43       	sbci	r31, 0x35	; 53
    2a7e:	8e 17       	cp	r24, r30
    2a80:	9f 07       	cpc	r25, r31
    2a82:	50 f3       	brcs	.-44     	; 0x2a58 <display_vprintf+0x130>
    2a84:	ee 0e       	add	r14, r30
    2a86:	ff 1e       	adc	r15, r31
    2a88:	34 01       	movw	r6, r8
    2a8a:	d6 01       	movw	r26, r12
    2a8c:	90 c0       	rjmp	.+288    	; 0x2bae <display_vprintf+0x286>
    2a8e:	43 01       	movw	r8, r6
    2a90:	f2 e0       	ldi	r31, 0x02	; 2
    2a92:	8f 0e       	add	r8, r31
    2a94:	91 1c       	adc	r9, r1
    2a96:	40 e1       	ldi	r20, 0x10	; 16
    2a98:	64 e8       	ldi	r22, 0x84	; 132
    2a9a:	75 e3       	ldi	r23, 0x35	; 53
    2a9c:	f3 01       	movw	r30, r6
    2a9e:	80 81       	ld	r24, Z
    2aa0:	91 81       	ldd	r25, Z+1	; 0x01
    2aa2:	0e 94 e5 1d 	call	0x3bca	; 0x3bca <__itoa_ncheck>
    2aa6:	80 e0       	ldi	r24, 0x00	; 0
    2aa8:	90 e0       	ldi	r25, 0x00	; 0
    2aaa:	0b c0       	rjmp	.+22     	; 0x2ac2 <display_vprintf+0x19a>
    2aac:	f7 01       	movw	r30, r14
    2aae:	e8 0f       	add	r30, r24
    2ab0:	f9 1f       	adc	r31, r25
    2ab2:	dc 01       	movw	r26, r24
    2ab4:	ac 57       	subi	r26, 0x7C	; 124
    2ab6:	ba 4c       	sbci	r27, 0xCA	; 202
    2ab8:	2c 91       	ld	r18, X
    2aba:	e0 59       	subi	r30, 0x90	; 144
    2abc:	fa 4c       	sbci	r31, 0xCA	; 202
    2abe:	20 83       	st	Z, r18
    2ac0:	01 96       	adiw	r24, 0x01	; 1
    2ac2:	e4 e8       	ldi	r30, 0x84	; 132
    2ac4:	f5 e3       	ldi	r31, 0x35	; 53
    2ac6:	01 90       	ld	r0, Z+
    2ac8:	00 20       	and	r0, r0
    2aca:	e9 f7       	brne	.-6      	; 0x2ac6 <display_vprintf+0x19e>
    2acc:	31 97       	sbiw	r30, 0x01	; 1
    2ace:	e4 58       	subi	r30, 0x84	; 132
    2ad0:	f5 43       	sbci	r31, 0x35	; 53
    2ad2:	8e 17       	cp	r24, r30
    2ad4:	9f 07       	cpc	r25, r31
    2ad6:	50 f3       	brcs	.-44     	; 0x2aac <display_vprintf+0x184>
    2ad8:	ee 0e       	add	r14, r30
    2ada:	ff 1e       	adc	r15, r31
    2adc:	34 01       	movw	r6, r8
    2ade:	d6 01       	movw	r26, r12
    2ae0:	66 c0       	rjmp	.+204    	; 0x2bae <display_vprintf+0x286>
    2ae2:	43 01       	movw	r8, r6
    2ae4:	f4 e0       	ldi	r31, 0x04	; 4
    2ae6:	8f 0e       	add	r8, r31
    2ae8:	91 1c       	adc	r9, r1
    2aea:	f3 01       	movw	r30, r6
    2aec:	40 81       	ld	r20, Z
    2aee:	51 81       	ldd	r21, Z+1	; 0x01
    2af0:	62 81       	ldd	r22, Z+2	; 0x02
    2af2:	73 81       	ldd	r23, Z+3	; 0x03
    2af4:	84 e8       	ldi	r24, 0x84	; 132
    2af6:	95 e3       	ldi	r25, 0x35	; 53
    2af8:	0e 94 b2 12 	call	0x2564	; 0x2564 <ftoa_fixed>
    2afc:	80 e0       	ldi	r24, 0x00	; 0
    2afe:	90 e0       	ldi	r25, 0x00	; 0
    2b00:	0b c0       	rjmp	.+22     	; 0x2b18 <display_vprintf+0x1f0>
    2b02:	f7 01       	movw	r30, r14
    2b04:	e8 0f       	add	r30, r24
    2b06:	f9 1f       	adc	r31, r25
    2b08:	dc 01       	movw	r26, r24
    2b0a:	ac 57       	subi	r26, 0x7C	; 124
    2b0c:	ba 4c       	sbci	r27, 0xCA	; 202
    2b0e:	2c 91       	ld	r18, X
    2b10:	e0 59       	subi	r30, 0x90	; 144
    2b12:	fa 4c       	sbci	r31, 0xCA	; 202
    2b14:	20 83       	st	Z, r18
    2b16:	01 96       	adiw	r24, 0x01	; 1
    2b18:	e4 e8       	ldi	r30, 0x84	; 132
    2b1a:	f5 e3       	ldi	r31, 0x35	; 53
    2b1c:	01 90       	ld	r0, Z+
    2b1e:	00 20       	and	r0, r0
    2b20:	e9 f7       	brne	.-6      	; 0x2b1c <display_vprintf+0x1f4>
    2b22:	31 97       	sbiw	r30, 0x01	; 1
    2b24:	e4 58       	subi	r30, 0x84	; 132
    2b26:	f5 43       	sbci	r31, 0x35	; 53
    2b28:	8e 17       	cp	r24, r30
    2b2a:	9f 07       	cpc	r25, r31
    2b2c:	50 f3       	brcs	.-44     	; 0x2b02 <display_vprintf+0x1da>
    2b2e:	ee 0e       	add	r14, r30
    2b30:	ff 1e       	adc	r15, r31
    2b32:	34 01       	movw	r6, r8
    2b34:	d6 01       	movw	r26, r12
    2b36:	3b c0       	rjmp	.+118    	; 0x2bae <display_vprintf+0x286>
    2b38:	43 01       	movw	r8, r6
    2b3a:	f4 e0       	ldi	r31, 0x04	; 4
    2b3c:	8f 0e       	add	r8, r31
    2b3e:	91 1c       	adc	r9, r1
    2b40:	f3 01       	movw	r30, r6
    2b42:	40 81       	ld	r20, Z
    2b44:	51 81       	ldd	r21, Z+1	; 0x01
    2b46:	62 81       	ldd	r22, Z+2	; 0x02
    2b48:	73 81       	ldd	r23, Z+3	; 0x03
    2b4a:	84 e8       	ldi	r24, 0x84	; 132
    2b4c:	95 e3       	ldi	r25, 0x35	; 53
    2b4e:	0e 94 ac 13 	call	0x2758	; 0x2758 <ftoa_sci>
    2b52:	80 e0       	ldi	r24, 0x00	; 0
    2b54:	90 e0       	ldi	r25, 0x00	; 0
    2b56:	0b c0       	rjmp	.+22     	; 0x2b6e <display_vprintf+0x246>
    2b58:	f7 01       	movw	r30, r14
    2b5a:	e8 0f       	add	r30, r24
    2b5c:	f9 1f       	adc	r31, r25
    2b5e:	dc 01       	movw	r26, r24
    2b60:	ac 57       	subi	r26, 0x7C	; 124
    2b62:	ba 4c       	sbci	r27, 0xCA	; 202
    2b64:	2c 91       	ld	r18, X
    2b66:	e0 59       	subi	r30, 0x90	; 144
    2b68:	fa 4c       	sbci	r31, 0xCA	; 202
    2b6a:	20 83       	st	Z, r18
    2b6c:	01 96       	adiw	r24, 0x01	; 1
    2b6e:	e4 e8       	ldi	r30, 0x84	; 132
    2b70:	f5 e3       	ldi	r31, 0x35	; 53
    2b72:	01 90       	ld	r0, Z+
    2b74:	00 20       	and	r0, r0
    2b76:	e9 f7       	brne	.-6      	; 0x2b72 <display_vprintf+0x24a>
    2b78:	31 97       	sbiw	r30, 0x01	; 1
    2b7a:	e4 58       	subi	r30, 0x84	; 132
    2b7c:	f5 43       	sbci	r31, 0x35	; 53
    2b7e:	8e 17       	cp	r24, r30
    2b80:	9f 07       	cpc	r25, r31
    2b82:	50 f3       	brcs	.-44     	; 0x2b58 <display_vprintf+0x230>
    2b84:	ee 0e       	add	r14, r30
    2b86:	ff 1e       	adc	r15, r31
    2b88:	34 01       	movw	r6, r8
    2b8a:	d6 01       	movw	r26, r12
    2b8c:	10 c0       	rjmp	.+32     	; 0x2bae <display_vprintf+0x286>
    2b8e:	d7 01       	movw	r26, r14
    2b90:	a0 59       	subi	r26, 0x90	; 144
    2b92:	ba 4c       	sbci	r27, 0xCA	; 202
    2b94:	8c 93       	st	X, r24
    2b96:	8a 30       	cpi	r24, 0x0A	; 10
    2b98:	21 f4       	brne	.+8      	; 0x2ba2 <display_vprintf+0x27a>
    2b9a:	d7 01       	movw	r26, r14
    2b9c:	a0 59       	subi	r26, 0x90	; 144
    2b9e:	ba 4c       	sbci	r27, 0xCA	; 202
    2ba0:	1c 92       	st	X, r1
    2ba2:	ff ef       	ldi	r31, 0xFF	; 255
    2ba4:	ef 1a       	sub	r14, r31
    2ba6:	ff 0a       	sbc	r15, r31
    2ba8:	d9 01       	movw	r26, r18
    2baa:	01 c0       	rjmp	.+2      	; 0x2bae <display_vprintf+0x286>
    2bac:	d6 01       	movw	r26, r12
    2bae:	9d 01       	movw	r18, r26
    2bb0:	2f 5f       	subi	r18, 0xFF	; 255
    2bb2:	3f 4f       	sbci	r19, 0xFF	; 255
    2bb4:	8c 91       	ld	r24, X
    2bb6:	81 11       	cpse	r24, r1
    2bb8:	e6 ce       	rjmp	.-564    	; 0x2986 <display_vprintf+0x5e>
    2bba:	c7 01       	movw	r24, r14
    2bbc:	80 0f       	add	r24, r16
    2bbe:	91 1f       	adc	r25, r17
    2bc0:	44 97       	sbiw	r24, 0x14	; 20
    2bc2:	2c f0       	brlt	.+10     	; 0x2bce <display_vprintf+0x2a6>
    2bc4:	84 e1       	ldi	r24, 0x14	; 20
    2bc6:	90 e0       	ldi	r25, 0x00	; 0
    2bc8:	7c 01       	movw	r14, r24
    2bca:	e0 1a       	sub	r14, r16
    2bcc:	f1 0a       	sbc	r15, r17
    2bce:	80 e0       	ldi	r24, 0x00	; 0
    2bd0:	90 e0       	ldi	r25, 0x00	; 0
    2bd2:	08 c0       	rjmp	.+16     	; 0x2be4 <display_vprintf+0x2bc>
    2bd4:	e3 e0       	ldi	r30, 0x03	; 3
    2bd6:	f0 e0       	ldi	r31, 0x00	; 0
    2bd8:	ec 0f       	add	r30, r28
    2bda:	fd 1f       	adc	r31, r29
    2bdc:	e8 0f       	add	r30, r24
    2bde:	f9 1f       	adc	r31, r25
    2be0:	10 82       	st	Z, r1
    2be2:	01 96       	adiw	r24, 0x01	; 1
    2be4:	84 31       	cpi	r24, 0x14	; 20
    2be6:	91 05       	cpc	r25, r1
    2be8:	ac f3       	brlt	.-22     	; 0x2bd4 <display_vprintf+0x2ac>
    2bea:	b9 82       	std	Y+1, r11	; 0x01
    2bec:	0a 83       	std	Y+2, r16	; 0x02
    2bee:	80 e0       	ldi	r24, 0x00	; 0
    2bf0:	90 e0       	ldi	r25, 0x00	; 0
    2bf2:	0c c0       	rjmp	.+24     	; 0x2c0c <display_vprintf+0x2e4>
    2bf4:	fc 01       	movw	r30, r24
    2bf6:	e0 59       	subi	r30, 0x90	; 144
    2bf8:	fa 4c       	sbci	r31, 0xCA	; 202
    2bfa:	20 81       	ld	r18, Z
    2bfc:	e3 e0       	ldi	r30, 0x03	; 3
    2bfe:	f0 e0       	ldi	r31, 0x00	; 0
    2c00:	ec 0f       	add	r30, r28
    2c02:	fd 1f       	adc	r31, r29
    2c04:	e8 0f       	add	r30, r24
    2c06:	f9 1f       	adc	r31, r25
    2c08:	20 83       	st	Z, r18
    2c0a:	01 96       	adiw	r24, 0x01	; 1
    2c0c:	8e 15       	cp	r24, r14
    2c0e:	9f 05       	cpc	r25, r15
    2c10:	8c f3       	brlt	.-30     	; 0x2bf4 <display_vprintf+0x2cc>
    2c12:	00 e0       	ldi	r16, 0x00	; 0
    2c14:	2f ef       	ldi	r18, 0xFF	; 255
    2c16:	3f ef       	ldi	r19, 0xFF	; 255
    2c18:	a9 01       	movw	r20, r18
    2c1a:	be 01       	movw	r22, r28
    2c1c:	6f 5f       	subi	r22, 0xFF	; 255
    2c1e:	7f 4f       	sbci	r23, 0xFF	; 255
    2c20:	80 91 1f 36 	lds	r24, 0x361F	; 0x80361f <displayLineQueue>
    2c24:	90 91 20 36 	lds	r25, 0x3620	; 0x803620 <displayLineQueue+0x1>
    2c28:	0e 94 1f 07 	call	0xe3e	; 0xe3e <xQueueGenericSend>
    2c2c:	c7 01       	movw	r24, r14
    2c2e:	66 96       	adiw	r28, 0x16	; 22
    2c30:	cd bf       	out	0x3d, r28	; 61
    2c32:	de bf       	out	0x3e, r29	; 62
    2c34:	df 91       	pop	r29
    2c36:	cf 91       	pop	r28
    2c38:	1f 91       	pop	r17
    2c3a:	0f 91       	pop	r16
    2c3c:	ff 90       	pop	r15
    2c3e:	ef 90       	pop	r14
    2c40:	df 90       	pop	r13
    2c42:	cf 90       	pop	r12
    2c44:	bf 90       	pop	r11
    2c46:	9f 90       	pop	r9
    2c48:	8f 90       	pop	r8
    2c4a:	7f 90       	pop	r7
    2c4c:	6f 90       	pop	r6
    2c4e:	08 95       	ret

00002c50 <__vector_108>:
    2c50:	1f 92       	push	r1
    2c52:	0f 92       	push	r0
    2c54:	0f b6       	in	r0, 0x3f	; 63
    2c56:	0f 92       	push	r0
    2c58:	11 24       	eor	r1, r1
    2c5a:	0b b6       	in	r0, 0x3b	; 59
    2c5c:	0f 92       	push	r0
    2c5e:	2f 93       	push	r18
    2c60:	3f 93       	push	r19
    2c62:	4f 93       	push	r20
    2c64:	5f 93       	push	r21
    2c66:	6f 93       	push	r22
    2c68:	7f 93       	push	r23
    2c6a:	8f 93       	push	r24
    2c6c:	9f 93       	push	r25
    2c6e:	af 93       	push	r26
    2c70:	bf 93       	push	r27
    2c72:	ef 93       	push	r30
    2c74:	ff 93       	push	r31
    2c76:	cf 93       	push	r28
    2c78:	df 93       	push	r29
    2c7a:	1f 92       	push	r1
    2c7c:	cd b7       	in	r28, 0x3d	; 61
    2c7e:	de b7       	in	r29, 0x3e	; 62
    2c80:	19 82       	std	Y+1, r1	; 0x01
    2c82:	9e 01       	movw	r18, r28
    2c84:	2f 5f       	subi	r18, 0xFF	; 255
    2c86:	3f 4f       	sbci	r19, 0xFF	; 255
    2c88:	41 e0       	ldi	r20, 0x01	; 1
    2c8a:	50 e0       	ldi	r21, 0x00	; 0
    2c8c:	60 e0       	ldi	r22, 0x00	; 0
    2c8e:	70 e0       	ldi	r23, 0x00	; 0
    2c90:	80 91 21 36 	lds	r24, 0x3621	; 0x803621 <egDisplayTiming>
    2c94:	90 91 22 36 	lds	r25, 0x3622	; 0x803622 <egDisplayTiming+0x1>
    2c98:	0e 94 4b 03 	call	0x696	; 0x696 <xEventGroupSetBitsFromISR>
    2c9c:	60 e0       	ldi	r22, 0x00	; 0
    2c9e:	80 e0       	ldi	r24, 0x00	; 0
    2ca0:	9b e0       	ldi	r25, 0x0B	; 11
    2ca2:	0e 94 90 01 	call	0x320	; 0x320 <TC0_ConfigClockSource>
    2ca6:	10 92 06 0b 	sts	0x0B06, r1	; 0x800b06 <__TEXT_REGION_LENGTH__+0x7deb06>
    2caa:	0f 90       	pop	r0
    2cac:	df 91       	pop	r29
    2cae:	cf 91       	pop	r28
    2cb0:	ff 91       	pop	r31
    2cb2:	ef 91       	pop	r30
    2cb4:	bf 91       	pop	r27
    2cb6:	af 91       	pop	r26
    2cb8:	9f 91       	pop	r25
    2cba:	8f 91       	pop	r24
    2cbc:	7f 91       	pop	r23
    2cbe:	6f 91       	pop	r22
    2cc0:	5f 91       	pop	r21
    2cc2:	4f 91       	pop	r20
    2cc4:	3f 91       	pop	r19
    2cc6:	2f 91       	pop	r18
    2cc8:	0f 90       	pop	r0
    2cca:	0b be       	out	0x3b, r0	; 59
    2ccc:	0f 90       	pop	r0
    2cce:	0f be       	out	0x3f, r0	; 63
    2cd0:	0f 90       	pop	r0
    2cd2:	1f 90       	pop	r1
    2cd4:	18 95       	reti

00002cd6 <delayUS>:
    2cd6:	cf 92       	push	r12
    2cd8:	df 92       	push	r13
    2cda:	ef 92       	push	r14
    2cdc:	ff 92       	push	r15
    2cde:	0f 93       	push	r16
    2ce0:	6b 01       	movw	r12, r22
    2ce2:	7c 01       	movw	r14, r24
    2ce4:	82 e0       	ldi	r24, 0x02	; 2
    2ce6:	c8 16       	cp	r12, r24
    2ce8:	d1 04       	cpc	r13, r1
    2cea:	e1 04       	cpc	r14, r1
    2cec:	f1 04       	cpc	r15, r1
    2cee:	28 f4       	brcc	.+10     	; 0x2cfa <delayUS+0x24>
    2cf0:	c1 2c       	mov	r12, r1
    2cf2:	d1 2c       	mov	r13, r1
    2cf4:	76 01       	movw	r14, r12
    2cf6:	68 94       	set
    2cf8:	c1 f8       	bld	r12, 1
    2cfa:	e0 e0       	ldi	r30, 0x00	; 0
    2cfc:	fb e0       	ldi	r31, 0x0B	; 11
    2cfe:	81 e0       	ldi	r24, 0x01	; 1
    2d00:	86 83       	std	Z+6, r24	; 0x06
    2d02:	10 a2       	std	Z+32, r1	; 0x20
    2d04:	11 a2       	std	Z+33, r1	; 0x21
    2d06:	60 e0       	ldi	r22, 0x00	; 0
    2d08:	80 e0       	ldi	r24, 0x00	; 0
    2d0a:	9b e0       	ldi	r25, 0x0B	; 11
    2d0c:	0e 94 9c 01 	call	0x338	; 0x338 <TC0_ConfigWGM>
    2d10:	8e ef       	ldi	r24, 0xFE	; 254
    2d12:	c8 16       	cp	r12, r24
    2d14:	8f ef       	ldi	r24, 0xFF	; 255
    2d16:	d8 06       	cpc	r13, r24
    2d18:	e1 04       	cpc	r14, r1
    2d1a:	f1 04       	cpc	r15, r1
    2d1c:	70 f4       	brcc	.+28     	; 0x2d3a <delayUS+0x64>
    2d1e:	f6 94       	lsr	r15
    2d20:	e7 94       	ror	r14
    2d22:	d7 94       	ror	r13
    2d24:	c7 94       	ror	r12
    2d26:	c0 92 26 0b 	sts	0x0B26, r12	; 0x800b26 <__TEXT_REGION_LENGTH__+0x7deb26>
    2d2a:	d0 92 27 0b 	sts	0x0B27, r13	; 0x800b27 <__TEXT_REGION_LENGTH__+0x7deb27>
    2d2e:	65 e0       	ldi	r22, 0x05	; 5
    2d30:	80 e0       	ldi	r24, 0x00	; 0
    2d32:	9b e0       	ldi	r25, 0x0B	; 11
    2d34:	0e 94 90 01 	call	0x320	; 0x320 <TC0_ConfigClockSource>
    2d38:	19 c0       	rjmp	.+50     	; 0x2d6c <delayUS+0x96>
    2d3a:	80 e4       	ldi	r24, 0x40	; 64
    2d3c:	c8 16       	cp	r12, r24
    2d3e:	82 e4       	ldi	r24, 0x42	; 66
    2d40:	d8 06       	cpc	r13, r24
    2d42:	8f e0       	ldi	r24, 0x0F	; 15
    2d44:	e8 06       	cpc	r14, r24
    2d46:	f1 04       	cpc	r15, r1
    2d48:	88 f4       	brcc	.+34     	; 0x2d6c <delayUS+0x96>
    2d4a:	68 94       	set
    2d4c:	14 f8       	bld	r1, 4
    2d4e:	f6 94       	lsr	r15
    2d50:	e7 94       	ror	r14
    2d52:	d7 94       	ror	r13
    2d54:	c7 94       	ror	r12
    2d56:	16 94       	lsr	r1
    2d58:	d1 f7       	brne	.-12     	; 0x2d4e <delayUS+0x78>
    2d5a:	c0 92 26 0b 	sts	0x0B26, r12	; 0x800b26 <__TEXT_REGION_LENGTH__+0x7deb26>
    2d5e:	d0 92 27 0b 	sts	0x0B27, r13	; 0x800b27 <__TEXT_REGION_LENGTH__+0x7deb27>
    2d62:	67 e0       	ldi	r22, 0x07	; 7
    2d64:	80 e0       	ldi	r24, 0x00	; 0
    2d66:	9b e0       	ldi	r25, 0x0B	; 11
    2d68:	0e 94 90 01 	call	0x320	; 0x320 <TC0_ConfigClockSource>
    2d6c:	0f 2e       	mov	r0, r31
    2d6e:	f4 ef       	ldi	r31, 0xF4	; 244
    2d70:	cf 2e       	mov	r12, r31
    2d72:	dd 24       	eor	r13, r13
    2d74:	d3 94       	inc	r13
    2d76:	e1 2c       	mov	r14, r1
    2d78:	f1 2c       	mov	r15, r1
    2d7a:	f0 2d       	mov	r31, r0
    2d7c:	00 e0       	ldi	r16, 0x00	; 0
    2d7e:	21 e0       	ldi	r18, 0x01	; 1
    2d80:	41 e0       	ldi	r20, 0x01	; 1
    2d82:	50 e0       	ldi	r21, 0x00	; 0
    2d84:	60 e0       	ldi	r22, 0x00	; 0
    2d86:	70 e0       	ldi	r23, 0x00	; 0
    2d88:	80 91 21 36 	lds	r24, 0x3621	; 0x803621 <egDisplayTiming>
    2d8c:	90 91 22 36 	lds	r25, 0x3622	; 0x803622 <egDisplayTiming+0x1>
    2d90:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <xEventGroupWaitBits>
    2d94:	0f 91       	pop	r16
    2d96:	ff 90       	pop	r15
    2d98:	ef 90       	pop	r14
    2d9a:	df 90       	pop	r13
    2d9c:	cf 90       	pop	r12
    2d9e:	08 95       	ret

00002da0 <setPort>:
    2da0:	82 95       	swap	r24
    2da2:	80 7f       	andi	r24, 0xF0	; 240
    2da4:	e0 e0       	ldi	r30, 0x00	; 0
    2da6:	f6 e0       	ldi	r31, 0x06	; 6
    2da8:	94 81       	ldd	r25, Z+4	; 0x04
    2daa:	28 2f       	mov	r18, r24
    2dac:	2f 60       	ori	r18, 0x0F	; 15
    2dae:	92 23       	and	r25, r18
    2db0:	94 83       	std	Z+4, r25	; 0x04
    2db2:	94 81       	ldd	r25, Z+4	; 0x04
    2db4:	89 2b       	or	r24, r25
    2db6:	84 83       	std	Z+4, r24	; 0x04
    2db8:	08 95       	ret

00002dba <setRS>:
    2dba:	88 23       	and	r24, r24
    2dbc:	21 f0       	breq	.+8      	; 0x2dc6 <setRS+0xc>
    2dbe:	81 e0       	ldi	r24, 0x01	; 1
    2dc0:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x7de665>
    2dc4:	08 95       	ret
    2dc6:	81 e0       	ldi	r24, 0x01	; 1
    2dc8:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7de666>
    2dcc:	08 95       	ret

00002dce <setRW>:
    2dce:	88 23       	and	r24, r24
    2dd0:	21 f0       	breq	.+8      	; 0x2dda <setRW+0xc>
    2dd2:	82 e0       	ldi	r24, 0x02	; 2
    2dd4:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x7de665>
    2dd8:	08 95       	ret
    2dda:	82 e0       	ldi	r24, 0x02	; 2
    2ddc:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7de666>
    2de0:	08 95       	ret

00002de2 <setE>:
    2de2:	88 23       	and	r24, r24
    2de4:	21 f0       	breq	.+8      	; 0x2dee <setE+0xc>
    2de6:	84 e0       	ldi	r24, 0x04	; 4
    2de8:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x7de665>
    2dec:	08 95       	ret
    2dee:	84 e0       	ldi	r24, 0x04	; 4
    2df0:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7de666>
    2df4:	08 95       	ret

00002df6 <Nybble>:
    2df6:	81 e0       	ldi	r24, 0x01	; 1
    2df8:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <setE>
    2dfc:	61 e0       	ldi	r22, 0x01	; 1
    2dfe:	70 e0       	ldi	r23, 0x00	; 0
    2e00:	80 e0       	ldi	r24, 0x00	; 0
    2e02:	90 e0       	ldi	r25, 0x00	; 0
    2e04:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <delayUS>
    2e08:	80 e0       	ldi	r24, 0x00	; 0
    2e0a:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <setE>
    2e0e:	08 95       	ret

00002e10 <command>:
    2e10:	cf 93       	push	r28
    2e12:	c8 2f       	mov	r28, r24
    2e14:	82 95       	swap	r24
    2e16:	8f 70       	andi	r24, 0x0F	; 15
    2e18:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <setPort>
    2e1c:	80 e0       	ldi	r24, 0x00	; 0
    2e1e:	0e 94 dd 16 	call	0x2dba	; 0x2dba <setRS>
    2e22:	80 e0       	ldi	r24, 0x00	; 0
    2e24:	0e 94 e7 16 	call	0x2dce	; 0x2dce <setRW>
    2e28:	0e 94 fb 16 	call	0x2df6	; 0x2df6 <Nybble>
    2e2c:	8c 2f       	mov	r24, r28
    2e2e:	8f 70       	andi	r24, 0x0F	; 15
    2e30:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <setPort>
    2e34:	0e 94 fb 16 	call	0x2df6	; 0x2df6 <Nybble>
    2e38:	cf 91       	pop	r28
    2e3a:	08 95       	ret

00002e3c <write>:
    2e3c:	cf 93       	push	r28
    2e3e:	c8 2f       	mov	r28, r24
    2e40:	82 95       	swap	r24
    2e42:	8f 70       	andi	r24, 0x0F	; 15
    2e44:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <setPort>
    2e48:	81 e0       	ldi	r24, 0x01	; 1
    2e4a:	0e 94 dd 16 	call	0x2dba	; 0x2dba <setRS>
    2e4e:	80 e0       	ldi	r24, 0x00	; 0
    2e50:	0e 94 e7 16 	call	0x2dce	; 0x2dce <setRW>
    2e54:	0e 94 fb 16 	call	0x2df6	; 0x2df6 <Nybble>
    2e58:	8c 2f       	mov	r24, r28
    2e5a:	8f 70       	andi	r24, 0x0F	; 15
    2e5c:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <setPort>
    2e60:	0e 94 fb 16 	call	0x2df6	; 0x2df6 <Nybble>
    2e64:	cf 91       	pop	r28
    2e66:	08 95       	ret

00002e68 <vInitDisplay>:
 }
 
 void vInitDisplay() {
    2e68:	ef 92       	push	r14
    2e6a:	ff 92       	push	r15
    2e6c:	0f 93       	push	r16
	PORTA.DIRSET = PIN4_bm;
    2e6e:	e0 e0       	ldi	r30, 0x00	; 0
    2e70:	f6 e0       	ldi	r31, 0x06	; 6
    2e72:	80 e1       	ldi	r24, 0x10	; 16
    2e74:	81 83       	std	Z+1, r24	; 0x01
	PORTA.DIRSET = PIN5_bm;
    2e76:	80 e2       	ldi	r24, 0x20	; 32
    2e78:	81 83       	std	Z+1, r24	; 0x01
	PORTA.DIRSET = PIN6_bm;
    2e7a:	80 e4       	ldi	r24, 0x40	; 64
    2e7c:	81 83       	std	Z+1, r24	; 0x01
	PORTA.DIRSET = PIN7_bm;
    2e7e:	80 e8       	ldi	r24, 0x80	; 128
    2e80:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRSET = PIN0_bm;
    2e82:	a0 e6       	ldi	r26, 0x60	; 96
    2e84:	b6 e0       	ldi	r27, 0x06	; 6
    2e86:	81 e0       	ldi	r24, 0x01	; 1
    2e88:	11 96       	adiw	r26, 0x01	; 1
    2e8a:	8c 93       	st	X, r24
    2e8c:	11 97       	sbiw	r26, 0x01	; 1
	PORTD.DIRSET = PIN1_bm;
    2e8e:	82 e0       	ldi	r24, 0x02	; 2
    2e90:	11 96       	adiw	r26, 0x01	; 1
    2e92:	8c 93       	st	X, r24
    2e94:	11 97       	sbiw	r26, 0x01	; 1
	PORTD.DIRSET = PIN2_bm;
    2e96:	84 e0       	ldi	r24, 0x04	; 4
    2e98:	11 96       	adiw	r26, 0x01	; 1
    2e9a:	8c 93       	st	X, r24
    2e9c:	11 97       	sbiw	r26, 0x01	; 1
	PORTA.OUT &= 0x0F;
    2e9e:	84 81       	ldd	r24, Z+4	; 0x04
    2ea0:	8f 70       	andi	r24, 0x0F	; 15
    2ea2:	84 83       	std	Z+4, r24	; 0x04
	PORTD.OUT &= 0xF8;
    2ea4:	14 96       	adiw	r26, 0x04	; 4
    2ea6:	8c 91       	ld	r24, X
    2ea8:	14 97       	sbiw	r26, 0x04	; 4
    2eaa:	88 7f       	andi	r24, 0xF8	; 248
    2eac:	14 96       	adiw	r26, 0x04	; 4
    2eae:	8c 93       	st	X, r24

	if((displayLineQueue = xQueueCreate(DISPLAY_QUEUE_DEPTH, sizeof(displayLine_t))) == NULL)
    2eb0:	40 e0       	ldi	r20, 0x00	; 0
    2eb2:	66 e1       	ldi	r22, 0x16	; 22
    2eb4:	88 e0       	ldi	r24, 0x08	; 8
    2eb6:	0e 94 f5 06 	call	0xdea	; 0xdea <xQueueGenericCreate>
    2eba:	80 93 1f 36 	sts	0x361F, r24	; 0x80361f <displayLineQueue>
    2ebe:	90 93 20 36 	sts	0x3620, r25	; 0x803620 <displayLineQueue+0x1>
	{
		//error(ERR_QUEUE_CREATE_HANDLE_NULL);
	}
	
	egDisplayTiming = xEventGroupCreate();
    2ec2:	0e 94 dd 01 	call	0x3ba	; 0x3ba <xEventGroupCreate>
    2ec6:	80 93 21 36 	sts	0x3621, r24	; 0x803621 <egDisplayTiming>
    2eca:	90 93 22 36 	sts	0x3622, r25	; 0x803622 <egDisplayTiming+0x1>
	

	xTaskCreate(vDisplayUpdateTask, (const char*) "dispUpdate", configMINIMAL_STACK_SIZE+150, NULL, 1, NULL);	
    2ece:	e1 2c       	mov	r14, r1
    2ed0:	f1 2c       	mov	r15, r1
    2ed2:	01 e0       	ldi	r16, 0x01	; 1
    2ed4:	20 e0       	ldi	r18, 0x00	; 0
    2ed6:	30 e0       	ldi	r19, 0x00	; 0
    2ed8:	4e e5       	ldi	r20, 0x5E	; 94
    2eda:	51 e0       	ldi	r21, 0x01	; 1
    2edc:	69 e4       	ldi	r22, 0x49	; 73
    2ede:	70 e2       	ldi	r23, 0x20	; 32
    2ee0:	8c ec       	ldi	r24, 0xCC	; 204
    2ee2:	97 e1       	ldi	r25, 0x17	; 23
    2ee4:	0e 94 83 0a 	call	0x1506	; 0x1506 <xTaskCreate>
 }
    2ee8:	0f 91       	pop	r16
    2eea:	ff 90       	pop	r15
    2eec:	ef 90       	pop	r14
    2eee:	08 95       	ret

00002ef0 <_displaySetPos>:
 
 void _displaySetPos(int line, int pos) {
	 switch(line) {
    2ef0:	81 30       	cpi	r24, 0x01	; 1
    2ef2:	91 05       	cpc	r25, r1
    2ef4:	79 f0       	breq	.+30     	; 0x2f14 <_displaySetPos+0x24>
    2ef6:	1c f4       	brge	.+6      	; 0x2efe <_displaySetPos+0xe>
    2ef8:	89 2b       	or	r24, r25
    2efa:	39 f0       	breq	.+14     	; 0x2f0a <_displaySetPos+0x1a>
    2efc:	19 c0       	rjmp	.+50     	; 0x2f30 <_displaySetPos+0x40>
    2efe:	82 30       	cpi	r24, 0x02	; 2
    2f00:	91 05       	cpc	r25, r1
    2f02:	69 f0       	breq	.+26     	; 0x2f1e <_displaySetPos+0x2e>
    2f04:	03 97       	sbiw	r24, 0x03	; 3
    2f06:	81 f0       	breq	.+32     	; 0x2f28 <_displaySetPos+0x38>
    2f08:	13 c0       	rjmp	.+38     	; 0x2f30 <_displaySetPos+0x40>
		 case 0:
		 command(0x80 + 0x00 + pos);
    2f0a:	80 e8       	ldi	r24, 0x80	; 128
    2f0c:	86 0f       	add	r24, r22
    2f0e:	0e 94 08 17 	call	0x2e10	; 0x2e10 <command>
		 break;
    2f12:	0e c0       	rjmp	.+28     	; 0x2f30 <_displaySetPos+0x40>
		 case 1:
		 command(0x80 + 0x40 + pos);
    2f14:	80 ec       	ldi	r24, 0xC0	; 192
    2f16:	86 0f       	add	r24, r22
    2f18:	0e 94 08 17 	call	0x2e10	; 0x2e10 <command>
		 break;
    2f1c:	09 c0       	rjmp	.+18     	; 0x2f30 <_displaySetPos+0x40>
		 case 2:
		 command(0x80 + 0x14 + pos);
    2f1e:	84 e9       	ldi	r24, 0x94	; 148
    2f20:	86 0f       	add	r24, r22
    2f22:	0e 94 08 17 	call	0x2e10	; 0x2e10 <command>
		 break;
    2f26:	04 c0       	rjmp	.+8      	; 0x2f30 <_displaySetPos+0x40>
		 case 3:
		 command(0x80 + 0x54 + pos);
    2f28:	84 ed       	ldi	r24, 0xD4	; 212
    2f2a:	86 0f       	add	r24, r22
    2f2c:	0e 94 08 17 	call	0x2e10	; 0x2e10 <command>
		 break;
	 }
	 delayUS(39);
    2f30:	67 e2       	ldi	r22, 0x27	; 39
    2f32:	70 e0       	ldi	r23, 0x00	; 0
    2f34:	80 e0       	ldi	r24, 0x00	; 0
    2f36:	90 e0       	ldi	r25, 0x00	; 0
    2f38:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <delayUS>
    2f3c:	08 95       	ret

00002f3e <_displayWriteChar>:
 }

 void _displayWriteChar(char c) {
	 write(c);
    2f3e:	0e 94 1e 17 	call	0x2e3c	; 0x2e3c <write>
	 delayUS(43);
    2f42:	6b e2       	ldi	r22, 0x2B	; 43
    2f44:	70 e0       	ldi	r23, 0x00	; 0
    2f46:	80 e0       	ldi	r24, 0x00	; 0
    2f48:	90 e0       	ldi	r25, 0x00	; 0
    2f4a:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <delayUS>
    2f4e:	08 95       	ret

00002f50 <_displayWriteString>:
 }
 
 void _displayWriteString(char* s) {
    2f50:	0f 93       	push	r16
    2f52:	1f 93       	push	r17
    2f54:	cf 93       	push	r28
    2f56:	df 93       	push	r29
    2f58:	8c 01       	movw	r16, r24
	 for(int i = 0; i < 20; i++) {
    2f5a:	c0 e0       	ldi	r28, 0x00	; 0
    2f5c:	d0 e0       	ldi	r29, 0x00	; 0
    2f5e:	09 c0       	rjmp	.+18     	; 0x2f72 <_displayWriteString+0x22>
		 if(s[i] == '\0') {
    2f60:	f8 01       	movw	r30, r16
    2f62:	ec 0f       	add	r30, r28
    2f64:	fd 1f       	adc	r31, r29
    2f66:	80 81       	ld	r24, Z
    2f68:	88 23       	and	r24, r24
    2f6a:	31 f0       	breq	.+12     	; 0x2f78 <_displayWriteString+0x28>
			 break;
		 }
		 _displayWriteChar(s[i]);
    2f6c:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <_displayWriteChar>
	 write(c);
	 delayUS(43);
 }
 
 void _displayWriteString(char* s) {
	 for(int i = 0; i < 20; i++) {
    2f70:	21 96       	adiw	r28, 0x01	; 1
    2f72:	c4 31       	cpi	r28, 0x14	; 20
    2f74:	d1 05       	cpc	r29, r1
    2f76:	a4 f3       	brlt	.-24     	; 0x2f60 <_displayWriteString+0x10>
		 if(s[i] == '\0') {
			 break;
		 }
		 _displayWriteChar(s[i]);
	 }
 }
    2f78:	df 91       	pop	r29
    2f7a:	cf 91       	pop	r28
    2f7c:	1f 91       	pop	r17
    2f7e:	0f 91       	pop	r16
    2f80:	08 95       	ret

00002f82 <_displayWriteStringAtPos>:

 void _displayWriteStringAtPos(int line, int pos, char* s) {
    2f82:	cf 93       	push	r28
    2f84:	df 93       	push	r29
    2f86:	ea 01       	movw	r28, r20
	 _displaySetPos(line, pos);
    2f88:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <_displaySetPos>
	 _displayWriteString(s);
    2f8c:	ce 01       	movw	r24, r28
    2f8e:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <_displayWriteString>
 }
    2f92:	df 91       	pop	r29
    2f94:	cf 91       	pop	r28
    2f96:	08 95       	ret

00002f98 <vDisplayUpdateTask>:

 void vDisplayUpdateTask(void *pvParameters) {
    2f98:	cf 93       	push	r28
    2f9a:	df 93       	push	r29
    2f9c:	cd b7       	in	r28, 0x3d	; 61
    2f9e:	de b7       	in	r29, 0x3e	; 62
    2fa0:	c6 56       	subi	r28, 0x66	; 102
    2fa2:	d1 09       	sbc	r29, r1
    2fa4:	cd bf       	out	0x3d, r28	; 61
    2fa6:	de bf       	out	0x3e, r29	; 62
	 int i = 0;
	 int j = 0;
	 char displayLines[4][20];
	 for(int i = 0; i < 4;i++) {
    2fa8:	80 e0       	ldi	r24, 0x00	; 0
    2faa:	90 e0       	ldi	r25, 0x00	; 0
    2fac:	19 c0       	rjmp	.+50     	; 0x2fe0 <vDisplayUpdateTask+0x48>
		for(int j = 0; j < 20; j ++) {
			displayLines[i][j] = 0x20;
    2fae:	44 e1       	ldi	r20, 0x14	; 20
    2fb0:	48 9f       	mul	r20, r24
    2fb2:	f0 01       	movw	r30, r0
    2fb4:	49 9f       	mul	r20, r25
    2fb6:	f0 0d       	add	r31, r0
    2fb8:	11 24       	eor	r1, r1
    2fba:	41 e0       	ldi	r20, 0x01	; 1
    2fbc:	50 e0       	ldi	r21, 0x00	; 0
    2fbe:	4c 0f       	add	r20, r28
    2fc0:	5d 1f       	adc	r21, r29
    2fc2:	e4 0f       	add	r30, r20
    2fc4:	f5 1f       	adc	r31, r21
    2fc6:	e2 0f       	add	r30, r18
    2fc8:	f3 1f       	adc	r31, r19
    2fca:	40 e2       	ldi	r20, 0x20	; 32
    2fcc:	40 83       	st	Z, r20
 void vDisplayUpdateTask(void *pvParameters) {
	 int i = 0;
	 int j = 0;
	 char displayLines[4][20];
	 for(int i = 0; i < 4;i++) {
		for(int j = 0; j < 20; j ++) {
    2fce:	2f 5f       	subi	r18, 0xFF	; 255
    2fd0:	3f 4f       	sbci	r19, 0xFF	; 255
    2fd2:	02 c0       	rjmp	.+4      	; 0x2fd8 <vDisplayUpdateTask+0x40>
    2fd4:	20 e0       	ldi	r18, 0x00	; 0
    2fd6:	30 e0       	ldi	r19, 0x00	; 0
    2fd8:	24 31       	cpi	r18, 0x14	; 20
    2fda:	31 05       	cpc	r19, r1
    2fdc:	44 f3       	brlt	.-48     	; 0x2fae <vDisplayUpdateTask+0x16>

 void vDisplayUpdateTask(void *pvParameters) {
	 int i = 0;
	 int j = 0;
	 char displayLines[4][20];
	 for(int i = 0; i < 4;i++) {
    2fde:	01 96       	adiw	r24, 0x01	; 1
    2fe0:	84 30       	cpi	r24, 0x04	; 4
    2fe2:	91 05       	cpc	r25, r1
    2fe4:	bc f3       	brlt	.-18     	; 0x2fd4 <vDisplayUpdateTask+0x3c>
			displayLines[i][j] = 0x20;
		}
	 }
	 displayLine_t newLine;

	 delayUS(40000);
    2fe6:	60 e4       	ldi	r22, 0x40	; 64
    2fe8:	7c e9       	ldi	r23, 0x9C	; 156
    2fea:	80 e0       	ldi	r24, 0x00	; 0
    2fec:	90 e0       	ldi	r25, 0x00	; 0
    2fee:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <delayUS>
	 setPort(0x03);
    2ff2:	83 e0       	ldi	r24, 0x03	; 3
    2ff4:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <setPort>
	 delayUS(5000);
    2ff8:	68 e8       	ldi	r22, 0x88	; 136
    2ffa:	73 e1       	ldi	r23, 0x13	; 19
    2ffc:	80 e0       	ldi	r24, 0x00	; 0
    2ffe:	90 e0       	ldi	r25, 0x00	; 0
    3000:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <delayUS>
	 Nybble();
    3004:	0e 94 fb 16 	call	0x2df6	; 0x2df6 <Nybble>
	 delayUS(160);
    3008:	60 ea       	ldi	r22, 0xA0	; 160
    300a:	70 e0       	ldi	r23, 0x00	; 0
    300c:	80 e0       	ldi	r24, 0x00	; 0
    300e:	90 e0       	ldi	r25, 0x00	; 0
    3010:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <delayUS>
	 Nybble();
    3014:	0e 94 fb 16 	call	0x2df6	; 0x2df6 <Nybble>
	 delayUS(160);
    3018:	60 ea       	ldi	r22, 0xA0	; 160
    301a:	70 e0       	ldi	r23, 0x00	; 0
    301c:	80 e0       	ldi	r24, 0x00	; 0
    301e:	90 e0       	ldi	r25, 0x00	; 0
    3020:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <delayUS>
	 Nybble();
    3024:	0e 94 fb 16 	call	0x2df6	; 0x2df6 <Nybble>
	 delayUS(160);
    3028:	60 ea       	ldi	r22, 0xA0	; 160
    302a:	70 e0       	ldi	r23, 0x00	; 0
    302c:	80 e0       	ldi	r24, 0x00	; 0
    302e:	90 e0       	ldi	r25, 0x00	; 0
    3030:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <delayUS>
	 setPort(0x02);
    3034:	82 e0       	ldi	r24, 0x02	; 2
    3036:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <setPort>
	 Nybble();
    303a:	0e 94 fb 16 	call	0x2df6	; 0x2df6 <Nybble>
	 command(0x28);
    303e:	88 e2       	ldi	r24, 0x28	; 40
    3040:	0e 94 08 17 	call	0x2e10	; 0x2e10 <command>
	 command(0x10);
    3044:	80 e1       	ldi	r24, 0x10	; 16
    3046:	0e 94 08 17 	call	0x2e10	; 0x2e10 <command>
	 command(0x0C); //Cursor and Blinking off
    304a:	8c e0       	ldi	r24, 0x0C	; 12
    304c:	0e 94 08 17 	call	0x2e10	; 0x2e10 <command>
	 command(0x06);
    3050:	86 e0       	ldi	r24, 0x06	; 6
    3052:	0e 94 08 17 	call	0x2e10	; 0x2e10 <command>
	 
	 for(;;) {		 
		 vTaskDelay(DISPLAY_UPDATE_TIME_MS/portTICK_RATE_MS);
    3056:	68 ec       	ldi	r22, 0xC8	; 200
    3058:	70 e0       	ldi	r23, 0x00	; 0
    305a:	80 e0       	ldi	r24, 0x00	; 0
    305c:	90 e0       	ldi	r25, 0x00	; 0
    305e:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <vTaskDelay>
		 if(xEventGroupGetBits(egDisplayTiming) && EG_DISPLAY_CLEAR != 0x00) {
    3062:	40 e0       	ldi	r20, 0x00	; 0
    3064:	50 e0       	ldi	r21, 0x00	; 0
    3066:	ba 01       	movw	r22, r20
    3068:	80 91 21 36 	lds	r24, 0x3621	; 0x803621 <egDisplayTiming>
    306c:	90 91 22 36 	lds	r25, 0x3622	; 0x803622 <egDisplayTiming+0x1>
    3070:	0e 94 99 02 	call	0x532	; 0x532 <xEventGroupClearBits>
    3074:	67 2b       	or	r22, r23
    3076:	68 2b       	or	r22, r24
    3078:	69 2b       	or	r22, r25
    307a:	09 f4       	brne	.+2      	; 0x307e <vDisplayUpdateTask+0xe6>
    307c:	5f c0       	rjmp	.+190    	; 0x313c <vDisplayUpdateTask+0x1a4>
			xEventGroupClearBits(egDisplayTiming, EG_DISPLAY_CLEAR);
    307e:	42 e0       	ldi	r20, 0x02	; 2
    3080:	50 e0       	ldi	r21, 0x00	; 0
    3082:	60 e0       	ldi	r22, 0x00	; 0
    3084:	70 e0       	ldi	r23, 0x00	; 0
    3086:	80 91 21 36 	lds	r24, 0x3621	; 0x803621 <egDisplayTiming>
    308a:	90 91 22 36 	lds	r25, 0x3622	; 0x803622 <egDisplayTiming+0x1>
    308e:	0e 94 99 02 	call	0x532	; 0x532 <xEventGroupClearBits>
			for(i = 0; i < 4;i++) {
    3092:	40 e0       	ldi	r20, 0x00	; 0
    3094:	50 e0       	ldi	r21, 0x00	; 0
    3096:	19 c0       	rjmp	.+50     	; 0x30ca <vDisplayUpdateTask+0x132>
				for(j = 0; j < 20; j ++) {
					displayLines[i][j] = 0x20;
    3098:	24 e1       	ldi	r18, 0x14	; 20
    309a:	24 9f       	mul	r18, r20
    309c:	f0 01       	movw	r30, r0
    309e:	25 9f       	mul	r18, r21
    30a0:	f0 0d       	add	r31, r0
    30a2:	11 24       	eor	r1, r1
    30a4:	21 e0       	ldi	r18, 0x01	; 1
    30a6:	30 e0       	ldi	r19, 0x00	; 0
    30a8:	2c 0f       	add	r18, r28
    30aa:	3d 1f       	adc	r19, r29
    30ac:	e2 0f       	add	r30, r18
    30ae:	f3 1f       	adc	r31, r19
    30b0:	e8 0f       	add	r30, r24
    30b2:	f9 1f       	adc	r31, r25
    30b4:	20 e2       	ldi	r18, 0x20	; 32
    30b6:	20 83       	st	Z, r18
	 for(;;) {		 
		 vTaskDelay(DISPLAY_UPDATE_TIME_MS/portTICK_RATE_MS);
		 if(xEventGroupGetBits(egDisplayTiming) && EG_DISPLAY_CLEAR != 0x00) {
			xEventGroupClearBits(egDisplayTiming, EG_DISPLAY_CLEAR);
			for(i = 0; i < 4;i++) {
				for(j = 0; j < 20; j ++) {
    30b8:	01 96       	adiw	r24, 0x01	; 1
    30ba:	02 c0       	rjmp	.+4      	; 0x30c0 <vDisplayUpdateTask+0x128>
    30bc:	80 e0       	ldi	r24, 0x00	; 0
    30be:	90 e0       	ldi	r25, 0x00	; 0
    30c0:	84 31       	cpi	r24, 0x14	; 20
    30c2:	91 05       	cpc	r25, r1
    30c4:	4c f3       	brlt	.-46     	; 0x3098 <vDisplayUpdateTask+0x100>
	 
	 for(;;) {		 
		 vTaskDelay(DISPLAY_UPDATE_TIME_MS/portTICK_RATE_MS);
		 if(xEventGroupGetBits(egDisplayTiming) && EG_DISPLAY_CLEAR != 0x00) {
			xEventGroupClearBits(egDisplayTiming, EG_DISPLAY_CLEAR);
			for(i = 0; i < 4;i++) {
    30c6:	4f 5f       	subi	r20, 0xFF	; 255
    30c8:	5f 4f       	sbci	r21, 0xFF	; 255
    30ca:	44 30       	cpi	r20, 0x04	; 4
    30cc:	51 05       	cpc	r21, r1
    30ce:	b4 f3       	brlt	.-20     	; 0x30bc <vDisplayUpdateTask+0x124>
    30d0:	35 c0       	rjmp	.+106    	; 0x313c <vDisplayUpdateTask+0x1a4>
					displayLines[i][j] = 0x20;
				}
			}
		 }
		 while(uxQueueMessagesWaiting(displayLineQueue) > 0) {
			 if(xQueueReceive(displayLineQueue, &newLine, portMAX_DELAY)) {	
    30d2:	2f ef       	ldi	r18, 0xFF	; 255
    30d4:	3f ef       	ldi	r19, 0xFF	; 255
    30d6:	a9 01       	movw	r20, r18
    30d8:	be 01       	movw	r22, r28
    30da:	6f 5a       	subi	r22, 0xAF	; 175
    30dc:	7f 4f       	sbci	r23, 0xFF	; 255
    30de:	80 91 1f 36 	lds	r24, 0x361F	; 0x80361f <displayLineQueue>
    30e2:	90 91 20 36 	lds	r25, 0x3620	; 0x803620 <displayLineQueue+0x1>
    30e6:	0e 94 03 08 	call	0x1006	; 0x1006 <xQueueReceive>
    30ea:	88 23       	and	r24, r24
    30ec:	39 f1       	breq	.+78     	; 0x313c <vDisplayUpdateTask+0x1a4>
    30ee:	12 c0       	rjmp	.+36     	; 0x3114 <vDisplayUpdateTask+0x17c>
				i=0;			
				while((i+newLine.displayPos < 20) && (newLine.displayBuffer[i] != 0x00)) {				
					displayLines[newLine.displayLine][i+newLine.displayPos] = newLine.displayBuffer[i];
    30f0:	62 96       	adiw	r28, 0x12	; 18
    30f2:	4f ad       	ldd	r20, Y+63	; 0x3f
    30f4:	62 97       	sbiw	r28, 0x12	; 18
    30f6:	e1 e0       	ldi	r30, 0x01	; 1
    30f8:	f0 e0       	ldi	r31, 0x00	; 0
    30fa:	ec 0f       	add	r30, r28
    30fc:	fd 1f       	adc	r31, r29
    30fe:	74 e1       	ldi	r23, 0x14	; 20
    3100:	47 9f       	mul	r20, r23
    3102:	e0 0d       	add	r30, r0
    3104:	f1 1d       	adc	r31, r1
    3106:	11 24       	eor	r1, r1
    3108:	e8 0f       	add	r30, r24
    310a:	f9 1f       	adc	r31, r25
    310c:	60 83       	st	Z, r22
					i++;
    310e:	2f 5f       	subi	r18, 0xFF	; 255
    3110:	3f 4f       	sbci	r19, 0xFF	; 255
    3112:	02 c0       	rjmp	.+4      	; 0x3118 <vDisplayUpdateTask+0x180>
    3114:	20 e0       	ldi	r18, 0x00	; 0
    3116:	30 e0       	ldi	r19, 0x00	; 0
			}
		 }
		 while(uxQueueMessagesWaiting(displayLineQueue) > 0) {
			 if(xQueueReceive(displayLineQueue, &newLine, portMAX_DELAY)) {	
				i=0;			
				while((i+newLine.displayPos < 20) && (newLine.displayBuffer[i] != 0x00)) {				
    3118:	63 96       	adiw	r28, 0x13	; 19
    311a:	8f ad       	ldd	r24, Y+63	; 0x3f
    311c:	63 97       	sbiw	r28, 0x13	; 19
    311e:	f9 01       	movw	r30, r18
    3120:	e8 0f       	add	r30, r24
    3122:	f1 1d       	adc	r31, r1
    3124:	cf 01       	movw	r24, r30
    3126:	74 97       	sbiw	r30, 0x14	; 20
    3128:	4c f4       	brge	.+18     	; 0x313c <vDisplayUpdateTask+0x1a4>
    312a:	e1 e5       	ldi	r30, 0x51	; 81
    312c:	f0 e0       	ldi	r31, 0x00	; 0
    312e:	ec 0f       	add	r30, r28
    3130:	fd 1f       	adc	r31, r29
    3132:	e2 0f       	add	r30, r18
    3134:	f3 1f       	adc	r31, r19
    3136:	62 81       	ldd	r22, Z+2	; 0x02
    3138:	61 11       	cpse	r22, r1
    313a:	da cf       	rjmp	.-76     	; 0x30f0 <vDisplayUpdateTask+0x158>
				for(j = 0; j < 20; j ++) {
					displayLines[i][j] = 0x20;
				}
			}
		 }
		 while(uxQueueMessagesWaiting(displayLineQueue) > 0) {
    313c:	80 91 1f 36 	lds	r24, 0x361F	; 0x80361f <displayLineQueue>
    3140:	90 91 20 36 	lds	r25, 0x3620	; 0x803620 <displayLineQueue+0x1>
    3144:	0e 94 a2 08 	call	0x1144	; 0x1144 <uxQueueMessagesWaiting>
    3148:	81 11       	cpse	r24, r1
    314a:	c3 cf       	rjmp	.-122    	; 0x30d2 <vDisplayUpdateTask+0x13a>
    314c:	00 e0       	ldi	r16, 0x00	; 0
    314e:	10 e0       	ldi	r17, 0x00	; 0
    3150:	13 c0       	rjmp	.+38     	; 0x3178 <vDisplayUpdateTask+0x1e0>
					i++;
				}
			 }
		 }
		 for(i = 0; i < 4; i++) {
			 _displayWriteStringAtPos(i,0,&displayLines[i][0]);
    3152:	84 e1       	ldi	r24, 0x14	; 20
    3154:	80 9f       	mul	r24, r16
    3156:	a0 01       	movw	r20, r0
    3158:	81 9f       	mul	r24, r17
    315a:	50 0d       	add	r21, r0
    315c:	11 24       	eor	r1, r1
    315e:	21 e0       	ldi	r18, 0x01	; 1
    3160:	30 e0       	ldi	r19, 0x00	; 0
    3162:	2c 0f       	add	r18, r28
    3164:	3d 1f       	adc	r19, r29
    3166:	42 0f       	add	r20, r18
    3168:	53 1f       	adc	r21, r19
    316a:	60 e0       	ldi	r22, 0x00	; 0
    316c:	70 e0       	ldi	r23, 0x00	; 0
    316e:	c8 01       	movw	r24, r16
    3170:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <_displayWriteStringAtPos>
					displayLines[newLine.displayLine][i+newLine.displayPos] = newLine.displayBuffer[i];
					i++;
				}
			 }
		 }
		 for(i = 0; i < 4; i++) {
    3174:	0f 5f       	subi	r16, 0xFF	; 255
    3176:	1f 4f       	sbci	r17, 0xFF	; 255
    3178:	04 30       	cpi	r16, 0x04	; 4
    317a:	11 05       	cpc	r17, r1
    317c:	54 f3       	brlt	.-44     	; 0x3152 <vDisplayUpdateTask+0x1ba>
    317e:	6b cf       	rjmp	.-298    	; 0x3056 <vDisplayUpdateTask+0xbe>

00003180 <vDisplayClear>:
	 }
 }
 

void vDisplayClear() {
	xEventGroupSetBits(egDisplayTiming, EG_DISPLAY_CLEAR);
    3180:	42 e0       	ldi	r20, 0x02	; 2
    3182:	50 e0       	ldi	r21, 0x00	; 0
    3184:	60 e0       	ldi	r22, 0x00	; 0
    3186:	70 e0       	ldi	r23, 0x00	; 0
    3188:	80 91 21 36 	lds	r24, 0x3621	; 0x803621 <egDisplayTiming>
    318c:	90 91 22 36 	lds	r25, 0x3622	; 0x803622 <egDisplayTiming+0x1>
    3190:	0e 94 ba 02 	call	0x574	; 0x574 <xEventGroupSetBits>
    3194:	08 95       	ret

00003196 <vDisplayWriteStringAtPos>:
}

void vDisplayWriteStringAtPos(int line, int pos, char const *fmt, ...) {
    3196:	cf 93       	push	r28
    3198:	df 93       	push	r29
    319a:	cd b7       	in	r28, 0x3d	; 61
    319c:	de b7       	in	r29, 0x3e	; 62
	va_list arg;	
	va_start(arg, fmt);
	display_vprintf(line, pos, fmt, arg);
    319e:	9e 01       	movw	r18, r28
    31a0:	24 5f       	subi	r18, 0xF4	; 244
    31a2:	3f 4f       	sbci	r19, 0xFF	; 255
    31a4:	4a 85       	ldd	r20, Y+10	; 0x0a
    31a6:	5b 85       	ldd	r21, Y+11	; 0x0b
    31a8:	68 85       	ldd	r22, Y+8	; 0x08
    31aa:	79 85       	ldd	r23, Y+9	; 0x09
    31ac:	8e 81       	ldd	r24, Y+6	; 0x06
    31ae:	9f 81       	ldd	r25, Y+7	; 0x07
    31b0:	0e 94 94 14 	call	0x2928	; 0x2928 <display_vprintf>
	va_end(arg);	
}
    31b4:	df 91       	pop	r29
    31b6:	cf 91       	pop	r28
    31b8:	08 95       	ret

000031ba <vQuamDec>:
#include "qamdec.h"

QueueHandle_t decoderQueue;

void vQuamDec(void* pvParameters)
{
    31ba:	cf 93       	push	r28
    31bc:	df 93       	push	r29
    31be:	cd b7       	in	r28, 0x3d	; 61
    31c0:	de b7       	in	r29, 0x3e	; 62
    31c2:	c0 54       	subi	r28, 0x40	; 64
    31c4:	d1 09       	sbc	r29, r1
    31c6:	cd bf       	out	0x3d, r28	; 61
    31c8:	de bf       	out	0x3e, r29	; 62
	( void ) pvParameters;
	
	decoderQueue = xQueueCreate( 4, NR_OF_SAMPLES * sizeof(int16_t) );
    31ca:	40 e0       	ldi	r20, 0x00	; 0
    31cc:	60 e4       	ldi	r22, 0x40	; 64
    31ce:	84 e0       	ldi	r24, 0x04	; 4
    31d0:	0e 94 f5 06 	call	0xdea	; 0xdea <xQueueGenericCreate>
    31d4:	80 93 23 36 	sts	0x3623, r24	; 0x803623 <decoderQueue>
    31d8:	90 93 24 36 	sts	0x3624, r25	; 0x803624 <decoderQueue+0x1>
	
	while(evDMAState == NULL) {
    31dc:	06 c0       	rjmp	.+12     	; 0x31ea <vQuamDec+0x30>
		vTaskDelay(3/portTICK_RATE_MS);
    31de:	63 e0       	ldi	r22, 0x03	; 3
    31e0:	70 e0       	ldi	r23, 0x00	; 0
    31e2:	80 e0       	ldi	r24, 0x00	; 0
    31e4:	90 e0       	ldi	r25, 0x00	; 0
    31e6:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <vTaskDelay>
{
	( void ) pvParameters;
	
	decoderQueue = xQueueCreate( 4, NR_OF_SAMPLES * sizeof(int16_t) );
	
	while(evDMAState == NULL) {
    31ea:	80 91 1d 36 	lds	r24, 0x361D	; 0x80361d <evDMAState>
    31ee:	90 91 1e 36 	lds	r25, 0x361E	; 0x80361e <evDMAState+0x1>
    31f2:	00 97       	sbiw	r24, 0x00	; 0
    31f4:	a1 f3       	breq	.-24     	; 0x31de <vQuamDec+0x24>
		vTaskDelay(3/portTICK_RATE_MS);
	}
	
	uint16_t bufferelement[NR_OF_SAMPLES];
	
	xEventGroupWaitBits(evDMAState, DMADECREADY, false, true, portMAX_DELAY);
    31f6:	cc 24       	eor	r12, r12
    31f8:	ca 94       	dec	r12
    31fa:	dc 2c       	mov	r13, r12
    31fc:	76 01       	movw	r14, r12
    31fe:	01 e0       	ldi	r16, 0x01	; 1
    3200:	20 e0       	ldi	r18, 0x00	; 0
    3202:	41 e0       	ldi	r20, 0x01	; 1
    3204:	50 e0       	ldi	r21, 0x00	; 0
    3206:	60 e0       	ldi	r22, 0x00	; 0
    3208:	70 e0       	ldi	r23, 0x00	; 0
    320a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <xEventGroupWaitBits>
    320e:	0c c0       	rjmp	.+24     	; 0x3228 <vQuamDec+0x6e>
	for(;;) {
		while(uxQueueMessagesWaiting(decoderQueue) > 0) {
			if(xQueueReceive(decoderQueue, &bufferelement[0], portMAX_DELAY) == pdTRUE) {
    3210:	2f ef       	ldi	r18, 0xFF	; 255
    3212:	3f ef       	ldi	r19, 0xFF	; 255
    3214:	a9 01       	movw	r20, r18
    3216:	be 01       	movw	r22, r28
    3218:	6f 5f       	subi	r22, 0xFF	; 255
    321a:	7f 4f       	sbci	r23, 0xFF	; 255
    321c:	80 91 23 36 	lds	r24, 0x3623	; 0x803623 <decoderQueue>
    3220:	90 91 24 36 	lds	r25, 0x3624	; 0x803624 <decoderQueue+0x1>
    3224:	0e 94 03 08 	call	0x1006	; 0x1006 <xQueueReceive>
	
	uint16_t bufferelement[NR_OF_SAMPLES];
	
	xEventGroupWaitBits(evDMAState, DMADECREADY, false, true, portMAX_DELAY);
	for(;;) {
		while(uxQueueMessagesWaiting(decoderQueue) > 0) {
    3228:	80 91 23 36 	lds	r24, 0x3623	; 0x803623 <decoderQueue>
    322c:	90 91 24 36 	lds	r25, 0x3624	; 0x803624 <decoderQueue+0x1>
    3230:	0e 94 a2 08 	call	0x1144	; 0x1144 <uxQueueMessagesWaiting>
    3234:	81 11       	cpse	r24, r1
    3236:	ec cf       	rjmp	.-40     	; 0x3210 <vQuamDec+0x56>
			if(xQueueReceive(decoderQueue, &bufferelement[0], portMAX_DELAY) == pdTRUE) {
				//Decode Buffer
			}
		}		
		vTaskDelay( 2 / portTICK_RATE_MS );
    3238:	62 e0       	ldi	r22, 0x02	; 2
    323a:	70 e0       	ldi	r23, 0x00	; 0
    323c:	80 e0       	ldi	r24, 0x00	; 0
    323e:	90 e0       	ldi	r25, 0x00	; 0
    3240:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <vTaskDelay>
	}
    3244:	f1 cf       	rjmp	.-30     	; 0x3228 <vQuamDec+0x6e>

00003246 <fillDecoderQueue>:
}

void fillDecoderQueue(uint16_t buffer[NR_OF_SAMPLES])
{
    3246:	cf 93       	push	r28
    3248:	df 93       	push	r29
    324a:	1f 92       	push	r1
    324c:	cd b7       	in	r28, 0x3d	; 61
    324e:	de b7       	in	r29, 0x3e	; 62
	BaseType_t xTaskWokenByReceive = pdFALSE;
    3250:	19 82       	std	Y+1, r1	; 0x01

	xQueueSendFromISR( decoderQueue, &buffer[0], &xTaskWokenByReceive );
    3252:	20 e0       	ldi	r18, 0x00	; 0
    3254:	ae 01       	movw	r20, r28
    3256:	4f 5f       	subi	r20, 0xFF	; 255
    3258:	5f 4f       	sbci	r21, 0xFF	; 255
    325a:	bc 01       	movw	r22, r24
    325c:	80 91 23 36 	lds	r24, 0x3623	; 0x803623 <decoderQueue>
    3260:	90 91 24 36 	lds	r25, 0x3624	; 0x803624 <decoderQueue+0x1>
    3264:	0e 94 be 07 	call	0xf7c	; 0xf7c <xQueueGenericSendFromISR>
}
    3268:	0f 90       	pop	r0
    326a:	df 91       	pop	r29
    326c:	cf 91       	pop	r28
    326e:	08 95       	ret

00003270 <__vector_8>:

ISR(DMA_CH2_vect)
{
    3270:	1f 92       	push	r1
    3272:	0f 92       	push	r0
    3274:	0f b6       	in	r0, 0x3f	; 63
    3276:	0f 92       	push	r0
    3278:	11 24       	eor	r1, r1
    327a:	0b b6       	in	r0, 0x3b	; 59
    327c:	0f 92       	push	r0
    327e:	2f 93       	push	r18
    3280:	3f 93       	push	r19
    3282:	4f 93       	push	r20
    3284:	5f 93       	push	r21
    3286:	6f 93       	push	r22
    3288:	7f 93       	push	r23
    328a:	8f 93       	push	r24
    328c:	9f 93       	push	r25
    328e:	af 93       	push	r26
    3290:	bf 93       	push	r27
    3292:	ef 93       	push	r30
    3294:	ff 93       	push	r31
	DMA.CH2.CTRLB|=0x10;
    3296:	e0 e0       	ldi	r30, 0x00	; 0
    3298:	f1 e0       	ldi	r31, 0x01	; 1
    329a:	81 a9       	ldd	r24, Z+49	; 0x31
    329c:	80 61       	ori	r24, 0x10	; 16
    329e:	81 ab       	std	Z+49, r24	; 0x31

	fillDecoderQueue( &adcBuffer0[0] );
    32a0:	89 e8       	ldi	r24, 0x89	; 137
    32a2:	96 e3       	ldi	r25, 0x36	; 54
    32a4:	0e 94 23 19 	call	0x3246	; 0x3246 <fillDecoderQueue>
}
    32a8:	ff 91       	pop	r31
    32aa:	ef 91       	pop	r30
    32ac:	bf 91       	pop	r27
    32ae:	af 91       	pop	r26
    32b0:	9f 91       	pop	r25
    32b2:	8f 91       	pop	r24
    32b4:	7f 91       	pop	r23
    32b6:	6f 91       	pop	r22
    32b8:	5f 91       	pop	r21
    32ba:	4f 91       	pop	r20
    32bc:	3f 91       	pop	r19
    32be:	2f 91       	pop	r18
    32c0:	0f 90       	pop	r0
    32c2:	0b be       	out	0x3b, r0	; 59
    32c4:	0f 90       	pop	r0
    32c6:	0f be       	out	0x3f, r0	; 63
    32c8:	0f 90       	pop	r0
    32ca:	1f 90       	pop	r1
    32cc:	18 95       	reti

000032ce <__vector_9>:

ISR(DMA_CH3_vect)
{
    32ce:	1f 92       	push	r1
    32d0:	0f 92       	push	r0
    32d2:	0f b6       	in	r0, 0x3f	; 63
    32d4:	0f 92       	push	r0
    32d6:	11 24       	eor	r1, r1
    32d8:	0b b6       	in	r0, 0x3b	; 59
    32da:	0f 92       	push	r0
    32dc:	2f 93       	push	r18
    32de:	3f 93       	push	r19
    32e0:	4f 93       	push	r20
    32e2:	5f 93       	push	r21
    32e4:	6f 93       	push	r22
    32e6:	7f 93       	push	r23
    32e8:	8f 93       	push	r24
    32ea:	9f 93       	push	r25
    32ec:	af 93       	push	r26
    32ee:	bf 93       	push	r27
    32f0:	ef 93       	push	r30
    32f2:	ff 93       	push	r31
	DMA.CH3.CTRLB |= 0x10;
    32f4:	e1 e4       	ldi	r30, 0x41	; 65
    32f6:	f1 e0       	ldi	r31, 0x01	; 1
    32f8:	80 81       	ld	r24, Z
    32fa:	80 61       	ori	r24, 0x10	; 16
    32fc:	80 83       	st	Z, r24

	fillDecoderQueue( &adcBuffer1[0] );
    32fe:	89 ec       	ldi	r24, 0xC9	; 201
    3300:	96 e3       	ldi	r25, 0x36	; 54
    3302:	0e 94 23 19 	call	0x3246	; 0x3246 <fillDecoderQueue>
    3306:	ff 91       	pop	r31
    3308:	ef 91       	pop	r30
    330a:	bf 91       	pop	r27
    330c:	af 91       	pop	r26
    330e:	9f 91       	pop	r25
    3310:	8f 91       	pop	r24
    3312:	7f 91       	pop	r23
    3314:	6f 91       	pop	r22
    3316:	5f 91       	pop	r21
    3318:	4f 91       	pop	r20
    331a:	3f 91       	pop	r19
    331c:	2f 91       	pop	r18
    331e:	0f 90       	pop	r0
    3320:	0b be       	out	0x3b, r0	; 59
    3322:	0f 90       	pop	r0
    3324:	0f be       	out	0x3f, r0	; 63
    3326:	0f 90       	pop	r0
    3328:	1f 90       	pop	r1
    332a:	18 95       	reti

0000332c <vQuamGen>:
	sendbuffer[7 + (datalen * 4) + 2] = (checksum >> 4) & 0x03;
	sendbuffer[7 + (datalen * 4) + 3] = (checksum >> 6) & 0x03;
}

void vQuamGen(void *pvParameters) {
	while(evDMAState == NULL) {
    332c:	06 c0       	rjmp	.+12     	; 0x333a <vQuamGen+0xe>
		vTaskDelay(3/portTICK_RATE_MS);
    332e:	63 e0       	ldi	r22, 0x03	; 3
    3330:	70 e0       	ldi	r23, 0x00	; 0
    3332:	80 e0       	ldi	r24, 0x00	; 0
    3334:	90 e0       	ldi	r25, 0x00	; 0
    3336:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <vTaskDelay>
	sendbuffer[7 + (datalen * 4) + 2] = (checksum >> 4) & 0x03;
	sendbuffer[7 + (datalen * 4) + 3] = (checksum >> 6) & 0x03;
}

void vQuamGen(void *pvParameters) {
	while(evDMAState == NULL) {
    333a:	80 91 1d 36 	lds	r24, 0x361D	; 0x80361d <evDMAState>
    333e:	90 91 1e 36 	lds	r25, 0x361E	; 0x80361e <evDMAState+0x1>
    3342:	00 97       	sbiw	r24, 0x00	; 0
    3344:	a1 f3       	breq	.-24     	; 0x332e <vQuamGen+0x2>
		vTaskDelay(3/portTICK_RATE_MS);
	}
	xEventGroupWaitBits(evDMAState, DMAGENREADY, false, true, portMAX_DELAY);
    3346:	cc 24       	eor	r12, r12
    3348:	ca 94       	dec	r12
    334a:	dc 2c       	mov	r13, r12
    334c:	76 01       	movw	r14, r12
    334e:	01 e0       	ldi	r16, 0x01	; 1
    3350:	20 e0       	ldi	r18, 0x00	; 0
    3352:	41 e0       	ldi	r20, 0x01	; 1
    3354:	50 e0       	ldi	r21, 0x00	; 0
    3356:	60 e0       	ldi	r22, 0x00	; 0
    3358:	70 e0       	ldi	r23, 0x00	; 0
    335a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <xEventGroupWaitBits>
	for(;;) {
		vTaskDelay(10/portTICK_RATE_MS);
    335e:	6a e0       	ldi	r22, 0x0A	; 10
    3360:	70 e0       	ldi	r23, 0x00	; 0
    3362:	80 e0       	ldi	r24, 0x00	; 0
    3364:	90 e0       	ldi	r25, 0x00	; 0
    3366:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <vTaskDelay>
    336a:	f9 cf       	rjmp	.-14     	; 0x335e <vQuamGen+0x32>

0000336c <fillBuffer>:
}

void fillBuffer(uint16_t buffer[NR_OF_SAMPLES]) {
	static int pSendbuffer = 0;
	
	for(int i = 0; i < NR_OF_SAMPLES;i++) {
    336c:	40 e0       	ldi	r20, 0x00	; 0
    336e:	50 e0       	ldi	r21, 0x00	; 0
    3370:	52 c0       	rjmp	.+164    	; 0x3416 <fillBuffer+0xaa>
		switch(sendbuffer[pSendbuffer]) {
    3372:	e0 91 98 35 	lds	r30, 0x3598	; 0x803598 <pSendbuffer.4824>
    3376:	f0 91 99 35 	lds	r31, 0x3599	; 0x803599 <pSendbuffer.4824+0x1>
    337a:	eb 5d       	subi	r30, 0xDB	; 219
    337c:	f9 4c       	sbci	r31, 0xC9	; 201
    337e:	60 81       	ld	r22, Z
    3380:	61 30       	cpi	r22, 0x01	; 1
    3382:	b1 f0       	breq	.+44     	; 0x33b0 <fillBuffer+0x44>
    3384:	28 f0       	brcs	.+10     	; 0x3390 <fillBuffer+0x24>
    3386:	62 30       	cpi	r22, 0x02	; 2
    3388:	21 f1       	breq	.+72     	; 0x33d2 <fillBuffer+0x66>
    338a:	63 30       	cpi	r22, 0x03	; 3
    338c:	91 f1       	breq	.+100    	; 0x33f2 <fillBuffer+0x86>
    338e:	41 c0       	rjmp	.+130    	; 0x3412 <fillBuffer+0xa6>
			case 0:
				buffer[i] = 0x800 + (sinLookup100[i]);
    3390:	22 0f       	add	r18, r18
    3392:	33 1f       	adc	r19, r19
    3394:	fc 01       	movw	r30, r24
    3396:	e2 0f       	add	r30, r18
    3398:	f3 1f       	adc	r31, r19
    339a:	da 01       	movw	r26, r20
    339c:	aa 0f       	add	r26, r26
    339e:	bb 1f       	adc	r27, r27
    33a0:	ac 52       	subi	r26, 0x2C	; 44
    33a2:	bf 4d       	sbci	r27, 0xDF	; 223
    33a4:	2d 91       	ld	r18, X+
    33a6:	3c 91       	ld	r19, X
    33a8:	38 5f       	subi	r19, 0xF8	; 248
    33aa:	20 83       	st	Z, r18
    33ac:	31 83       	std	Z+1, r19	; 0x01
			break;
    33ae:	31 c0       	rjmp	.+98     	; 0x3412 <fillBuffer+0xa6>
			case 1:
				buffer[i] = 0x800 + (sinLookup100[i+16]);
    33b0:	22 0f       	add	r18, r18
    33b2:	33 1f       	adc	r19, r19
    33b4:	fc 01       	movw	r30, r24
    33b6:	e2 0f       	add	r30, r18
    33b8:	f3 1f       	adc	r31, r19
    33ba:	da 01       	movw	r26, r20
    33bc:	50 96       	adiw	r26, 0x10	; 16
    33be:	aa 0f       	add	r26, r26
    33c0:	bb 1f       	adc	r27, r27
    33c2:	ac 52       	subi	r26, 0x2C	; 44
    33c4:	bf 4d       	sbci	r27, 0xDF	; 223
    33c6:	2d 91       	ld	r18, X+
    33c8:	3c 91       	ld	r19, X
    33ca:	38 5f       	subi	r19, 0xF8	; 248
    33cc:	20 83       	st	Z, r18
    33ce:	31 83       	std	Z+1, r19	; 0x01
			break;
    33d0:	20 c0       	rjmp	.+64     	; 0x3412 <fillBuffer+0xa6>
			case 2:
				buffer[i] = 0x800 + (sinLookup50[i]);
    33d2:	22 0f       	add	r18, r18
    33d4:	33 1f       	adc	r19, r19
    33d6:	fc 01       	movw	r30, r24
    33d8:	e2 0f       	add	r30, r18
    33da:	f3 1f       	adc	r31, r19
    33dc:	da 01       	movw	r26, r20
    33de:	aa 0f       	add	r26, r26
    33e0:	bb 1f       	adc	r27, r27
    33e2:	ac 5a       	subi	r26, 0xAC	; 172
    33e4:	bf 4d       	sbci	r27, 0xDF	; 223
    33e6:	2d 91       	ld	r18, X+
    33e8:	3c 91       	ld	r19, X
    33ea:	38 5f       	subi	r19, 0xF8	; 248
    33ec:	20 83       	st	Z, r18
    33ee:	31 83       	std	Z+1, r19	; 0x01
			break;
    33f0:	10 c0       	rjmp	.+32     	; 0x3412 <fillBuffer+0xa6>
			case 3:
				buffer[i] = 0x800 + (sinLookup50[i+16]);
    33f2:	22 0f       	add	r18, r18
    33f4:	33 1f       	adc	r19, r19
    33f6:	fc 01       	movw	r30, r24
    33f8:	e2 0f       	add	r30, r18
    33fa:	f3 1f       	adc	r31, r19
    33fc:	da 01       	movw	r26, r20
    33fe:	50 96       	adiw	r26, 0x10	; 16
    3400:	aa 0f       	add	r26, r26
    3402:	bb 1f       	adc	r27, r27
    3404:	ac 5a       	subi	r26, 0xAC	; 172
    3406:	bf 4d       	sbci	r27, 0xDF	; 223
    3408:	2d 91       	ld	r18, X+
    340a:	3c 91       	ld	r19, X
    340c:	38 5f       	subi	r19, 0xF8	; 248
    340e:	20 83       	st	Z, r18
    3410:	31 83       	std	Z+1, r19	; 0x01
}

void fillBuffer(uint16_t buffer[NR_OF_SAMPLES]) {
	static int pSendbuffer = 0;
	
	for(int i = 0; i < NR_OF_SAMPLES;i++) {
    3412:	4f 5f       	subi	r20, 0xFF	; 255
    3414:	5f 4f       	sbci	r21, 0xFF	; 255
    3416:	9a 01       	movw	r18, r20
    3418:	40 32       	cpi	r20, 0x20	; 32
    341a:	51 05       	cpc	r21, r1
    341c:	08 f4       	brcc	.+2      	; 0x3420 <fillBuffer+0xb4>
    341e:	a9 cf       	rjmp	.-174    	; 0x3372 <fillBuffer+0x6>
			case 3:
				buffer[i] = 0x800 + (sinLookup50[i+16]);
			break;
		}
	}
	if(pSendbuffer < SENDBUFFER_SIZE-1) {
    3420:	80 91 98 35 	lds	r24, 0x3598	; 0x803598 <pSendbuffer.4824>
    3424:	90 91 99 35 	lds	r25, 0x3599	; 0x803599 <pSendbuffer.4824+0x1>
    3428:	83 31       	cpi	r24, 0x13	; 19
    342a:	91 05       	cpc	r25, r1
    342c:	34 f4       	brge	.+12     	; 0x343a <fillBuffer+0xce>
		pSendbuffer++;
    342e:	01 96       	adiw	r24, 0x01	; 1
    3430:	80 93 98 35 	sts	0x3598, r24	; 0x803598 <pSendbuffer.4824>
    3434:	90 93 99 35 	sts	0x3599, r25	; 0x803599 <pSendbuffer.4824+0x1>
    3438:	08 95       	ret
	} else {
		pSendbuffer = 0;
    343a:	10 92 98 35 	sts	0x3598, r1	; 0x803598 <pSendbuffer.4824>
    343e:	10 92 99 35 	sts	0x3599, r1	; 0x803599 <pSendbuffer.4824+0x1>
    3442:	08 95       	ret

00003444 <__vector_6>:
	}
}

ISR(DMA_CH0_vect)
{
    3444:	1f 92       	push	r1
    3446:	0f 92       	push	r0
    3448:	0f b6       	in	r0, 0x3f	; 63
    344a:	0f 92       	push	r0
    344c:	11 24       	eor	r1, r1
    344e:	0b b6       	in	r0, 0x3b	; 59
    3450:	0f 92       	push	r0
    3452:	2f 93       	push	r18
    3454:	3f 93       	push	r19
    3456:	4f 93       	push	r20
    3458:	5f 93       	push	r21
    345a:	6f 93       	push	r22
    345c:	7f 93       	push	r23
    345e:	8f 93       	push	r24
    3460:	9f 93       	push	r25
    3462:	af 93       	push	r26
    3464:	bf 93       	push	r27
    3466:	ef 93       	push	r30
    3468:	ff 93       	push	r31
	//static signed BaseType_t test;
	
	DMA.CH0.CTRLB|=0x10;
    346a:	e0 e0       	ldi	r30, 0x00	; 0
    346c:	f1 e0       	ldi	r31, 0x01	; 1
    346e:	81 89       	ldd	r24, Z+17	; 0x11
    3470:	80 61       	ori	r24, 0x10	; 16
    3472:	81 8b       	std	Z+17, r24	; 0x11
	fillBuffer(&dacBuffer0[0]);
    3474:	8a ed       	ldi	r24, 0xDA	; 218
    3476:	95 e3       	ldi	r25, 0x35	; 53
    3478:	0e 94 b6 19 	call	0x336c	; 0x336c <fillBuffer>
}
    347c:	ff 91       	pop	r31
    347e:	ef 91       	pop	r30
    3480:	bf 91       	pop	r27
    3482:	af 91       	pop	r26
    3484:	9f 91       	pop	r25
    3486:	8f 91       	pop	r24
    3488:	7f 91       	pop	r23
    348a:	6f 91       	pop	r22
    348c:	5f 91       	pop	r21
    348e:	4f 91       	pop	r20
    3490:	3f 91       	pop	r19
    3492:	2f 91       	pop	r18
    3494:	0f 90       	pop	r0
    3496:	0b be       	out	0x3b, r0	; 59
    3498:	0f 90       	pop	r0
    349a:	0f be       	out	0x3f, r0	; 63
    349c:	0f 90       	pop	r0
    349e:	1f 90       	pop	r1
    34a0:	18 95       	reti

000034a2 <__vector_7>:

ISR(DMA_CH1_vect)
{
    34a2:	1f 92       	push	r1
    34a4:	0f 92       	push	r0
    34a6:	0f b6       	in	r0, 0x3f	; 63
    34a8:	0f 92       	push	r0
    34aa:	11 24       	eor	r1, r1
    34ac:	0b b6       	in	r0, 0x3b	; 59
    34ae:	0f 92       	push	r0
    34b0:	2f 93       	push	r18
    34b2:	3f 93       	push	r19
    34b4:	4f 93       	push	r20
    34b6:	5f 93       	push	r21
    34b8:	6f 93       	push	r22
    34ba:	7f 93       	push	r23
    34bc:	8f 93       	push	r24
    34be:	9f 93       	push	r25
    34c0:	af 93       	push	r26
    34c2:	bf 93       	push	r27
    34c4:	ef 93       	push	r30
    34c6:	ff 93       	push	r31
	DMA.CH1.CTRLB|=0x10;
    34c8:	e0 e0       	ldi	r30, 0x00	; 0
    34ca:	f1 e0       	ldi	r31, 0x01	; 1
    34cc:	81 a1       	ldd	r24, Z+33	; 0x21
    34ce:	80 61       	ori	r24, 0x10	; 16
    34d0:	81 a3       	std	Z+33, r24	; 0x21
	fillBuffer(&dacBuffer1[0]);
    34d2:	8a e9       	ldi	r24, 0x9A	; 154
    34d4:	95 e3       	ldi	r25, 0x35	; 53
    34d6:	0e 94 b6 19 	call	0x336c	; 0x336c <fillBuffer>
    34da:	ff 91       	pop	r31
    34dc:	ef 91       	pop	r30
    34de:	bf 91       	pop	r27
    34e0:	af 91       	pop	r26
    34e2:	9f 91       	pop	r25
    34e4:	8f 91       	pop	r24
    34e6:	7f 91       	pop	r23
    34e8:	6f 91       	pop	r22
    34ea:	5f 91       	pop	r21
    34ec:	4f 91       	pop	r20
    34ee:	3f 91       	pop	r19
    34f0:	2f 91       	pop	r18
    34f2:	0f 90       	pop	r0
    34f4:	0b be       	out	0x3b, r0	; 59
    34f6:	0f 90       	pop	r0
    34f8:	0f be       	out	0x3f, r0	; 63
    34fa:	0f 90       	pop	r0
    34fc:	1f 90       	pop	r1
    34fe:	18 95       	reti

00003500 <initADC>:




void initADC(void) {
	ADCA.CTRLA = 0x01;
    3500:	e0 e0       	ldi	r30, 0x00	; 0
    3502:	f2 e0       	ldi	r31, 0x02	; 2
    3504:	81 e0       	ldi	r24, 0x01	; 1
    3506:	80 83       	st	Z, r24
	ADCA.CTRLB = 0x00;
    3508:	11 82       	std	Z+1, r1	; 0x01
	ADCA.REFCTRL = 0x10; //INTVCC = 2V as Reference
    350a:	90 e1       	ldi	r25, 0x10	; 16
    350c:	92 83       	std	Z+2, r25	; 0x02
	ADCA.PRESCALER = 0x03;
    350e:	93 e0       	ldi	r25, 0x03	; 3
    3510:	94 83       	std	Z+4, r25	; 0x04
	ADCA.EVCTRL = 0x39; //Event Channel 7 triggers Channel 0 Conversion
    3512:	99 e3       	ldi	r25, 0x39	; 57
    3514:	93 83       	std	Z+3, r25	; 0x03
	ADCA.CH0.CTRL = 0x01; //Singleended positive input without gain
    3516:	80 a3       	std	Z+32, r24	; 0x20
	ADCA.CH0.MUXCTRL = 0x55; //Input = ADC10 on ADCA = Pin PB2 = DAC-Output
    3518:	85 e5       	ldi	r24, 0x55	; 85
    351a:	81 a3       	std	Z+33, r24	; 0x21
	ADCA.CH0.INTCTRL = 0x00;
    351c:	12 a2       	std	Z+34, r1	; 0x22
    351e:	08 95       	ret

00003520 <initDAC>:
}
void initDAC(void) {
	DACB.CTRLA = DAC_CH0EN_bm;
    3520:	e0 e2       	ldi	r30, 0x20	; 32
    3522:	f3 e0       	ldi	r31, 0x03	; 3
    3524:	94 e0       	ldi	r25, 0x04	; 4
    3526:	90 83       	st	Z, r25
	DACB.CTRLB = DAC_CH0TRIG_bm;
    3528:	81 e0       	ldi	r24, 0x01	; 1
    352a:	81 83       	std	Z+1, r24	; 0x01
	DACB.CTRLC = 0x00;
    352c:	12 82       	std	Z+2, r1	; 0x02
	DACB.EVCTRL = 0x00;
    352e:	13 82       	std	Z+3, r1	; 0x03
	DACB.CTRLA |= DAC_ENABLE_bm;
    3530:	80 81       	ld	r24, Z
    3532:	81 60       	ori	r24, 0x01	; 1
    3534:	80 83       	st	Z, r24
	PORTB.DIRSET = 0x04;
    3536:	90 93 21 06 	sts	0x0621, r25	; 0x800621 <__TEXT_REGION_LENGTH__+0x7de621>
    353a:	08 95       	ret

0000353c <initDACTimer>:
}
void initDACTimer(void) {
	TC0_ConfigClockSource(&TCD0, TC_CLKSEL_DIV1_gc);
    353c:	61 e0       	ldi	r22, 0x01	; 1
    353e:	80 e0       	ldi	r24, 0x00	; 0
    3540:	99 e0       	ldi	r25, 0x09	; 9
    3542:	0e 94 90 01 	call	0x320	; 0x320 <TC0_ConfigClockSource>
	TC0_ConfigWGM(&TCD0, TC_WGMODE_SINGLESLOPE_gc);	
    3546:	63 e0       	ldi	r22, 0x03	; 3
    3548:	80 e0       	ldi	r24, 0x00	; 0
    354a:	99 e0       	ldi	r25, 0x09	; 9
    354c:	0e 94 9c 01 	call	0x338	; 0x338 <TC0_ConfigWGM>
	TC_SetPeriod(&TCD0, 32000000/(GENERATOR_FREQUENCY_INITIAL_VALUE));  
    3550:	88 ee       	ldi	r24, 0xE8	; 232
    3552:	93 e0       	ldi	r25, 0x03	; 3
    3554:	80 93 26 09 	sts	0x0926, r24	; 0x800926 <__TEXT_REGION_LENGTH__+0x7de926>
    3558:	90 93 27 09 	sts	0x0927, r25	; 0x800927 <__TEXT_REGION_LENGTH__+0x7de927>
	EVSYS.CH0MUX = EVSYS_CHMUX_TCD0_OVF_gc; //Setup Eventsystem when timer TCD0 overflows
    355c:	80 ed       	ldi	r24, 0xD0	; 208
    355e:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__TEXT_REGION_LENGTH__+0x7de180>
    3562:	08 95       	ret

00003564 <initADCTimer>:
}
void initADCTimer(void) {
	TC1_ConfigClockSource(&TCD1, TC_CLKSEL_DIV1_gc);
    3564:	61 e0       	ldi	r22, 0x01	; 1
    3566:	80 e4       	ldi	r24, 0x40	; 64
    3568:	99 e0       	ldi	r25, 0x09	; 9
    356a:	0e 94 96 01 	call	0x32c	; 0x32c <TC1_ConfigClockSource>
	TC1_ConfigWGM(&TCD1, TC_WGMODE_SINGLESLOPE_gc);
    356e:	63 e0       	ldi	r22, 0x03	; 3
    3570:	80 e4       	ldi	r24, 0x40	; 64
    3572:	99 e0       	ldi	r25, 0x09	; 9
    3574:	0e 94 a2 01 	call	0x344	; 0x344 <TC1_ConfigWGM>
	TC_SetPeriod(&TCD1, 32000000/(DECODER_FREQUENCY_INITIAL_VALUE));
    3578:	88 ee       	ldi	r24, 0xE8	; 232
    357a:	93 e0       	ldi	r25, 0x03	; 3
    357c:	80 93 66 09 	sts	0x0966, r24	; 0x800966 <__TEXT_REGION_LENGTH__+0x7de966>
    3580:	90 93 67 09 	sts	0x0967, r25	; 0x800967 <__TEXT_REGION_LENGTH__+0x7de967>
	EVSYS.CH7MUX = EVSYS_CHMUX_TCD1_OVF_gc;
    3584:	88 ed       	ldi	r24, 0xD8	; 216
    3586:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <__TEXT_REGION_LENGTH__+0x7de187>
    358a:	08 95       	ret

0000358c <initCommonDMA>:
}


void initCommonDMA(void) {
	if(evDMAState == NULL) {
    358c:	80 91 1d 36 	lds	r24, 0x361D	; 0x80361d <evDMAState>
    3590:	90 91 1e 36 	lds	r25, 0x361E	; 0x80361e <evDMAState+0x1>
    3594:	89 2b       	or	r24, r25
    3596:	91 f4       	brne	.+36     	; 0x35bc <initCommonDMA+0x30>
		evDMAState = xEventGroupCreate();
    3598:	0e 94 dd 01 	call	0x3ba	; 0x3ba <xEventGroupCreate>
    359c:	80 93 1d 36 	sts	0x361D, r24	; 0x80361d <evDMAState>
    35a0:	90 93 1e 36 	sts	0x361E, r25	; 0x80361e <evDMAState+0x1>
		DMA.CTRL = 0;
    35a4:	e0 e0       	ldi	r30, 0x00	; 0
    35a6:	f1 e0       	ldi	r31, 0x01	; 1
    35a8:	10 82       	st	Z, r1
		DMA.CTRL = DMA_RESET_bm;
    35aa:	80 e4       	ldi	r24, 0x40	; 64
    35ac:	80 83       	st	Z, r24
		while ((DMA.CTRL & DMA_RESET_bm) != 0);
    35ae:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x7de100>
    35b2:	86 fd       	sbrc	r24, 6
    35b4:	fc cf       	rjmp	.-8      	; 0x35ae <initCommonDMA+0x22>

		DMA.CTRL = DMA_ENABLE_bm | DMA_DBUFMODE_CH01CH23_gc;
    35b6:	8c e8       	ldi	r24, 0x8C	; 140
    35b8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__TEXT_REGION_LENGTH__+0x7de100>
    35bc:	08 95       	ret

000035be <initGenDMA>:
	}
}

void initGenDMA(void) {
	initCommonDMA();
    35be:	0e 94 c6 1a 	call	0x358c	; 0x358c <initCommonDMA>
	
	DMA.CH0.REPCNT = 0;
    35c2:	e0 e0       	ldi	r30, 0x00	; 0
    35c4:	f1 e0       	ldi	r31, 0x01	; 1
    35c6:	16 8a       	std	Z+22, r1	; 0x16
	DMA.CH0.CTRLB|=0x01;
    35c8:	81 89       	ldd	r24, Z+17	; 0x11
    35ca:	81 60       	ori	r24, 0x01	; 1
    35cc:	81 8b       	std	Z+17, r24	; 0x11
	DMA.CH0.CTRLA = DMA_CH_BURSTLEN_2BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm;					// ADC result is 2 byte 12 bit word
    35ce:	85 e2       	ldi	r24, 0x25	; 37
    35d0:	80 8b       	std	Z+16, r24	; 0x10
	DMA.CH0.ADDRCTRL =	DMA_CH_SRCRELOAD_TRANSACTION_gc | DMA_CH_SRCDIR_INC_gc | DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_INC_gc;	// reload source after every burst, reload dest after every transaction
    35d2:	69 ed       	ldi	r22, 0xD9	; 217
    35d4:	62 8b       	std	Z+18, r22	; 0x12
	DMA.CH0.TRIGSRC = DMA_CH_TRIGSRC_DACB_CH0_gc;
    35d6:	83 8b       	std	Z+19, r24	; 0x13
	DMA.CH0.TRFCNT = NR_OF_SAMPLES*2;	// always the number of bytes, even if burst length > 1
    35d8:	40 e4       	ldi	r20, 0x40	; 64
    35da:	50 e0       	ldi	r21, 0x00	; 0
    35dc:	44 8b       	std	Z+20, r20	; 0x14
    35de:	55 8b       	std	Z+21, r21	; 0x15
	DMA.CH0.SRCADDR0 = ((uint16_t)(&dacBuffer0[0]) >> 0) & 0xFF;
    35e0:	2a ed       	ldi	r18, 0xDA	; 218
    35e2:	35 e3       	ldi	r19, 0x35	; 53
    35e4:	20 8f       	std	Z+24, r18	; 0x18
	DMA.CH0.SRCADDR1 = ((uint16_t)(&dacBuffer0[0]) >>  8) & 0xFF;
    35e6:	31 8f       	std	Z+25, r19	; 0x19
	DMA.CH0.SRCADDR2 =0;
    35e8:	12 8e       	std	Z+26, r1	; 0x1a
	DMA.CH0.DESTADDR0 = ((uint16_t)(&DACB.CH0DATA) >> 0) & 0xFF;
    35ea:	38 e3       	ldi	r19, 0x38	; 56
    35ec:	34 8f       	std	Z+28, r19	; 0x1c
	DMA.CH0.DESTADDR1 = ((uint16_t)(&DACB.CH0DATA) >> 8) & 0xFF;
    35ee:	23 e0       	ldi	r18, 0x03	; 3
    35f0:	25 8f       	std	Z+29, r18	; 0x1d
	DMA.CH0.DESTADDR2 = 0;
    35f2:	16 8e       	std	Z+30, r1	; 0x1e

	DMA.CH1.REPCNT = 0;
    35f4:	16 a2       	std	Z+38, r1	; 0x26
	DMA.CH1.CTRLB |= 0x01;
    35f6:	91 a1       	ldd	r25, Z+33	; 0x21
    35f8:	91 60       	ori	r25, 0x01	; 1
    35fa:	91 a3       	std	Z+33, r25	; 0x21
	DMA.CH1.CTRLA = DMA_CH_BURSTLEN_2BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm;
    35fc:	80 a3       	std	Z+32, r24	; 0x20
	DMA.CH1.ADDRCTRL = DMA_CH_SRCRELOAD_TRANSACTION_gc | DMA_CH_SRCDIR_INC_gc | DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_INC_gc;
    35fe:	62 a3       	std	Z+34, r22	; 0x22
	DMA.CH1.TRIGSRC = DMA_CH_TRIGSRC_DACB_CH0_gc;
    3600:	83 a3       	std	Z+35, r24	; 0x23
	DMA.CH1.TRFCNT = NR_OF_SAMPLES*2;
    3602:	44 a3       	std	Z+36, r20	; 0x24
    3604:	55 a3       	std	Z+37, r21	; 0x25
	DMA.CH1.SRCADDR0 = ((uint16_t)(&dacBuffer1[0]) >> 0) & 0xFF;
    3606:	8a e9       	ldi	r24, 0x9A	; 154
    3608:	95 e3       	ldi	r25, 0x35	; 53
    360a:	80 a7       	std	Z+40, r24	; 0x28
	DMA.CH1.SRCADDR1 = ((uint16_t)(&dacBuffer1[0]) >>  8) & 0xFF;
    360c:	91 a7       	std	Z+41, r25	; 0x29
	DMA.CH1.SRCADDR2 =0;
    360e:	12 a6       	std	Z+42, r1	; 0x2a
	DMA.CH1.DESTADDR0 = ((uint16_t)(&DACB.CH0DATA) >> 0) & 0xFF;
    3610:	34 a7       	std	Z+44, r19	; 0x2c
	DMA.CH1.DESTADDR1 = ((uint16_t)(&DACB.CH0DATA) >> 8) & 0xFF;
    3612:	25 a7       	std	Z+45, r18	; 0x2d
	DMA.CH1.DESTADDR2 = 0;
    3614:	16 a6       	std	Z+46, r1	; 0x2e
	
	DMA.CH0.CTRLA |= DMA_CH_ENABLE_bm;
    3616:	80 89       	ldd	r24, Z+16	; 0x10
    3618:	80 68       	ori	r24, 0x80	; 128
    361a:	80 8b       	std	Z+16, r24	; 0x10
	DMA.CH1.CTRLA |= DMA_CH_ENABLE_bm; // later, not yet tested!
    361c:	80 a1       	ldd	r24, Z+32	; 0x20
    361e:	80 68       	ori	r24, 0x80	; 128
    3620:	80 a3       	std	Z+32, r24	; 0x20
	
	xEventGroupSetBits(evDMAState, DMAGENREADY);
    3622:	41 e0       	ldi	r20, 0x01	; 1
    3624:	50 e0       	ldi	r21, 0x00	; 0
    3626:	60 e0       	ldi	r22, 0x00	; 0
    3628:	70 e0       	ldi	r23, 0x00	; 0
    362a:	80 91 1d 36 	lds	r24, 0x361D	; 0x80361d <evDMAState>
    362e:	90 91 1e 36 	lds	r25, 0x361E	; 0x80361e <evDMAState+0x1>
    3632:	0e 94 ba 02 	call	0x574	; 0x574 <xEventGroupSetBits>
    3636:	08 95       	ret

00003638 <initDecDMA>:
}

void initDecDMA(void) {
	initCommonDMA();
    3638:	0e 94 c6 1a 	call	0x358c	; 0x358c <initCommonDMA>
	
	DMA.CH2.REPCNT = 0;
    363c:	e0 e0       	ldi	r30, 0x00	; 0
    363e:	f1 e0       	ldi	r31, 0x01	; 1
    3640:	16 aa       	std	Z+54, r1	; 0x36
	DMA.CH2.CTRLB |= 0x01;
    3642:	81 a9       	ldd	r24, Z+49	; 0x31
    3644:	81 60       	ori	r24, 0x01	; 1
    3646:	81 ab       	std	Z+49, r24	; 0x31
	DMA.CH2.CTRLA = DMA_CH_BURSTLEN_2BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm;
    3648:	75 e2       	ldi	r23, 0x25	; 37
    364a:	70 ab       	std	Z+48, r23	; 0x30
	DMA.CH2.ADDRCTRL = DMA_CH_SRCRELOAD_BURST_gc | DMA_CH_SRCDIR_INC_gc | DMA_CH_DESTRELOAD_TRANSACTION_gc | DMA_CH_DESTDIR_INC_gc;
    364c:	6d e9       	ldi	r22, 0x9D	; 157
    364e:	62 ab       	std	Z+50, r22	; 0x32
	DMA.CH2.TRIGSRC = DMA_CH_TRIGSRC_ADCA_CH0_gc;
    3650:	30 e1       	ldi	r19, 0x10	; 16
    3652:	33 ab       	std	Z+51, r19	; 0x33
	DMA.CH2.TRFCNT = NR_OF_SAMPLES*2;
    3654:	40 e4       	ldi	r20, 0x40	; 64
    3656:	50 e0       	ldi	r21, 0x00	; 0
    3658:	44 ab       	std	Z+52, r20	; 0x34
    365a:	55 ab       	std	Z+53, r21	; 0x35
	DMA.CH2.SRCADDR0 = ((uint16_t)(&ADCA.CH0.RES) >> 0) & 0xFF;
    365c:	24 e2       	ldi	r18, 0x24	; 36
    365e:	20 af       	std	Z+56, r18	; 0x38
	DMA.CH2.SRCADDR1 = ((uint16_t)(&ADCA.CH0.RES) >> 8) & 0xFF;
    3660:	92 e0       	ldi	r25, 0x02	; 2
    3662:	91 af       	std	Z+57, r25	; 0x39
	DMA.CH2.SRCADDR2 = 0x00;
    3664:	12 ae       	std	Z+58, r1	; 0x3a
	DMA.CH2.DESTADDR0 = ((uint16_t)(&adcBuffer0[0]) >> 0) & 0xFF;
    3666:	a9 e8       	ldi	r26, 0x89	; 137
    3668:	b6 e3       	ldi	r27, 0x36	; 54
    366a:	a4 af       	std	Z+60, r26	; 0x3c
	DMA.CH2.DESTADDR1 = ((uint16_t)(&adcBuffer0[0]) >> 8) & 0xFF;
    366c:	b5 af       	std	Z+61, r27	; 0x3d
	DMA.CH2.DESTADDR2 = 0x00;
    366e:	16 ae       	std	Z+62, r1	; 0x3e

	DMA.CH3.REPCNT = 0;
    3670:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <__TEXT_REGION_LENGTH__+0x7de146>
	DMA.CH3.CTRLB |= 0x01;
    3674:	a1 e4       	ldi	r26, 0x41	; 65
    3676:	b1 e0       	ldi	r27, 0x01	; 1
    3678:	8c 91       	ld	r24, X
    367a:	81 60       	ori	r24, 0x01	; 1
    367c:	8c 93       	st	X, r24
	DMA.CH3.CTRLA = DMA_CH_BURSTLEN_2BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_REPEAT_bm;
    367e:	a0 e4       	ldi	r26, 0x40	; 64
    3680:	b1 e0       	ldi	r27, 0x01	; 1
    3682:	7c 93       	st	X, r23
	DMA.CH3.ADDRCTRL = DMA_CH_SRCRELOAD_BURST_gc | DMA_CH_SRCDIR_INC_gc | DMA_CH_DESTRELOAD_TRANSACTION_gc | DMA_CH_DESTDIR_INC_gc;
    3684:	60 93 42 01 	sts	0x0142, r22	; 0x800142 <__TEXT_REGION_LENGTH__+0x7de142>
	DMA.CH3.TRIGSRC = DMA_CH_TRIGSRC_ADCA_CH0_gc;
    3688:	30 93 43 01 	sts	0x0143, r19	; 0x800143 <__TEXT_REGION_LENGTH__+0x7de143>
	DMA.CH3.TRFCNT = NR_OF_SAMPLES*2;
    368c:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <__TEXT_REGION_LENGTH__+0x7de144>
    3690:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <__TEXT_REGION_LENGTH__+0x7de145>
	DMA.CH3.SRCADDR0 = ((uint16_t)(&ADCA.CH0.RES) >> 0) & 0xFF;
    3694:	20 93 48 01 	sts	0x0148, r18	; 0x800148 <__TEXT_REGION_LENGTH__+0x7de148>
	DMA.CH3.SRCADDR1 = ((uint16_t)(&ADCA.CH0.RES) >> 8) & 0xFF;
    3698:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <__TEXT_REGION_LENGTH__+0x7de149>
	DMA.CH3.SRCADDR2 = 0x00;
    369c:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__TEXT_REGION_LENGTH__+0x7de14a>
	DMA.CH3.DESTADDR0 = ((uint16_t)(&adcBuffer1[0]) >> 0) & 0xFF;
    36a0:	89 ec       	ldi	r24, 0xC9	; 201
    36a2:	96 e3       	ldi	r25, 0x36	; 54
    36a4:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__TEXT_REGION_LENGTH__+0x7de14c>
	DMA.CH3.DESTADDR1 = ((uint16_t)(&adcBuffer1[0]) >> 8) & 0xFF;
    36a8:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__TEXT_REGION_LENGTH__+0x7de14d>
	DMA.CH3.DESTADDR2 = 0x00;
    36ac:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__TEXT_REGION_LENGTH__+0x7de14e>

	DMA.CH2.CTRLA |= DMA_CH_ENABLE_bm;
    36b0:	80 a9       	ldd	r24, Z+48	; 0x30
    36b2:	80 68       	ori	r24, 0x80	; 128
    36b4:	80 ab       	std	Z+48, r24	; 0x30
	DMA.CH3.CTRLA |= DMA_CH_ENABLE_bm;
    36b6:	8c 91       	ld	r24, X
    36b8:	80 68       	ori	r24, 0x80	; 128
    36ba:	8c 93       	st	X, r24
	
	xEventGroupSetBits(evDMAState, DMADECREADY);
    36bc:	41 e0       	ldi	r20, 0x01	; 1
    36be:	50 e0       	ldi	r21, 0x00	; 0
    36c0:	60 e0       	ldi	r22, 0x00	; 0
    36c2:	70 e0       	ldi	r23, 0x00	; 0
    36c4:	80 91 1d 36 	lds	r24, 0x361D	; 0x80361d <evDMAState>
    36c8:	90 91 1e 36 	lds	r25, 0x361E	; 0x80361e <evDMAState+0x1>
    36cc:	0e 94 ba 02 	call	0x574	; 0x574 <xEventGroupSetBits>
    36d0:	08 95       	ret

000036d2 <getResetReason>:
 #include "utils.h"

 resetReason_t getResetReason(void) {
	 resetReason_t returnValue = RESETREASON_POWERONRESET;
	 // software reset ?
	 if( RST.STATUS & RST_SRF_bm )
    36d2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7de078>
    36d6:	85 ff       	sbrs	r24, 5
    36d8:	05 c0       	rjmp	.+10     	; 0x36e4 <getResetReason+0x12>
	 {
		 // reset this bit
		 RST.STATUS = RST_SRF_bm;
    36da:	80 e2       	ldi	r24, 0x20	; 32
    36dc:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__TEXT_REGION_LENGTH__+0x7de078>
		 returnValue = RESETREASON_SOFTWARERESET;
    36e0:	81 e0       	ldi	r24, 0x01	; 1
    36e2:	08 95       	ret
	 }
	 // power on reset ?
	 else if( RST.STATUS & RST_PORF_bm)
    36e4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7de078>
    36e8:	80 ff       	sbrs	r24, 0
    36ea:	05 c0       	rjmp	.+10     	; 0x36f6 <getResetReason+0x24>
	 {
		 // reset this bit
		 RST.STATUS = RST_PORF_bm;
    36ec:	81 e0       	ldi	r24, 0x01	; 1
    36ee:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__TEXT_REGION_LENGTH__+0x7de078>
		 returnValue = RESETREASON_POWERONRESET;
    36f2:	82 e0       	ldi	r24, 0x02	; 2
    36f4:	08 95       	ret
	 }
	 // debugger reset ?
	 else if( RST.STATUS & RST_PDIRF_bm)
    36f6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7de078>
    36fa:	84 ff       	sbrs	r24, 4
    36fc:	05 c0       	rjmp	.+10     	; 0x3708 <getResetReason+0x36>
	 {
		 // reset this bit
		 RST.STATUS = RST_PDIRF_bm;
    36fe:	80 e1       	ldi	r24, 0x10	; 16
    3700:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__TEXT_REGION_LENGTH__+0x7de078>
		 returnValue = RESETREASON_DEBUGGERRESET;
    3704:	83 e0       	ldi	r24, 0x03	; 3
    3706:	08 95       	ret
	 }
	 // external reset ?
	 else if( RST.STATUS & RST_EXTRF_bm)
    3708:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7de078>
    370c:	81 ff       	sbrs	r24, 1
    370e:	05 c0       	rjmp	.+10     	; 0x371a <getResetReason+0x48>
	 {
		 // reset this bit
		 RST.STATUS = RST_EXTRF_bm;
    3710:	82 e0       	ldi	r24, 0x02	; 2
    3712:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__TEXT_REGION_LENGTH__+0x7de078>
		 returnValue = RESETREASON_EXTERNALRESET;
    3716:	84 e0       	ldi	r24, 0x04	; 4
    3718:	08 95       	ret
 */ 
 #include "avr_compiler.h"
 #include "utils.h"

 resetReason_t getResetReason(void) {
	 resetReason_t returnValue = RESETREASON_POWERONRESET;
    371a:	82 e0       	ldi	r24, 0x02	; 2
		 // reset this bit
		 RST.STATUS = RST_EXTRF_bm;
		 returnValue = RESETREASON_EXTERNALRESET;
	 }
	 return returnValue;
    371c:	08 95       	ret

0000371e <__subsf3>:
    371e:	50 58       	subi	r21, 0x80	; 128

00003720 <__addsf3>:
    3720:	bb 27       	eor	r27, r27
    3722:	aa 27       	eor	r26, r26
    3724:	0e 94 a7 1b 	call	0x374e	; 0x374e <__addsf3x>
    3728:	0c 94 21 1d 	jmp	0x3a42	; 0x3a42 <__fp_round>
    372c:	0e 94 13 1d 	call	0x3a26	; 0x3a26 <__fp_pscA>
    3730:	38 f0       	brcs	.+14     	; 0x3740 <__addsf3+0x20>
    3732:	0e 94 1a 1d 	call	0x3a34	; 0x3a34 <__fp_pscB>
    3736:	20 f0       	brcs	.+8      	; 0x3740 <__addsf3+0x20>
    3738:	39 f4       	brne	.+14     	; 0x3748 <__addsf3+0x28>
    373a:	9f 3f       	cpi	r25, 0xFF	; 255
    373c:	19 f4       	brne	.+6      	; 0x3744 <__addsf3+0x24>
    373e:	26 f4       	brtc	.+8      	; 0x3748 <__addsf3+0x28>
    3740:	0c 94 10 1d 	jmp	0x3a20	; 0x3a20 <__fp_nan>
    3744:	0e f4       	brtc	.+2      	; 0x3748 <__addsf3+0x28>
    3746:	e0 95       	com	r30
    3748:	e7 fb       	bst	r30, 7
    374a:	0c 94 0a 1d 	jmp	0x3a14	; 0x3a14 <__fp_inf>

0000374e <__addsf3x>:
    374e:	e9 2f       	mov	r30, r25
    3750:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <__fp_split3>
    3754:	58 f3       	brcs	.-42     	; 0x372c <__addsf3+0xc>
    3756:	ba 17       	cp	r27, r26
    3758:	62 07       	cpc	r22, r18
    375a:	73 07       	cpc	r23, r19
    375c:	84 07       	cpc	r24, r20
    375e:	95 07       	cpc	r25, r21
    3760:	20 f0       	brcs	.+8      	; 0x376a <__addsf3x+0x1c>
    3762:	79 f4       	brne	.+30     	; 0x3782 <__addsf3x+0x34>
    3764:	a6 f5       	brtc	.+104    	; 0x37ce <__addsf3x+0x80>
    3766:	0c 94 54 1d 	jmp	0x3aa8	; 0x3aa8 <__fp_zero>
    376a:	0e f4       	brtc	.+2      	; 0x376e <__addsf3x+0x20>
    376c:	e0 95       	com	r30
    376e:	0b 2e       	mov	r0, r27
    3770:	ba 2f       	mov	r27, r26
    3772:	a0 2d       	mov	r26, r0
    3774:	0b 01       	movw	r0, r22
    3776:	b9 01       	movw	r22, r18
    3778:	90 01       	movw	r18, r0
    377a:	0c 01       	movw	r0, r24
    377c:	ca 01       	movw	r24, r20
    377e:	a0 01       	movw	r20, r0
    3780:	11 24       	eor	r1, r1
    3782:	ff 27       	eor	r31, r31
    3784:	59 1b       	sub	r21, r25
    3786:	99 f0       	breq	.+38     	; 0x37ae <__addsf3x+0x60>
    3788:	59 3f       	cpi	r21, 0xF9	; 249
    378a:	50 f4       	brcc	.+20     	; 0x37a0 <__addsf3x+0x52>
    378c:	50 3e       	cpi	r21, 0xE0	; 224
    378e:	68 f1       	brcs	.+90     	; 0x37ea <__addsf3x+0x9c>
    3790:	1a 16       	cp	r1, r26
    3792:	f0 40       	sbci	r31, 0x00	; 0
    3794:	a2 2f       	mov	r26, r18
    3796:	23 2f       	mov	r18, r19
    3798:	34 2f       	mov	r19, r20
    379a:	44 27       	eor	r20, r20
    379c:	58 5f       	subi	r21, 0xF8	; 248
    379e:	f3 cf       	rjmp	.-26     	; 0x3786 <__addsf3x+0x38>
    37a0:	46 95       	lsr	r20
    37a2:	37 95       	ror	r19
    37a4:	27 95       	ror	r18
    37a6:	a7 95       	ror	r26
    37a8:	f0 40       	sbci	r31, 0x00	; 0
    37aa:	53 95       	inc	r21
    37ac:	c9 f7       	brne	.-14     	; 0x37a0 <__addsf3x+0x52>
    37ae:	7e f4       	brtc	.+30     	; 0x37ce <__addsf3x+0x80>
    37b0:	1f 16       	cp	r1, r31
    37b2:	ba 0b       	sbc	r27, r26
    37b4:	62 0b       	sbc	r22, r18
    37b6:	73 0b       	sbc	r23, r19
    37b8:	84 0b       	sbc	r24, r20
    37ba:	ba f0       	brmi	.+46     	; 0x37ea <__addsf3x+0x9c>
    37bc:	91 50       	subi	r25, 0x01	; 1
    37be:	a1 f0       	breq	.+40     	; 0x37e8 <__addsf3x+0x9a>
    37c0:	ff 0f       	add	r31, r31
    37c2:	bb 1f       	adc	r27, r27
    37c4:	66 1f       	adc	r22, r22
    37c6:	77 1f       	adc	r23, r23
    37c8:	88 1f       	adc	r24, r24
    37ca:	c2 f7       	brpl	.-16     	; 0x37bc <__addsf3x+0x6e>
    37cc:	0e c0       	rjmp	.+28     	; 0x37ea <__addsf3x+0x9c>
    37ce:	ba 0f       	add	r27, r26
    37d0:	62 1f       	adc	r22, r18
    37d2:	73 1f       	adc	r23, r19
    37d4:	84 1f       	adc	r24, r20
    37d6:	48 f4       	brcc	.+18     	; 0x37ea <__addsf3x+0x9c>
    37d8:	87 95       	ror	r24
    37da:	77 95       	ror	r23
    37dc:	67 95       	ror	r22
    37de:	b7 95       	ror	r27
    37e0:	f7 95       	ror	r31
    37e2:	9e 3f       	cpi	r25, 0xFE	; 254
    37e4:	08 f0       	brcs	.+2      	; 0x37e8 <__addsf3x+0x9a>
    37e6:	b0 cf       	rjmp	.-160    	; 0x3748 <__addsf3+0x28>
    37e8:	93 95       	inc	r25
    37ea:	88 0f       	add	r24, r24
    37ec:	08 f0       	brcs	.+2      	; 0x37f0 <__addsf3x+0xa2>
    37ee:	99 27       	eor	r25, r25
    37f0:	ee 0f       	add	r30, r30
    37f2:	97 95       	ror	r25
    37f4:	87 95       	ror	r24
    37f6:	08 95       	ret

000037f8 <__cmpsf2>:
    37f8:	0e 94 e6 1c 	call	0x39cc	; 0x39cc <__fp_cmp>
    37fc:	08 f4       	brcc	.+2      	; 0x3800 <__cmpsf2+0x8>
    37fe:	81 e0       	ldi	r24, 0x01	; 1
    3800:	08 95       	ret

00003802 <__divsf3>:
    3802:	0e 94 15 1c 	call	0x382a	; 0x382a <__divsf3x>
    3806:	0c 94 21 1d 	jmp	0x3a42	; 0x3a42 <__fp_round>
    380a:	0e 94 1a 1d 	call	0x3a34	; 0x3a34 <__fp_pscB>
    380e:	58 f0       	brcs	.+22     	; 0x3826 <__divsf3+0x24>
    3810:	0e 94 13 1d 	call	0x3a26	; 0x3a26 <__fp_pscA>
    3814:	40 f0       	brcs	.+16     	; 0x3826 <__divsf3+0x24>
    3816:	29 f4       	brne	.+10     	; 0x3822 <__divsf3+0x20>
    3818:	5f 3f       	cpi	r21, 0xFF	; 255
    381a:	29 f0       	breq	.+10     	; 0x3826 <__divsf3+0x24>
    381c:	0c 94 0a 1d 	jmp	0x3a14	; 0x3a14 <__fp_inf>
    3820:	51 11       	cpse	r21, r1
    3822:	0c 94 55 1d 	jmp	0x3aaa	; 0x3aaa <__fp_szero>
    3826:	0c 94 10 1d 	jmp	0x3a20	; 0x3a20 <__fp_nan>

0000382a <__divsf3x>:
    382a:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <__fp_split3>
    382e:	68 f3       	brcs	.-38     	; 0x380a <__divsf3+0x8>

00003830 <__divsf3_pse>:
    3830:	99 23       	and	r25, r25
    3832:	b1 f3       	breq	.-20     	; 0x3820 <__divsf3+0x1e>
    3834:	55 23       	and	r21, r21
    3836:	91 f3       	breq	.-28     	; 0x381c <__divsf3+0x1a>
    3838:	95 1b       	sub	r25, r21
    383a:	55 0b       	sbc	r21, r21
    383c:	bb 27       	eor	r27, r27
    383e:	aa 27       	eor	r26, r26
    3840:	62 17       	cp	r22, r18
    3842:	73 07       	cpc	r23, r19
    3844:	84 07       	cpc	r24, r20
    3846:	38 f0       	brcs	.+14     	; 0x3856 <__divsf3_pse+0x26>
    3848:	9f 5f       	subi	r25, 0xFF	; 255
    384a:	5f 4f       	sbci	r21, 0xFF	; 255
    384c:	22 0f       	add	r18, r18
    384e:	33 1f       	adc	r19, r19
    3850:	44 1f       	adc	r20, r20
    3852:	aa 1f       	adc	r26, r26
    3854:	a9 f3       	breq	.-22     	; 0x3840 <__divsf3_pse+0x10>
    3856:	35 d0       	rcall	.+106    	; 0x38c2 <__divsf3_pse+0x92>
    3858:	0e 2e       	mov	r0, r30
    385a:	3a f0       	brmi	.+14     	; 0x386a <__divsf3_pse+0x3a>
    385c:	e0 e8       	ldi	r30, 0x80	; 128
    385e:	32 d0       	rcall	.+100    	; 0x38c4 <__divsf3_pse+0x94>
    3860:	91 50       	subi	r25, 0x01	; 1
    3862:	50 40       	sbci	r21, 0x00	; 0
    3864:	e6 95       	lsr	r30
    3866:	00 1c       	adc	r0, r0
    3868:	ca f7       	brpl	.-14     	; 0x385c <__divsf3_pse+0x2c>
    386a:	2b d0       	rcall	.+86     	; 0x38c2 <__divsf3_pse+0x92>
    386c:	fe 2f       	mov	r31, r30
    386e:	29 d0       	rcall	.+82     	; 0x38c2 <__divsf3_pse+0x92>
    3870:	66 0f       	add	r22, r22
    3872:	77 1f       	adc	r23, r23
    3874:	88 1f       	adc	r24, r24
    3876:	bb 1f       	adc	r27, r27
    3878:	26 17       	cp	r18, r22
    387a:	37 07       	cpc	r19, r23
    387c:	48 07       	cpc	r20, r24
    387e:	ab 07       	cpc	r26, r27
    3880:	b0 e8       	ldi	r27, 0x80	; 128
    3882:	09 f0       	breq	.+2      	; 0x3886 <__divsf3_pse+0x56>
    3884:	bb 0b       	sbc	r27, r27
    3886:	80 2d       	mov	r24, r0
    3888:	bf 01       	movw	r22, r30
    388a:	ff 27       	eor	r31, r31
    388c:	93 58       	subi	r25, 0x83	; 131
    388e:	5f 4f       	sbci	r21, 0xFF	; 255
    3890:	3a f0       	brmi	.+14     	; 0x38a0 <__divsf3_pse+0x70>
    3892:	9e 3f       	cpi	r25, 0xFE	; 254
    3894:	51 05       	cpc	r21, r1
    3896:	78 f0       	brcs	.+30     	; 0x38b6 <__divsf3_pse+0x86>
    3898:	0c 94 0a 1d 	jmp	0x3a14	; 0x3a14 <__fp_inf>
    389c:	0c 94 55 1d 	jmp	0x3aaa	; 0x3aaa <__fp_szero>
    38a0:	5f 3f       	cpi	r21, 0xFF	; 255
    38a2:	e4 f3       	brlt	.-8      	; 0x389c <__divsf3_pse+0x6c>
    38a4:	98 3e       	cpi	r25, 0xE8	; 232
    38a6:	d4 f3       	brlt	.-12     	; 0x389c <__divsf3_pse+0x6c>
    38a8:	86 95       	lsr	r24
    38aa:	77 95       	ror	r23
    38ac:	67 95       	ror	r22
    38ae:	b7 95       	ror	r27
    38b0:	f7 95       	ror	r31
    38b2:	9f 5f       	subi	r25, 0xFF	; 255
    38b4:	c9 f7       	brne	.-14     	; 0x38a8 <__divsf3_pse+0x78>
    38b6:	88 0f       	add	r24, r24
    38b8:	91 1d       	adc	r25, r1
    38ba:	96 95       	lsr	r25
    38bc:	87 95       	ror	r24
    38be:	97 f9       	bld	r25, 7
    38c0:	08 95       	ret
    38c2:	e1 e0       	ldi	r30, 0x01	; 1
    38c4:	66 0f       	add	r22, r22
    38c6:	77 1f       	adc	r23, r23
    38c8:	88 1f       	adc	r24, r24
    38ca:	bb 1f       	adc	r27, r27
    38cc:	62 17       	cp	r22, r18
    38ce:	73 07       	cpc	r23, r19
    38d0:	84 07       	cpc	r24, r20
    38d2:	ba 07       	cpc	r27, r26
    38d4:	20 f0       	brcs	.+8      	; 0x38de <__divsf3_pse+0xae>
    38d6:	62 1b       	sub	r22, r18
    38d8:	73 0b       	sbc	r23, r19
    38da:	84 0b       	sbc	r24, r20
    38dc:	ba 0b       	sbc	r27, r26
    38de:	ee 1f       	adc	r30, r30
    38e0:	88 f7       	brcc	.-30     	; 0x38c4 <__divsf3_pse+0x94>
    38e2:	e0 95       	com	r30
    38e4:	08 95       	ret

000038e6 <__fixsfsi>:
    38e6:	0e 94 7a 1c 	call	0x38f4	; 0x38f4 <__fixunssfsi>
    38ea:	68 94       	set
    38ec:	b1 11       	cpse	r27, r1
    38ee:	0c 94 55 1d 	jmp	0x3aaa	; 0x3aaa <__fp_szero>
    38f2:	08 95       	ret

000038f4 <__fixunssfsi>:
    38f4:	0e 94 3a 1d 	call	0x3a74	; 0x3a74 <__fp_splitA>
    38f8:	88 f0       	brcs	.+34     	; 0x391c <__fixunssfsi+0x28>
    38fa:	9f 57       	subi	r25, 0x7F	; 127
    38fc:	98 f0       	brcs	.+38     	; 0x3924 <__fixunssfsi+0x30>
    38fe:	b9 2f       	mov	r27, r25
    3900:	99 27       	eor	r25, r25
    3902:	b7 51       	subi	r27, 0x17	; 23
    3904:	b0 f0       	brcs	.+44     	; 0x3932 <__fixunssfsi+0x3e>
    3906:	e1 f0       	breq	.+56     	; 0x3940 <__fixunssfsi+0x4c>
    3908:	66 0f       	add	r22, r22
    390a:	77 1f       	adc	r23, r23
    390c:	88 1f       	adc	r24, r24
    390e:	99 1f       	adc	r25, r25
    3910:	1a f0       	brmi	.+6      	; 0x3918 <__fixunssfsi+0x24>
    3912:	ba 95       	dec	r27
    3914:	c9 f7       	brne	.-14     	; 0x3908 <__fixunssfsi+0x14>
    3916:	14 c0       	rjmp	.+40     	; 0x3940 <__fixunssfsi+0x4c>
    3918:	b1 30       	cpi	r27, 0x01	; 1
    391a:	91 f0       	breq	.+36     	; 0x3940 <__fixunssfsi+0x4c>
    391c:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <__fp_zero>
    3920:	b1 e0       	ldi	r27, 0x01	; 1
    3922:	08 95       	ret
    3924:	0c 94 54 1d 	jmp	0x3aa8	; 0x3aa8 <__fp_zero>
    3928:	67 2f       	mov	r22, r23
    392a:	78 2f       	mov	r23, r24
    392c:	88 27       	eor	r24, r24
    392e:	b8 5f       	subi	r27, 0xF8	; 248
    3930:	39 f0       	breq	.+14     	; 0x3940 <__fixunssfsi+0x4c>
    3932:	b9 3f       	cpi	r27, 0xF9	; 249
    3934:	cc f3       	brlt	.-14     	; 0x3928 <__fixunssfsi+0x34>
    3936:	86 95       	lsr	r24
    3938:	77 95       	ror	r23
    393a:	67 95       	ror	r22
    393c:	b3 95       	inc	r27
    393e:	d9 f7       	brne	.-10     	; 0x3936 <__fixunssfsi+0x42>
    3940:	3e f4       	brtc	.+14     	; 0x3950 <__fixunssfsi+0x5c>
    3942:	90 95       	com	r25
    3944:	80 95       	com	r24
    3946:	70 95       	com	r23
    3948:	61 95       	neg	r22
    394a:	7f 4f       	sbci	r23, 0xFF	; 255
    394c:	8f 4f       	sbci	r24, 0xFF	; 255
    394e:	9f 4f       	sbci	r25, 0xFF	; 255
    3950:	08 95       	ret

00003952 <__floatunsisf>:
    3952:	e8 94       	clt
    3954:	09 c0       	rjmp	.+18     	; 0x3968 <__floatsisf+0x12>

00003956 <__floatsisf>:
    3956:	97 fb       	bst	r25, 7
    3958:	3e f4       	brtc	.+14     	; 0x3968 <__floatsisf+0x12>
    395a:	90 95       	com	r25
    395c:	80 95       	com	r24
    395e:	70 95       	com	r23
    3960:	61 95       	neg	r22
    3962:	7f 4f       	sbci	r23, 0xFF	; 255
    3964:	8f 4f       	sbci	r24, 0xFF	; 255
    3966:	9f 4f       	sbci	r25, 0xFF	; 255
    3968:	99 23       	and	r25, r25
    396a:	a9 f0       	breq	.+42     	; 0x3996 <__floatsisf+0x40>
    396c:	f9 2f       	mov	r31, r25
    396e:	96 e9       	ldi	r25, 0x96	; 150
    3970:	bb 27       	eor	r27, r27
    3972:	93 95       	inc	r25
    3974:	f6 95       	lsr	r31
    3976:	87 95       	ror	r24
    3978:	77 95       	ror	r23
    397a:	67 95       	ror	r22
    397c:	b7 95       	ror	r27
    397e:	f1 11       	cpse	r31, r1
    3980:	f8 cf       	rjmp	.-16     	; 0x3972 <__floatsisf+0x1c>
    3982:	fa f4       	brpl	.+62     	; 0x39c2 <__floatsisf+0x6c>
    3984:	bb 0f       	add	r27, r27
    3986:	11 f4       	brne	.+4      	; 0x398c <__floatsisf+0x36>
    3988:	60 ff       	sbrs	r22, 0
    398a:	1b c0       	rjmp	.+54     	; 0x39c2 <__floatsisf+0x6c>
    398c:	6f 5f       	subi	r22, 0xFF	; 255
    398e:	7f 4f       	sbci	r23, 0xFF	; 255
    3990:	8f 4f       	sbci	r24, 0xFF	; 255
    3992:	9f 4f       	sbci	r25, 0xFF	; 255
    3994:	16 c0       	rjmp	.+44     	; 0x39c2 <__floatsisf+0x6c>
    3996:	88 23       	and	r24, r24
    3998:	11 f0       	breq	.+4      	; 0x399e <__floatsisf+0x48>
    399a:	96 e9       	ldi	r25, 0x96	; 150
    399c:	11 c0       	rjmp	.+34     	; 0x39c0 <__floatsisf+0x6a>
    399e:	77 23       	and	r23, r23
    39a0:	21 f0       	breq	.+8      	; 0x39aa <__floatsisf+0x54>
    39a2:	9e e8       	ldi	r25, 0x8E	; 142
    39a4:	87 2f       	mov	r24, r23
    39a6:	76 2f       	mov	r23, r22
    39a8:	05 c0       	rjmp	.+10     	; 0x39b4 <__floatsisf+0x5e>
    39aa:	66 23       	and	r22, r22
    39ac:	71 f0       	breq	.+28     	; 0x39ca <__floatsisf+0x74>
    39ae:	96 e8       	ldi	r25, 0x86	; 134
    39b0:	86 2f       	mov	r24, r22
    39b2:	70 e0       	ldi	r23, 0x00	; 0
    39b4:	60 e0       	ldi	r22, 0x00	; 0
    39b6:	2a f0       	brmi	.+10     	; 0x39c2 <__floatsisf+0x6c>
    39b8:	9a 95       	dec	r25
    39ba:	66 0f       	add	r22, r22
    39bc:	77 1f       	adc	r23, r23
    39be:	88 1f       	adc	r24, r24
    39c0:	da f7       	brpl	.-10     	; 0x39b8 <__floatsisf+0x62>
    39c2:	88 0f       	add	r24, r24
    39c4:	96 95       	lsr	r25
    39c6:	87 95       	ror	r24
    39c8:	97 f9       	bld	r25, 7
    39ca:	08 95       	ret

000039cc <__fp_cmp>:
    39cc:	99 0f       	add	r25, r25
    39ce:	00 08       	sbc	r0, r0
    39d0:	55 0f       	add	r21, r21
    39d2:	aa 0b       	sbc	r26, r26
    39d4:	e0 e8       	ldi	r30, 0x80	; 128
    39d6:	fe ef       	ldi	r31, 0xFE	; 254
    39d8:	16 16       	cp	r1, r22
    39da:	17 06       	cpc	r1, r23
    39dc:	e8 07       	cpc	r30, r24
    39de:	f9 07       	cpc	r31, r25
    39e0:	c0 f0       	brcs	.+48     	; 0x3a12 <__fp_cmp+0x46>
    39e2:	12 16       	cp	r1, r18
    39e4:	13 06       	cpc	r1, r19
    39e6:	e4 07       	cpc	r30, r20
    39e8:	f5 07       	cpc	r31, r21
    39ea:	98 f0       	brcs	.+38     	; 0x3a12 <__fp_cmp+0x46>
    39ec:	62 1b       	sub	r22, r18
    39ee:	73 0b       	sbc	r23, r19
    39f0:	84 0b       	sbc	r24, r20
    39f2:	95 0b       	sbc	r25, r21
    39f4:	39 f4       	brne	.+14     	; 0x3a04 <__fp_cmp+0x38>
    39f6:	0a 26       	eor	r0, r26
    39f8:	61 f0       	breq	.+24     	; 0x3a12 <__fp_cmp+0x46>
    39fa:	23 2b       	or	r18, r19
    39fc:	24 2b       	or	r18, r20
    39fe:	25 2b       	or	r18, r21
    3a00:	21 f4       	brne	.+8      	; 0x3a0a <__fp_cmp+0x3e>
    3a02:	08 95       	ret
    3a04:	0a 26       	eor	r0, r26
    3a06:	09 f4       	brne	.+2      	; 0x3a0a <__fp_cmp+0x3e>
    3a08:	a1 40       	sbci	r26, 0x01	; 1
    3a0a:	a6 95       	lsr	r26
    3a0c:	8f ef       	ldi	r24, 0xFF	; 255
    3a0e:	81 1d       	adc	r24, r1
    3a10:	81 1d       	adc	r24, r1
    3a12:	08 95       	ret

00003a14 <__fp_inf>:
    3a14:	97 f9       	bld	r25, 7
    3a16:	9f 67       	ori	r25, 0x7F	; 127
    3a18:	80 e8       	ldi	r24, 0x80	; 128
    3a1a:	70 e0       	ldi	r23, 0x00	; 0
    3a1c:	60 e0       	ldi	r22, 0x00	; 0
    3a1e:	08 95       	ret

00003a20 <__fp_nan>:
    3a20:	9f ef       	ldi	r25, 0xFF	; 255
    3a22:	80 ec       	ldi	r24, 0xC0	; 192
    3a24:	08 95       	ret

00003a26 <__fp_pscA>:
    3a26:	00 24       	eor	r0, r0
    3a28:	0a 94       	dec	r0
    3a2a:	16 16       	cp	r1, r22
    3a2c:	17 06       	cpc	r1, r23
    3a2e:	18 06       	cpc	r1, r24
    3a30:	09 06       	cpc	r0, r25
    3a32:	08 95       	ret

00003a34 <__fp_pscB>:
    3a34:	00 24       	eor	r0, r0
    3a36:	0a 94       	dec	r0
    3a38:	12 16       	cp	r1, r18
    3a3a:	13 06       	cpc	r1, r19
    3a3c:	14 06       	cpc	r1, r20
    3a3e:	05 06       	cpc	r0, r21
    3a40:	08 95       	ret

00003a42 <__fp_round>:
    3a42:	09 2e       	mov	r0, r25
    3a44:	03 94       	inc	r0
    3a46:	00 0c       	add	r0, r0
    3a48:	11 f4       	brne	.+4      	; 0x3a4e <__fp_round+0xc>
    3a4a:	88 23       	and	r24, r24
    3a4c:	52 f0       	brmi	.+20     	; 0x3a62 <__fp_round+0x20>
    3a4e:	bb 0f       	add	r27, r27
    3a50:	40 f4       	brcc	.+16     	; 0x3a62 <__fp_round+0x20>
    3a52:	bf 2b       	or	r27, r31
    3a54:	11 f4       	brne	.+4      	; 0x3a5a <__fp_round+0x18>
    3a56:	60 ff       	sbrs	r22, 0
    3a58:	04 c0       	rjmp	.+8      	; 0x3a62 <__fp_round+0x20>
    3a5a:	6f 5f       	subi	r22, 0xFF	; 255
    3a5c:	7f 4f       	sbci	r23, 0xFF	; 255
    3a5e:	8f 4f       	sbci	r24, 0xFF	; 255
    3a60:	9f 4f       	sbci	r25, 0xFF	; 255
    3a62:	08 95       	ret

00003a64 <__fp_split3>:
    3a64:	57 fd       	sbrc	r21, 7
    3a66:	90 58       	subi	r25, 0x80	; 128
    3a68:	44 0f       	add	r20, r20
    3a6a:	55 1f       	adc	r21, r21
    3a6c:	59 f0       	breq	.+22     	; 0x3a84 <__fp_splitA+0x10>
    3a6e:	5f 3f       	cpi	r21, 0xFF	; 255
    3a70:	71 f0       	breq	.+28     	; 0x3a8e <__fp_splitA+0x1a>
    3a72:	47 95       	ror	r20

00003a74 <__fp_splitA>:
    3a74:	88 0f       	add	r24, r24
    3a76:	97 fb       	bst	r25, 7
    3a78:	99 1f       	adc	r25, r25
    3a7a:	61 f0       	breq	.+24     	; 0x3a94 <__fp_splitA+0x20>
    3a7c:	9f 3f       	cpi	r25, 0xFF	; 255
    3a7e:	79 f0       	breq	.+30     	; 0x3a9e <__fp_splitA+0x2a>
    3a80:	87 95       	ror	r24
    3a82:	08 95       	ret
    3a84:	12 16       	cp	r1, r18
    3a86:	13 06       	cpc	r1, r19
    3a88:	14 06       	cpc	r1, r20
    3a8a:	55 1f       	adc	r21, r21
    3a8c:	f2 cf       	rjmp	.-28     	; 0x3a72 <__fp_split3+0xe>
    3a8e:	46 95       	lsr	r20
    3a90:	f1 df       	rcall	.-30     	; 0x3a74 <__fp_splitA>
    3a92:	08 c0       	rjmp	.+16     	; 0x3aa4 <__fp_splitA+0x30>
    3a94:	16 16       	cp	r1, r22
    3a96:	17 06       	cpc	r1, r23
    3a98:	18 06       	cpc	r1, r24
    3a9a:	99 1f       	adc	r25, r25
    3a9c:	f1 cf       	rjmp	.-30     	; 0x3a80 <__fp_splitA+0xc>
    3a9e:	86 95       	lsr	r24
    3aa0:	71 05       	cpc	r23, r1
    3aa2:	61 05       	cpc	r22, r1
    3aa4:	08 94       	sec
    3aa6:	08 95       	ret

00003aa8 <__fp_zero>:
    3aa8:	e8 94       	clt

00003aaa <__fp_szero>:
    3aaa:	bb 27       	eor	r27, r27
    3aac:	66 27       	eor	r22, r22
    3aae:	77 27       	eor	r23, r23
    3ab0:	cb 01       	movw	r24, r22
    3ab2:	97 f9       	bld	r25, 7
    3ab4:	08 95       	ret

00003ab6 <__gesf2>:
    3ab6:	0e 94 e6 1c 	call	0x39cc	; 0x39cc <__fp_cmp>
    3aba:	08 f4       	brcc	.+2      	; 0x3abe <__gesf2+0x8>
    3abc:	8f ef       	ldi	r24, 0xFF	; 255
    3abe:	08 95       	ret

00003ac0 <__mulsf3>:
    3ac0:	0e 94 73 1d 	call	0x3ae6	; 0x3ae6 <__mulsf3x>
    3ac4:	0c 94 21 1d 	jmp	0x3a42	; 0x3a42 <__fp_round>
    3ac8:	0e 94 13 1d 	call	0x3a26	; 0x3a26 <__fp_pscA>
    3acc:	38 f0       	brcs	.+14     	; 0x3adc <__mulsf3+0x1c>
    3ace:	0e 94 1a 1d 	call	0x3a34	; 0x3a34 <__fp_pscB>
    3ad2:	20 f0       	brcs	.+8      	; 0x3adc <__mulsf3+0x1c>
    3ad4:	95 23       	and	r25, r21
    3ad6:	11 f0       	breq	.+4      	; 0x3adc <__mulsf3+0x1c>
    3ad8:	0c 94 0a 1d 	jmp	0x3a14	; 0x3a14 <__fp_inf>
    3adc:	0c 94 10 1d 	jmp	0x3a20	; 0x3a20 <__fp_nan>
    3ae0:	11 24       	eor	r1, r1
    3ae2:	0c 94 55 1d 	jmp	0x3aaa	; 0x3aaa <__fp_szero>

00003ae6 <__mulsf3x>:
    3ae6:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <__fp_split3>
    3aea:	70 f3       	brcs	.-36     	; 0x3ac8 <__mulsf3+0x8>

00003aec <__mulsf3_pse>:
    3aec:	95 9f       	mul	r25, r21
    3aee:	c1 f3       	breq	.-16     	; 0x3ae0 <__mulsf3+0x20>
    3af0:	95 0f       	add	r25, r21
    3af2:	50 e0       	ldi	r21, 0x00	; 0
    3af4:	55 1f       	adc	r21, r21
    3af6:	62 9f       	mul	r22, r18
    3af8:	f0 01       	movw	r30, r0
    3afa:	72 9f       	mul	r23, r18
    3afc:	bb 27       	eor	r27, r27
    3afe:	f0 0d       	add	r31, r0
    3b00:	b1 1d       	adc	r27, r1
    3b02:	63 9f       	mul	r22, r19
    3b04:	aa 27       	eor	r26, r26
    3b06:	f0 0d       	add	r31, r0
    3b08:	b1 1d       	adc	r27, r1
    3b0a:	aa 1f       	adc	r26, r26
    3b0c:	64 9f       	mul	r22, r20
    3b0e:	66 27       	eor	r22, r22
    3b10:	b0 0d       	add	r27, r0
    3b12:	a1 1d       	adc	r26, r1
    3b14:	66 1f       	adc	r22, r22
    3b16:	82 9f       	mul	r24, r18
    3b18:	22 27       	eor	r18, r18
    3b1a:	b0 0d       	add	r27, r0
    3b1c:	a1 1d       	adc	r26, r1
    3b1e:	62 1f       	adc	r22, r18
    3b20:	73 9f       	mul	r23, r19
    3b22:	b0 0d       	add	r27, r0
    3b24:	a1 1d       	adc	r26, r1
    3b26:	62 1f       	adc	r22, r18
    3b28:	83 9f       	mul	r24, r19
    3b2a:	a0 0d       	add	r26, r0
    3b2c:	61 1d       	adc	r22, r1
    3b2e:	22 1f       	adc	r18, r18
    3b30:	74 9f       	mul	r23, r20
    3b32:	33 27       	eor	r19, r19
    3b34:	a0 0d       	add	r26, r0
    3b36:	61 1d       	adc	r22, r1
    3b38:	23 1f       	adc	r18, r19
    3b3a:	84 9f       	mul	r24, r20
    3b3c:	60 0d       	add	r22, r0
    3b3e:	21 1d       	adc	r18, r1
    3b40:	82 2f       	mov	r24, r18
    3b42:	76 2f       	mov	r23, r22
    3b44:	6a 2f       	mov	r22, r26
    3b46:	11 24       	eor	r1, r1
    3b48:	9f 57       	subi	r25, 0x7F	; 127
    3b4a:	50 40       	sbci	r21, 0x00	; 0
    3b4c:	9a f0       	brmi	.+38     	; 0x3b74 <__mulsf3_pse+0x88>
    3b4e:	f1 f0       	breq	.+60     	; 0x3b8c <__mulsf3_pse+0xa0>
    3b50:	88 23       	and	r24, r24
    3b52:	4a f0       	brmi	.+18     	; 0x3b66 <__mulsf3_pse+0x7a>
    3b54:	ee 0f       	add	r30, r30
    3b56:	ff 1f       	adc	r31, r31
    3b58:	bb 1f       	adc	r27, r27
    3b5a:	66 1f       	adc	r22, r22
    3b5c:	77 1f       	adc	r23, r23
    3b5e:	88 1f       	adc	r24, r24
    3b60:	91 50       	subi	r25, 0x01	; 1
    3b62:	50 40       	sbci	r21, 0x00	; 0
    3b64:	a9 f7       	brne	.-22     	; 0x3b50 <__mulsf3_pse+0x64>
    3b66:	9e 3f       	cpi	r25, 0xFE	; 254
    3b68:	51 05       	cpc	r21, r1
    3b6a:	80 f0       	brcs	.+32     	; 0x3b8c <__mulsf3_pse+0xa0>
    3b6c:	0c 94 0a 1d 	jmp	0x3a14	; 0x3a14 <__fp_inf>
    3b70:	0c 94 55 1d 	jmp	0x3aaa	; 0x3aaa <__fp_szero>
    3b74:	5f 3f       	cpi	r21, 0xFF	; 255
    3b76:	e4 f3       	brlt	.-8      	; 0x3b70 <__mulsf3_pse+0x84>
    3b78:	98 3e       	cpi	r25, 0xE8	; 232
    3b7a:	d4 f3       	brlt	.-12     	; 0x3b70 <__mulsf3_pse+0x84>
    3b7c:	86 95       	lsr	r24
    3b7e:	77 95       	ror	r23
    3b80:	67 95       	ror	r22
    3b82:	b7 95       	ror	r27
    3b84:	f7 95       	ror	r31
    3b86:	e7 95       	ror	r30
    3b88:	9f 5f       	subi	r25, 0xFF	; 255
    3b8a:	c1 f7       	brne	.-16     	; 0x3b7c <__mulsf3_pse+0x90>
    3b8c:	fe 2b       	or	r31, r30
    3b8e:	88 0f       	add	r24, r24
    3b90:	91 1d       	adc	r25, r1
    3b92:	96 95       	lsr	r25
    3b94:	87 95       	ror	r24
    3b96:	97 f9       	bld	r25, 7
    3b98:	08 95       	ret

00003b9a <__tablejump2__>:
    3b9a:	ee 0f       	add	r30, r30
    3b9c:	ff 1f       	adc	r31, r31
    3b9e:	88 1f       	adc	r24, r24
    3ba0:	8b bf       	out	0x3b, r24	; 59
    3ba2:	07 90       	elpm	r0, Z+
    3ba4:	f6 91       	elpm	r31, Z
    3ba6:	e0 2d       	mov	r30, r0
    3ba8:	19 94       	eijmp

00003baa <memcpy>:
    3baa:	fb 01       	movw	r30, r22
    3bac:	dc 01       	movw	r26, r24
    3bae:	02 c0       	rjmp	.+4      	; 0x3bb4 <memcpy+0xa>
    3bb0:	01 90       	ld	r0, Z+
    3bb2:	0d 92       	st	X+, r0
    3bb4:	41 50       	subi	r20, 0x01	; 1
    3bb6:	50 40       	sbci	r21, 0x00	; 0
    3bb8:	d8 f7       	brcc	.-10     	; 0x3bb0 <memcpy+0x6>
    3bba:	08 95       	ret

00003bbc <memset>:
    3bbc:	dc 01       	movw	r26, r24
    3bbe:	01 c0       	rjmp	.+2      	; 0x3bc2 <memset+0x6>
    3bc0:	6d 93       	st	X+, r22
    3bc2:	41 50       	subi	r20, 0x01	; 1
    3bc4:	50 40       	sbci	r21, 0x00	; 0
    3bc6:	e0 f7       	brcc	.-8      	; 0x3bc0 <memset+0x4>
    3bc8:	08 95       	ret

00003bca <__itoa_ncheck>:
    3bca:	bb 27       	eor	r27, r27
    3bcc:	4a 30       	cpi	r20, 0x0A	; 10
    3bce:	31 f4       	brne	.+12     	; 0x3bdc <__itoa_ncheck+0x12>
    3bd0:	99 23       	and	r25, r25
    3bd2:	22 f4       	brpl	.+8      	; 0x3bdc <__itoa_ncheck+0x12>
    3bd4:	bd e2       	ldi	r27, 0x2D	; 45
    3bd6:	90 95       	com	r25
    3bd8:	81 95       	neg	r24
    3bda:	9f 4f       	sbci	r25, 0xFF	; 255
    3bdc:	0c 94 f1 1d 	jmp	0x3be2	; 0x3be2 <__utoa_common>

00003be0 <__utoa_ncheck>:
    3be0:	bb 27       	eor	r27, r27

00003be2 <__utoa_common>:
    3be2:	fb 01       	movw	r30, r22
    3be4:	55 27       	eor	r21, r21
    3be6:	aa 27       	eor	r26, r26
    3be8:	88 0f       	add	r24, r24
    3bea:	99 1f       	adc	r25, r25
    3bec:	aa 1f       	adc	r26, r26
    3bee:	a4 17       	cp	r26, r20
    3bf0:	10 f0       	brcs	.+4      	; 0x3bf6 <__utoa_common+0x14>
    3bf2:	a4 1b       	sub	r26, r20
    3bf4:	83 95       	inc	r24
    3bf6:	50 51       	subi	r21, 0x10	; 16
    3bf8:	b9 f7       	brne	.-18     	; 0x3be8 <__utoa_common+0x6>
    3bfa:	a0 5d       	subi	r26, 0xD0	; 208
    3bfc:	aa 33       	cpi	r26, 0x3A	; 58
    3bfe:	08 f0       	brcs	.+2      	; 0x3c02 <__utoa_common+0x20>
    3c00:	a9 5d       	subi	r26, 0xD9	; 217
    3c02:	a1 93       	st	Z+, r26
    3c04:	00 97       	sbiw	r24, 0x00	; 0
    3c06:	79 f7       	brne	.-34     	; 0x3be6 <__utoa_common+0x4>
    3c08:	b1 11       	cpse	r27, r1
    3c0a:	b1 93       	st	Z+, r27
    3c0c:	11 92       	st	Z+, r1
    3c0e:	cb 01       	movw	r24, r22
    3c10:	0c 94 0a 1e 	jmp	0x3c14	; 0x3c14 <strrev>

00003c14 <strrev>:
    3c14:	dc 01       	movw	r26, r24
    3c16:	fc 01       	movw	r30, r24
    3c18:	67 2f       	mov	r22, r23
    3c1a:	71 91       	ld	r23, Z+
    3c1c:	77 23       	and	r23, r23
    3c1e:	e1 f7       	brne	.-8      	; 0x3c18 <strrev+0x4>
    3c20:	32 97       	sbiw	r30, 0x02	; 2
    3c22:	04 c0       	rjmp	.+8      	; 0x3c2c <strrev+0x18>
    3c24:	7c 91       	ld	r23, X
    3c26:	6d 93       	st	X+, r22
    3c28:	70 83       	st	Z, r23
    3c2a:	62 91       	ld	r22, -Z
    3c2c:	ae 17       	cp	r26, r30
    3c2e:	bf 07       	cpc	r27, r31
    3c30:	c8 f3       	brcs	.-14     	; 0x3c24 <strrev+0x10>
    3c32:	08 95       	ret

00003c34 <_exit>:
    3c34:	f8 94       	cli

00003c36 <__stop_program>:
    3c36:	ff cf       	rjmp	.-2      	; 0x3c36 <__stop_program>
